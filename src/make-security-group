#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Load the helper library.
. "${progDir}/lib/init"


#
# Helper functions
#

# Figures out a name for the security group: If the VPC has a name, use that as
# a basis. Or, if the VPC doesn't have a name, then just use the VPC ID as the
# basis.
function figure-out-name {
    local filterSpec=

    local name
    name=$(ec2-json describe-vpcs \
        --in="${inRegion}" \
        "$(lib filter-spec vpc-id="${vpcId}")" \
        :: --raw \
        '.Vpcs[0].Tags[] | select(.Key == "Name") | .Value'
    ) \
    || return "$?"

    if [[ ${name} == '' ]]; then
        name="for-${vpcId}"
    fi

    echo "$(lib now-stamp)-${name}"
}


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Description of the security group.
description=''

# Location (region or availability zone).
inLocation=''

# Name of the security group.
name=''

# Name or ID of the VPC.
vpcNameOrId=''

while (( $# > 0 )); do
    case "$1" in
        --description=?*)
            description="${1#*=}"
            ;;
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --name=?*)
            name="${1#*=}"
            ;;
        --vpc=?*)
            vpcNameOrId="${1#*=}"
            ;;
        -h|--help)
            showHelp=1
            break
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if (( !argError )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi
    if [[ ${vpcNameOrId} == '' ]]; then
        echo 1>&2 'Missing option: --vpc'
        argError=1
    fi
fi

if (( showHelp || argError )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Makes a new security group, configured in a standard way. On success,'
    echo '  prints the ID of the created security group.'
    echo ''
    echo '  The resulting security group allows incoming TCP traffic to the SSH'
    echo '  and HTTPS ports, and allows outgoing traffic to anywhere.'
    echo ''
    echo '  --description=<description>'
    echo '    Brief description of the security group. If not specified, fairly'
    echo '    generic and content-free text is used (because it does need to be'
    echo '    defined on the result).'
    echo '  --in=<region-or-zone>'
    echo '    What region to make the security group in. Must be specified. If'
    echo '    specified as an availability zone, only the region portion matters.'
    echo '  --name=<name>'
    echo '    Name to assign to the constructed VPC. If not specified, a name is'
    echo '    derived from the associated VPC.'
    echo '  --vpc=<name-or-id>'
    echo '    Name or ID of the VPC to be associated with. Must be specified.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

inRegion="$(lib region-from-location "${inLocation}")" \
|| exit "$?"

# Validate or find the ID of the VPC.
vpcId="$(lib find-vpc --in="${inRegion}" "${vpcNameOrId}")" \
|| exit "$?"

# Figure out the name if not passed as an option.
if [[ ${name} == '' ]]; then
    name="$(figure-out-name)" \
    || exit "$?"
fi

# Make up a description if not passed as an option.
if [[ ${description} == '' ]]; then
    description="$(lib now-stamp via-script)"
fi

groupId="$(ec2-json create-security-group \
    --in="${inRegion}" \
    description="${description}" \
    name="${name}" \
    tagSpec:json="$(lib name-tag-spec 'security-group' "${name}")" \
    vpcId="${vpcId}" \
    '
        $tagSpec +
        {
            Description: $description,
            GroupName: $name,
            VpcId: $vpcId
        }
    ' \
    :: --raw '.GroupId'
)" \
|| exit "$?"

echo 1>&2 "Made security group: ${groupId}"

# Note: Past this point, if there are errors, we attempt to clean up the
# partial mess by deleting the security group.

error=0

# Start with a blank slate of rules by deleting any that are already associated
# with the new security group.
#
# Context: As of this writing, a newly-created security group seems to come with
# one rule (egress allowed to anywhere in IPv4 space), but that fact isn't
# documented (or at least not blatantly documented) and arguably shouldn't be
# relied upon.
if (( !error )); then
    lib remove-security-group-rules --quiet --in="${inRegion}" \
        --security-group="${groupId}" --all \
    || exit "$?"
fi

# Common args for all calls to `add-security-group-rule`.
commonArgs=(--quiet --in="${inRegion}" --security-group="${groupId}"
    --name="${name}")

# Add egress rules.

if (( !error )); then
    lib add-security-group-rules "${commonArgs[@]}" \
        --egress --all-protocols --all-ports \
    && echo 1>&2 "Added all-access egress rules." \
    || error="$?"
fi

# Add ingress rules.

if (( !error )); then
    lib add-security-group-rules "${commonArgs[@]}" \
        --ingress --tcp --port=22 \
    && echo 1>&2 "Added SSH ingress rules." \
    || error="$?"
fi

if (( !error )); then
    lib add-security-group-rules "${commonArgs[@]}" \
        --ingress --tcp --port=443 \
    && echo 1>&2 "Added HTTPS ingress rules." \
    || error="$?"
fi

# Do cleanup if necessary.

if (( error )); then
    echo 1>&2 'Error(s) after group creation. Attempting cleanup!'
    ec2-json delete-security-group \
        --in="${inRegion}" \
        groupId="${groupId}" \
        '{ GroupId: $groupId }' \
    || echo 1>&2 'Error while deleting group, alas!'
    exit "${error}"
fi

echo "${groupId}"
