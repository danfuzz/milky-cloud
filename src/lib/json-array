#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Set up for library-internal usage.
. "${progDir}/init" --lib


#
# Argument parsing
#

# Compact output?
compactOutput=0

# String arguments?
strings=0

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Parse options.
while (( $# > 0 )); do
    case "$1" in
        --compact)
            compactOutput=1
            ;;
        --strings)
            strings=1
            ;;
        -h|--help)
            showHelp=1
            break
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

# Collect remaining arguments.
args=("$@")

if (( showHelp || argError )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...] [--] [<value> ...]"
    echo '  Constructs and prints a JSON array of values, of all of the value'
    echo '  arguments passed to this script, each of which is interpreted as a'
    echo '  JSON value (default) or a string (with the appropriate option).'
    echo ''
    echo '  --compact'
    echo '    Output in compact form (not multiline JSON).'
    echo '  --strings'
    echo '    Treat arguments as literal strings instead of JSON values.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

jqArgs=('--null-input')

if (( compactOutput )); then
    jqArgs+=('--compact-output')
fi

if (( compactOutput )); then
    jqArgs+=('--args')
else
    jqArgs+=('--jsonargs')
fi

exec jq "${jqArgs[@]}" '$ARGS.positional' "${args[@]}"
