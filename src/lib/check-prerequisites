#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Note: No library init here. The library init uses this script, so we'd be
# setting ourselves up for infinite recursion.

#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

while (( $# > 0 )); do
    case "$1" in
        -h|--help)
            showHelp=1
            break
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Performs standard preflight checks needed before running stuff in'
    echo '  this library.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

error=0

if ! which aws >/dev/null 2>&1; then
    echo 1>&2 'Missing `aws` binary.'
    error=1
fi

if ! which jq >/dev/null 2>&1; then
    echo 1>&2 'Missing `jq` binary.'
    error=1
fi

if [[ ${AWS_ACCESS_KEY_ID} == '' ]]; then
    echo 1>&2 'Missing `AWS_ACCESS_KEY_ID` environment variable.'
    error=1
fi

if [[ ${AWS_SECRET_ACCESS_KEY} == '' ]]; then
    echo 1>&2 'Missing `AWS_SECRET_ACCESS_KEY` environment variable.'
    error=1
fi

# TODO: Should probably do more stuff!

exit "${error}"
