#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Set up for library-internal usage.
. "${progDir}/init" --lib


#
# Helper functions
#

# Validates and prints out the bytes of an IPv4 address, suitable for subsequent
# inclusion in a final result.
function v4-bytes {
    local address="$1"
    local errorMsg="Unparseable IPv4 address: ${address}"
    local count=0
    local result=''

    address=".${address}" # Avoids a special case for the first iteration.

    local num
    while [[ ${address} != '' ]]; do
        # `0*` below strips leading zeros, so that the number doesn't get
        # interpreted as octal.
        if ! [[ ${address} =~ ^\.0*([0-9]+)(.*)$ ]]; then
            echo 1>&2 "${errorMsg}"
            return 1
        fi

        num="${BASH_REMATCH[1]}"
        address="${BASH_REMATCH[2]}"

        if (( ${num} > 255 )); then
            echo 1>&2 "${errorMsg}"
            return 1
        fi

        result="${result}, ${num}"
        (( count++ ))
    done

    if (( ${count} > 4 )); then
        echo 1>&2 "${errorMsg}"
        return 1
    fi

    while (( ${count} < 4 )); do
        result="${result}, 0"
        (( count++ ))
    done

    # Drop the extra comma and space from the result, and put it in brackets.
    [[ ${result} =~ ^[,\ ]+(.*)$ ]]
    echo "[${BASH_REMATCH[1]}]"
}

# Validates and prints out the bytes of an IPv6 address, suitable for subsequent
# inclusion in a final result.
function v6-bytes {
    local address="$1"
    local errorMsg="Unparseable IPv6 address: ${address}"
    local gotGap=0
    local nums=()

    if ! [[ ${address} =~ ^([:0-9a-f]*)(::([:0-9a-f]*))?$ ]]; then
        echo 1>&2 "${errorMsg}"
        return 1
    fi

    while [[ ${address} != '' ]]; do
        if [[ ${address} =~ ^::(.*)$ ]]; then
            if (( ${gotGap} )); then
                # Double gap.
                echo 1>&2 "${errorMsg}"
                return 1
            fi
            gotGap=1
            nums+=(gap)
            address="${BASH_REMATCH[1]}"
        elif [[ ${address} =~ ^([0-9a-f]{1,4})((:.*)|$) ]]; then
            nums+=("0x${BASH_REMATCH[1]}")
            address="${BASH_REMATCH[2]}"
            if [[ ${address} =~ ^:([^:].*)$ ]]; then
                # Strip `:` separator but not `::` gap.
                address="${BASH_REMATCH[1]}"
            fi
        else
            echo 1>&2 "${errorMsg}"
            return 1
        fi
    done

    local zeroCount=0
    if (( ${gotGap} )); then
        if (( ${#nums[@]} > 8 )); then
            echo 1>&2 "${errorMsg}"
            return 1
        fi
        zeroCount=$(( 9 - ${#nums[@]} ))
    else
        if (( ${#nums[@]} != 8 )); then
            echo 1>&2 "${errorMsg}"
            return 1
        fi
    fi

    local result=''
    local n

    for n in "${nums[@]}"; do
        if [[ ${n} == 'gap' ]]; then
            while (( ${zeroCount} > 0 )); do
                result="${result}, 0"
                (( zeroCount-- ))
            done
        else
            # The math expression converts from hex to decimal.
            result="${result}, $(( ${n} ))"
        fi
    done

    # Drop the extra comma and space from the result, and put it in brackets.
    [[ ${result} =~ ^[,\ ]+(.*)$ ]]
    echo "[${BASH_REMATCH[1]}]"
}


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# CIDR value.
value=''

while (( $# > 0 )); do
    case "$1" in
        -h|--help)
            showHelp=1
            break
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if [[ $# > 0 ]]; then
    value="$1"
fi

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} <cidr>"
    echo ''
    echo 'Converts a CIDR value (either for IPv4 or IPv6) into a JSON object'
    echo 'which can then be used for further and more convenient calculation.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

if ! [[ ${value} =~ ^([.:0-9a-f]+)/([0-9]+)$ ]]; then
    echo 1>&2 "Unparseable CIDR: ${value}"
    exit 1
fi

address="${BASH_REMATCH[1]}"
bits="${BASH_REMATCH[2]}"
type=

if [[ ${address} =~ : ]]; then
    # It's apparently IPv6.
    type=v6
    addressBytes="$(v6-bytes "${address}")" \
    || exit "$?"
elif [[ ${address} =~ \. ]]; then
    # It's apparently IPv4.
    type=v4
    addressBytes="$(v4-bytes "${address}")" \
    || exit "$?"
else
    echo 1>&2 "Unparseable CIDR: ${value}"
    exit 1
fi

jval \
    address:json="${addressBytes}" \
    bits:json="${bits}" \
    type="${type}" \
    '{
        address: $address,
        prefixBits: $bits,
        type: $type
    }'
