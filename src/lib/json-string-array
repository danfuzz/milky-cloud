#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Set up for library-internal usage.
. "${progDir}/init" --lib


#
# Argument parsing
#

# Compact output?
compactOutput=0

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Parse options.
while (( $# > 0 )); do
    case "$1" in
        -h|--help)
            showHelp=1
            break
            ;;
        --compact)
            compactOutput=1
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

# Collect remaining arguments.
args=("$@")

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...] [--] [<value> ...]"
    echo '  Constructs and prints a JSON array of strings, of all of the value'
    echo '  arguments passed to this script.'
    echo ''
    echo '  --compact'
    echo '    Output in compact form (not multiline JSON).'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

# Construct the basic result.

result="$(
    echo '['

    first=1
    for arg in "${args[@]}"; do
        if (( ${first} )); then
            first=0
        else
            echo ','
        fi
        jq --null-input --raw-output --arg arg "${arg}" '$arg | @json'
    done

    echo ']'
)"

# Pass the result through `jq` for final formatting.

if (( ${compactOutput} )); then
    jqArgs+=('--compact-output')
fi

exec jq "${jqArgs}" <<<"${result}"
