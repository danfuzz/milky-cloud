#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Set up for library-internal usage.
. "${progDir}/init" --lib


#
# Helper functions
#

# Prints out a V4 address from a CIDR in the usual form.
function v4-address {
    local cidr="$1"
    local netmaskBits="$2"

    local address="$(jval --raw \
        cidr:json="${cidr}" \
        '$cidr.address as $address
        |
        [
            (($address[0] / 256) | floor | tostring),
            (($address[0] % 256) | tostring),
            (($address[1] / 256) | floor | tostring),
            (($address[1] % 256) | tostring)
        ]
        | join(".")
        '
    )"

    # Drop octets at the end of the result that aren't covered by the netmask
    # (so, e.g. `10.0.0.0/16` gets rendered as `10.0/16`).
    local dropOctets=$(( (32 - ${netmaskBits}) / 8 ))
    while (( ${dropOctets} > 0 )) && [[ "${address}" =~ ^(.*)\.0$ ]]; do
        address="${BASH_REMATCH[1]}"
        (( dropOctets-- ))
    done

    echo "${address}"
}

# Prints out a V6 address from a CIDR in the usual form.
function v6-address {
    local cidr="$1"

    local address="$(jval --raw \
        cidr:json="${cidr}" \
        '$cidr.address | map(tostring) | join(" ")'
    )"

    # Go from space-separated string to array of elements.
    address=(${address})

    # Find a run of zeros, if any.
    local zerosAt=-1
    local zeroCount=1 # 1 here to avoid detecting runs of length 1.
    local n z
    for (( n=0; n < 8; n++ )); do
        for (( z=${n}; z < 8; z++ )); do
            if (( ${address[${z}]} != 0)); then
                break
            fi
        done

        local thisCount=$(( ${z} - ${n} ))
        if (( ${thisCount} > ${zeroCount} )); then
            zeroCount="${thisCount}"
            zerosAt="${n}"
        fi

        n="${z}" # No need to "relitigate" anything that's been scanned.
    done

    local result=''
    local n
    for (( n=0; n < 8; n++ )); do
        if (( ${n} == ${zerosAt} )); then
            result+='::'
            n=$(( ${n} + ${zeroCount} - 1 ))
        else
            if ! ( [[ ${result} =~ :$ ]] || (( ${n} == 0 )) ); then
                result+=':'
            fi

            result+="$(printf '%x' "${address[${n}]}")"
        fi
    done

    echo "${result}"
}


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# CIDR-as-JSON value.
value=''

while (( $# > 0 )); do
    case "$1" in
        -h|--help)
            showHelp=1
            break
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if [[ $# > 0 ]]; then
    value="$1"
else
    echo 1>&2 'Missing CIDR-JSON argument.'
    argError=1
fi

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} <cidr-json>"
    echo ''
    echo 'Converts a CIDR JSON value (as output from `json-from-cidr`) back into'
    echo 'a standard-form CIDR string.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

type="$(jval --raw cidr:json="${value}" '$cidr.type')" \
|| exit "$?"

netmaskBits="$(jval cidr:json="${value}" '$cidr.netmaskBits')" \
|| exit "$?"

case "${type}" in
    v4)
        address="$(v4-address "${value}" "${netmaskBits}")"
        ;;
    v6)
        address="$(v6-address "${value}")"
        ;;
    *)
        echo 1>&2 'Unrecognized address type.'
        exit 1
        ;;
esac

echo "${address}/${netmaskBits}"
