#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Set up for library-internal usage.
. "${progDir}/init" --lib


#
# Argument parsing
#

# Compact output?
compactOutput=0

# List of filter specifications, as parallel arrays of name and value.
filterNames=()
filterValues=()

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Parse options.
while (( $# > 0 )); do
    case "$1" in
        --compact)
            compactOutput=1
            ;;
        -h|--help)
            showHelp=1
            break
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

# Parse filter specifications.
while (( $# > 0 && !${argError} )); do
    arg="$1"
    if [[ ${arg} == '--' ]]; then
        shift
        break
    fi

    [[ ${arg} =~ ^([-_:a-zA-Z0-9]+)=(.*)$ ]] \
    || break

    filterNames+=("${BASH_REMATCH[1]}")
    filterValues+=("${BASH_REMATCH[2]}")

    shift
done

if (( $# != 0 )); then
    echo 1>&2 'Could not parse filter specification:' "$1"
    argError=1
fi

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...] [--] [<filter-spec> ...]"
    echo '  Constructs and prints a JSON object suitable for use as a'
    echo '  `Filters` specification argument to an AWS command. The result is'
    echo '  an object that binds `Filters`, so it can be used as-is (if that is'
    echo '  the only argument) or merged with other arguments.'
    echo ''
    echo '  <filter-spec>'
    echo '    <name>=<value> Use `value` as a filter for `name`. If the same'
    echo '    name is used multiple times, then (per the usual AWS rules) the'
    echo '    result is a logical OR of the values.'
    echo ''
    echo '  --compact'
    echo '    Output in compact form (not multiline JSON).'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

jqArgs=(-n)

if (( ${compactOutput} )); then
    jqArgs+=('--compact-output')
fi

jqArgs+=(
    --argjson names "$(lib json-array --strings "${filterNames[@]}")"
    --argjson values "$(lib json-array --strings "${filterValues[@]}")"
)

exec jq "${jqArgs[@]}" \
'
    [$names, $values]
    |
    transpose
    |
    reduce .[] as $binding ({};
          $binding[0] as $key
        | $binding[1] as $value
        | (.[$key] // []) as $orig
        | .[$key] = [$orig[], $value]
    )
    |
    to_entries
    |
    { Filters: map({ Name: .key, Values: .value}) }
'
