#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Set up for library-internal usage.
. "${progDir}/init" --lib


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# AWS command and subcommand. These are expected before any dashed options.
if ! ( (( $# >= 2 )) && [[ $1 =~ ^[a-z] ]] && [[ $2 =~ ^[a-z] ]] ); then
    echo 1>&2 'Missing AWS command and/or subcommand.'
    argError=1
else
    command="$1"
    subcommand="$2"
    shift 2
fi

# Location (region or availability zone).
inLocation=''

# File to print the constructed arguments to.
printArgumentsTo=''

# File to print the constructed command to.
printCommandTo=''

# Assignments and expression arguments to use to construct the value to pass to
# the AWS command.
argConstructor=()

# Assignments and expression arguments to use to perform the result
# postprocessing.
resultConstructor=()

while (( $# > 0 )); do
    case "$1" in
        -h|--help)
            showHelp=1
            break
            ;;
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --print-arguments-to=?*)
            printArgumentsTo="${1#*=}"
            ;;
        --print-command-to=?*)
            printCommandTo="${1#*=}"
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if (( !${argError} )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi
fi

# "Parse" constructor arguments.
while (( $# > 0 && !${argError} )); do
    arg="$1"
    if [[ ${arg} == '::' ]]; then
        shift
        break
    fi

    argConstructor+=("${arg}")
    shift
done

# Collect postprocessor arguments, if any.
resultConstructor=("$@")

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} <cmd> <subcommand> [<opt> ...] [--] [<assignment> ...]"
    echo '[<jq-expression> ...] [:: [<assignment> ...] <jq-expression> ...]'
    echo '  Makes an AWS call with a JSON value constructed with `json-val`, and'
    echo '  with successful result optionally post-processed through `json-val`.'
    echo '  If no argument expression is supplied, the value `{}` (an empty object)'
    echo '  is passed to the command. When post-processing, the original result is'
    echo '  available as an value on stdin.'
    echo ''
    echo '  <cmd> <subcommand>'
    echo '    The AWS command and subcommand to call, e.g. `ec2 run-instances`.'
    echo ''
    echo '  --in=<region-or-zone>'
    echo '    What region to make the call in. Must be specified. If specified as'
    echo '    an availability zone, only the region portion matters.'
    echo '  --print-arguments-to=<file>'
    echo '    Name of a file to print the constructed arguments to.'
    echo '  --print-command-to=<file>'
    echo '    Name of a file to print the fully-constructed command to.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

inRegion="$(lib region-from-location "${inLocation}")" \
|| exit "$?"

jsonArg='{}'
if (( ${#argConstructor[@]} > 0 )); then
    jsonArg="$(jval -- "${argConstructor[@]}")" \
    || {
        echo 1>&2 'Trouble parsing argument constructor.'
        exit 1
    }
fi

fullCommand=(
    aws "${command}" "${subcommand}"
    --region="${inRegion}"
    --output=json
    --cli-input-json="${jsonArg}"
)

if [[ ${printArgumentsTo} != '' ]]; then
    # Use `jval` to get color output when appropriate.
    jval -- "${jsonArg}" > "${printArgumentsTo}"
fi

if [[ ${printCommandTo} != '' ]]; then
    echo "${fullCommand[@]}" >"${printCommandTo}"
fi

result="$("${fullCommand[@]}")" \
|| {
    echo 1>&2 'Trouble running AWS command.'
    exit 1
}

# Even if there's no result filter, use `jval` to automatically get color output
# when appropriate.
if (( ${#resultConstructor[@]} == 0 )); then
    resultConstructor=('.')
fi

jval --read-stdin -- \
    "${resultConstructor[@]}" <<< "${result}" \
|| {
    echo 1>&2 'Trouble filtering result.'
    exit 1
}
