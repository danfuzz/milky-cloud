#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Set up for library-internal usage.
. "${progDir}/init" --lib


#
# Helper functions
#

# Command: Add a value to the network address.
function command_add-to-network {
    case "$#" in
        0|1)
            echo 1>&2 'Missing <cidr> and/or <amount> argument.'
            return 1
            ;;
        2)
            : # It's good.
            ;;
        *)
            echo 1>&2 'Too many arguments.'
            return 1
            ;;
    esac

    local cidr="$1"
    local amount="$2"

    cidr="$(json-from-any "${cidr}")" \
    || return "$?"

    if ! [[ "${amount}" =~ ^(0|([1-9][0-9]{0,5}))$ ]]; then
        echo 1>&2 'Invalid <amount> argument.'
        return 1
    fi

    local address=($(command_address-words "${cidr}"))
    local netmaskBits="$(jval cidr:json="${cidr}" '$cidr.netmaskBits')"

    # Add the amount at the bottom of the network, that is, at the word which
    # has the last bit of the network and shifted appropriately so that lower
    # bits aren't affected.
    local at="$(( (${netmaskBits} - 1) / 16 ))"
    local partialShift="$(( (16 - (${netmaskBits} % 16)) % 16 ))"
    address[${at}]="$(( ${address[${at}]} + (${amount} << ${partialShift}) ))"

    # Perform overflow to higher-order words as necessary.
    while (( (${at} > 0) && (${address[${at}]} > 0xffff) )); do
        local at1="$(( ${at} - 1 ))"
        local v="${address[${at}]}"
        address[${at}]="$(( ${v} & 0xffff ))"
        address[${at1}]="$(( ${address[${at1}]} + (${v} >> 16) ))"
        (( at-- ))
    done

    if (( ${address[0]} > 0xffff )); then
        echo 1>&2 "<amount> too large; address overflowed."
        return 1
    fi

    jval \
        cidr:json="${cidr}" \
        address:json="$(lib json-array "${address[@]}")" \
        '{
            type: $cidr.type,
            address: $address,
            netmaskBits: $cidr.netmaskBits
        }'
}

# Command: Gets the total number of bits in the address.
function command_address-length {
    case "$#" in
        0)
            echo 1>&2 'Missing <cidr> argument.'
            return 1
            ;;
        1)
            : # It's good.
            ;;
        *)
            echo 1>&2 'Too many arguments.'
            return 1
            ;;
    esac

    local cidr="$1"

    cidr="$(json-from-any "${cidr}")" \
    || return "$?"

    jval cidr:json="${cidr}" '($cidr.address | length) * 16'
}

# Command: Gets the words of the address.
function command_address-words {
    case "$#" in
        0)
            echo 1>&2 'Missing <cidr> argument.'
            return 1
            ;;
        1)
            : # It's good.
            ;;
        *)
            echo 1>&2 'Too many arguments.'
            return 1
            ;;
    esac

    local cidr="$1"

    cidr="$(json-from-any "${cidr}")" \
    || return "$?"

    jval --raw cidr:json="${cidr}" '$cidr.address | map(tostring) | join(" ")'
}

# Command: Print a CIDR.
function command_print {
    case "$#" in
        0)
            echo 1>&2 'Missing <cidr> argument.'
            return 1
            ;;
        1)
            : # It's good.
            ;;
        *)
            echo 1>&2 'Too many arguments.'
            return 1
            ;;
    esac

    local cidr="$1"

    json-from-any "${cidr}"
}

# Command: Widen the network by a number of bits.
function command_widen {
    case "$#" in
        0|1)
            echo 1>&2 'Missing <cidr> and/or <bits> argument.'
            return 1
            ;;
        2)
            : # It's good.
            ;;
        *)
            echo 1>&2 'Too many arguments.'
            return 1
            ;;
    esac

    local cidr="$1"
    local bits="$2"

    cidr="$(json-from-any "${cidr}")" \
    || return "$?"

    if ! [[ "${bits}" =~ ^(0|([1-9][0-9]{0,5}))$ ]]; then
        echo 1>&2 'Invalid <bits> argument.'
        return 1
    fi

    totalBits="$(command_address-length "${cidr}")"
    netmaskBits="$(jval cidr:json="${cidr}" '$cidr.netmaskBits')"
    (( netmaskBits += ${bits} ))

    if (( ${netmaskBits} > ${totalBits} )); then
        echo 1>&2 "Resulting netmask too long: ${netmaskBits}"
        return 1
    fi

    jval \
        cidr:json="${cidr}" \
        netmaskBits:json="${netmaskBits}" \
        '{
            type: $cidr.type,
            address: $cidr.address,
            netmaskBits: $netmaskBits
        }'
}

# Get or validate a JSON-CIDR from the given value. If a standard-form string,
# converts it. If JSON, validates it.
function json-from-any {
    local value="$1"

    if [[ ${value} =~ ^'{' ]]; then
        json-validate "${value}"
    elif [[ ${value} =~ ^[:./0-9a-f]+$ ]]; then
        lib json-from-cidr "${value}"
    else
        echo 1>&2 "Unparseable CIDR: ${value}"
        return 1
    fi
}

# Validates a JSON-CIDR value. On success, prints the value.
function json-validate {
    local value="$1"

    # This doesn't check every possible problem, but it should be sufficient to
    # catch _unintentional_ misuse.
    local result
    result="$(jval cidr:json="${value}" \
        '
            (($cidr | type) == "object")
        and (($cidr | keys) == ["address", "netmaskBits", "type"])
        and (($cidr.address | type) == "array")
        and (($cidr.netmaskBits | type) == "number")
        and (($cidr.netmaskBits >= 0) and ($cidr.netmaskBits <= 128))
        and (($cidr.type == "v4") or ($cidr.type == "v6"))
        |
        if . then $cidr else null end
        '
    )" \
    || return "$?"

    if [[ ${result} == 'null' ]]; then
        echo 1>&2 "Malformed JSON-CIDR: ${value}"
        return 1
    fi

    echo "${result}"
}


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Command.
command=

# Output style.
outputStyle=string

while (( $# > 0 )); do
    case "$1" in
        --compact-json)
            outputStyle=compact-json
            ;;
        --json)
            outputStyle=json
            ;;
        -h|--help)
            showHelp=1
            break
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if [[ $# > 0 ]]; then
    command="$1"
    shift
else
    echo 1>&2 'Missing command argument.'
    argError=1
fi

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...] <command> <arg> ..."
    echo ''
    echo 'Performs a calculation of some sort on a CIDR address/mask. Input CIDR'
    echo 'values can be either standard-form strings or parsed JSON values (such'
    echo 'as are produced by the `--json` option of this tool).'
    echo
    echo '--compact-json'
    echo '  Produces compact JSON output.'
    echo '--json'
    echo '  Produces JSON output (a parsed CIDR instead of a standard-form string).'
    echo ''
    echo 'Commands:'
    echo ''
    echo 'add-to-network <cidr> <amount>'
    echo '  Adds the given amount (a positive decimal integer) to the network'
    echo '  address. This can be used in conjunction with `widen` to enumerate'
    echo '  subnet addresses.'
    echo 'address-length <cidr>'
    echo '  Gets the length (total number of bits) in the address (not just the'
    echo '  netmask).'
    echo 'address-words'
    echo '  Prints the words (16-bit components) of the full address, in a'
    echo '  shell-friendly space-separated decimal form. Note: Even an IPv4'
    echo '  address gets chunked as 16-bit words by this command.'
    echo 'print <cidr>'
    echo '  Prints a CIDR value.'
    echo 'widen <cidr> <bits>'
    echo '  Widen the address in a CIDR by adding the indicated number of low-order'
    echo '  zero bits.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

commandFunc="command_${command}"
if ! declare -F "${commandFunc}" >/dev/null; then
    echo 1>&2 "No such command: ${command}"
    exit 1
fi

result="$("${commandFunc}" "$@")" \
|| exit "$?"

if [[ ${result} =~ ^'{' ]]; then
    # A JSON result is interpreted as a CIDR, in which case the output style
    # matters.
    case "${outputStyle}" in
        compact-json)
            jval --compact result:json="${result}" '$result'
            ;;
        json)
            jval result:json="${result}" '$result'
            ;;
        string)
            lib cidr-from-json "${result}"
            ;;
    esac
else
    # Not a CIDR. Just print the result.
    echo "${result}"
fi
