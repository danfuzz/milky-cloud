#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Load the helper library.
. "${progDir}/lib/init"


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Security group to use (name or id), if any.
groupNameOrId=''

# Location (availability zone).
inLocation='us-west-2a'

# Instance type.
instanceType='t3.nano'

# Name for the SSH keypair that allows for login access.
keyName=''

# Name for the resulting instance.
name=''

# Actual user data (first-boot script).
userData=''

# Name of file containing user data.
userDataFile=''

# Name or ID of VPC to use, if any.
vpcNameOrId=''

while (( $# > 0 )); do
    case "$1" in
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --instance-type=?*)
            instanceType="${1#*=}"
            ;;
        --key-name=?*)
            keyName="${1#*=}"
            ;;
        --name=?*)
            name="${1#*=}"
            ;;
        --security-group=?*)
            groupNameOrId="${1#*=}"
            ;;
        --user-data=?*)
            userData="${1#*=}"
            ;;
        --user-data-file=?*)
            userDataFile="${1#*=}"
            ;;
        --vpc=?*)
            vpcNameOrId="${1#*=}"
            ;;
        -h|--help)
            showHelp=1
            break
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if (( !argError )) && [[ (${userData} != '') && (${userDataFile} != '') ]]; then
    echo 1>&2 'Cannot specify both --user-data and --user-data-file.'
    argError=1
fi

if (( !argError )) && [[ (${groupNameOrId} != '') && (${vpc} != '') ]]; then
    echo 1>&2 'Cannot specify both --security-group and --vpc.'
    argError=1
fi

if (( argError )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Launches a standard-configured instance. On success, prints a JSON'
    echo '  object with the most-salient values (including notably the instance'
    echo '  ID). Note: If neither `--security-group` nor `--vpc` is specified,'
    echo '  then this command will launch the instance into the default security'
    echo '  group of the default VPC for the specified availability zone (which,'
    echo '  TBQH, is probably not what you want).'
    echo ''
    echo '  --in=<availability-zone>'
    echo '    Where to launch.'
    echo '  --instance-type=<type>'
    echo '    What type of instance to install.'
    echo '  --key-name=<name>'
    echo '    Name of the keypair to use for SSH access. If not specified, then'
    echo '    something else will have to have set up SSH access (e.g. the user'
    echo '    data script, or something baked into the AMI).'
    echo '  --name=<name>'
    echo '    Name (label) for the resulting instance.'
    echo '  --security-group=<name-or-id>'
    echo '    Name or ID of the security group to use for network access control.'
    echo '    If specified, this is used to derive the VPC to use, and in conjunction'
    echo '    with the specified availability zone, the specific subnet within the'
    echo '    VPC. It is not valid to specify both this option and --vpc.'
    echo '  --user-data=<data>'
    echo '    User data for the instance, which is taken to be a script to run on'
    echo '    first-boot of the instance. It is invalid to specify both this and'
    echo '    the --user-data-file option. Note: On the instance, the user data can'
    echo '    be found at `/var/lib/cloud/instance/user-data.txt`, and the log of'
    echo '    running it can be found at `/var/log/cloud-init-output.log`.'
    echo '  --user-data-file=<file>'
    echo '    Name of a file containing user data for the instance. It is invalid'
    echo '    to specify both this and the --user-data option.'
    echo '  --vpc=<name-or-id>'
    echo '    Name or ID of the VPC to launch into. If specified, then the instance'
    echo '    will be in the default security group of the indicated VPC. It is not'
    echo '    valid to specify both this option and --security-group.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Display this message.'
    exit $(( argError < 0 ? 0 : argError ))
fi


#
# Main script
#

# Slurp the user data, if there is user data to be slurped.
if [[ ${userDataFile} != '' ]]; then
    userData="$(cat "${userDataFile}")" \
    || exit 1
fi

# Figure out the region.

inRegion="$(lib region-from-zone "${inLocation}")" \
|| exit "$?"

echo 1>&2 "type: ${instanceType}"
echo 1>&2 "in:   ${inRegion} / ${inLocation}"

# Figure out the correct AMI.

amiInfo="$(
${progDir}/find-ami \
    --in="${inLocation}" --instance-type="${instanceType}"
)"

if (( $? != 0 )); then
    exit "$?"
fi

jget 1>&2 --raw "${amiInfo}" '
    "Using AMI:",
    "  desc: " + .Description,
    "  name: " + .Name,
    "  id:   " + .ImageId
'

# Resolve the VPC, security group, and subnet IDs, if necessary.

vpcId=''
groupId=''
subnetId=''
if [[ ${groupNameOrId} != '' ]]; then
    # Resolve the security group ID, and then use it to find the VPC ID.
    groupId="$(lib find-security-group --in="${inLocation}" "${groupNameOrId}")" \
    || exit 1
    vpcId="$(lib find-vpc --in="${inLocation}" "${groupId}")" \
    || exit 1
elif [[ ${vpcNameOrId} != '' ]]; then
    # Resolve the VPC ID, and then use it to find the security group ID.
    vpcId="$(lib find-vpc --in="${inLocation}" "${vpcNameOrId}")" \
    || exit 1
    groupId="$(lib find-security-group --in="${inLocation}" "${vpcId}")" \
    || exit 1
fi

if [[ ${vpcId} != '' ]]; then
    subnetId="$(lib find-vpc-subnet --in="${inLocation}" --vpc="${vpcId}")" \
    || exit 1
fi

# Make up a name if one wasn't provided.
if [[ ${name} == '' ]]; then
    name="$(lib now-stamp via-script)"
fi

# Form the main command, and do it!

echo 1>&2 'Launching...'

# Note: If a subnet ID is known, then it implies the availability zone, in which
# case one doesn't also need to specify the availability zone explicitly.
# However, it's easier just to include it because this script is also meant to
# work when a subnet isn't known (which means we're just launching into the
# default security group of the default VPC for the region).
#
# Note: Public IP and DNS are de facto (or at least usually) not set in the
# output from `ec2 run-instances`, that is, they aren't known at the moment of
# launch.
result="$(ec2-json run-instances \
    --in="${inRegion}" \
    amiInfo:json="${amiInfo}" \
    inLocation="${inLocation}" \
    instanceType="${instanceType}" \
    keyName="${keyName}" \
    groupId="${groupId}" \
    subnetId="${subnetId}" \
    tagSpec:json="$(lib name-tag-spec instance "${name}")" \
    userData="${userData}" \
    '
        {
            ImageId:      $amiInfo.ImageId,
            InstanceType: $instanceType,
            MaxCount:     1,
            Placement:    { AvailabilityZone: $inLocation }
        }
        + $tagSpec
        + if $keyName == "" then {} else { KeyName: $keyName } end
        + if $groupId == "" then {} else { SecurityGroupIds: [$groupId] } end
        + if $subnetId == "" then {} else { SubnetId: $subnetId } end
        + if $userData == "" then {} else { UserData: $userData } end
    ' \
    :: \
    '
        .Instances[0]
        |
        {
            InstanceId: .InstanceId,
            PrivateDnsName: .PrivateDnsName,
            PrivateIpAddress: .PrivateIpAddress
        }
    '
)" \
|| exit "$?"

echo 1>&2 'Launched!'

jget "${result}" '.'
