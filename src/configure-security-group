#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Load the helper library.
. "${progDir}/lib/init"


#
# Helper functions
#

# Figures out a name for the security group: If the VPC has a name, use that as
# a basis. Or, if the VPC doesn't have a name, then just use the VPC ID as the
# basis.
function figure-out-name {
    local filterSpec=

    local name
    name=$(ec2-json describe-vpcs \
        --in="${inRegion}" \
        "$(lib filter-spec vpc-id="${vpcId}")" \
        :: --raw \
        '.Vpcs[0].Tags[] | select(.Key == "Name") | .Value'
    ) \
    || return "$?"

    if [[ ${name} == '' ]]; then
        name="for-${vpcId}"
    fi

    echo "$(lib now-stamp)-${name}"
}

# Prints a progress message, if such messages have been requested.
function progress-msg {
    if (( progress )); then
        echo 1>&2 "$@"
    fi
}


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Name or ID of the security group.
groupNameOrId=''

# Location (region or availability zone).
inLocation=''

# Name tag to add.
nameTag=''

# Progress messages?
progress=0

while (( $# > 0 )); do
    case "$1" in
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --name-tag=?*)
            nameTag="${1#*=}"
            ;;
        --progress)
            progress=1
            ;;
        --security-group=?*)
            groupNameOrId="${1#*=}"
            ;;
        -h|--help)
            argError=-1 # `-1` suppresses error exit after displaying usage.
            break
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if (( !argError )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi
    if [[ ${groupNameOrId} == '' ]]; then
        echo 1>&2 'Missing option: --security-group'
        argError=1
    fi
fi

if (( argError )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Configures a security group in a standard way. This involves removing'
    echo '  all pre-existing rules from the group and then adding exactly what is'
    echo '  needed.'
    echo ''
    echo '  On success, the security group allows incoming TCP traffic to the SSH'
    echo '  and HTTPS ports, and allows outgoing traffic to anywhere. It also allows'
    echo '  incoming traffic on all ports, from sources that are within the same'
    echo '  security group.'
    echo ''
    echo '  --in=<region-or-zone>'
    echo '    What region to make the security group in. Must be specified. If'
    echo '    specified as an availability zone, only the region portion matters.'
    echo '  --security-group=<name-or-id>'
    echo '    Name or ID of the security group to modify. Can also be a VPC ID,'
    echo '    to indicate the default security group for that VPC.'
    echo '  --progress'
    echo '    Print progress messages to stderr.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit $(( argError < 0 ? 0 : argError ))
fi


#
# Main script
#

inRegion="$(lib region-from-location "${inLocation}")" \
|| exit "$?"

# Validate or find the ID of the security group.
groupInfo="$(
    lib find-security-group --print-all --in="${inRegion}" "${groupNameOrId}"
)" \
|| exit "$?"

groupId="$(jget --raw "${groupInfo}" '.GroupId')"
name="$(jget --raw "${groupInfo}" '.GroupName')"

progress-msg "Configuring security group ${groupId}..."

# Note: Past this point, if there are errors, we attempt to clean up the
# partial mess by deleting the security group.

error=0

# Start with a blank slate of rules by deleting any that are already associated
# with the new security group.
#
# Context: Newly-created security groups (including the default security group
# of a VPC) come with one or more rules, but relying on those details is
# arguably not a wise idea.
if (( !error )); then
    lib delete-security-group-rules --quiet --in="${inRegion}" \
        --security-group="${groupId}" --all \
    && progress-msg 'Removed old rules (if any).' \
    || error="$?"
fi

# Common args for all calls to `add-ip-security-group-rules`.
commonArgs=(--quiet --in="${inRegion}" --security-group="${groupId}"
    --name="${name}")

# Add egress rules.

if (( !error )); then
    lib add-ip-security-group-rules "${commonArgs[@]}" \
        --egress --all-protocols --all-ports \
    && progress-msg "Added all-access egress rules." \
    || error="$?"
fi

# Add ingress rules.

if (( !error )); then
    tagSpec='{}'
    if [[ ${name} != '' ]]; then
        tagSpec="$(lib name-tag-spec 'security-group-rule' "${name}")"
    fi

    ec2-json authorize-security-group-ingress \
        --in="${inRegion}" \
        groupId="${groupId}" \
        tagSpec:json="${tagSpec}" \
        '
        $tagSpec +
        {
            GroupId: $groupId,
            IpPermissions: [{
                IpProtocol: "-1",
                UserIdGroupPairs: [{
                    GroupId: $groupId
                }]
            }]
        }' \
        :: --none \
    && progress-msg "Added within-group rule." \
    || error="$?"
fi

if (( !error )); then
    lib add-ip-security-group-rules "${commonArgs[@]}" \
        --ingress --tcp --port=22 \
    && progress-msg "Added SSH ingress rules." \
    || error="$?"
fi

if (( !error )); then
    lib add-ip-security-group-rules "${commonArgs[@]}" \
        --ingress --tcp --port=443 \
    && progress-msg "Added HTTPS ingress rules." \
    || error="$?"
fi

if (( !error )) && [[ ${nameTag} != '' ]]; then
    ec2-json create-tags --in="${inRegion}" \
        groupId="${groupId}" \
        value="${nameTag}" \
        '{
            Resources: [$groupId],
            Tags: [{
                Key: "Name",
                Value: $value
            }]
        }' \
    && progress-msg "Added name tag." \
    || error="$?"
fi

if (( error )); then
    progress-msg 'Error(s) during rule configuration. Alas!'
    exit "${error}"
fi

progress-msg 'Done configuring security group.'
