#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Load the helper library.
. "${progDir}/lib/init"


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Location (availability zone).
inLocation='us-west-2a'

# Instance type.
instanceType='t3.nano'

# Name for the SSH keypair that allows for login access.
keyName=''

# Name for the resulting instance.
name=''

# Security group to use (name or id), if any.
securityGroup=''

while (( $# > 0 )); do
    case "$1" in
        -h|--help)
            showHelp=1
            break
            ;;
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --instance-type=?*)
            instanceType="${1#*=}"
            ;;
        --key-name=?*)
            keyName="${1#*=}"
            ;;
        --name=?*)
            name="${1#*=}"
            ;;
        --security-group=?*)
            securityGroup="${1#*=}"
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Launches a standard-configured instance.'
    echo ''
    echo '  --in=<availability-zone>'
    echo '    Where to launch.'
    echo '  --instance-type=<type>'
    echo '    What type of instance to install.'
    echo '  --key-name=<name>'
    echo '    Name of the keypair to use for SSH access.'
    echo '  --name=<name>'
    echo '    Name (label) for the resulting instance.'
    echo '  --security-group=<name-or-id>'
    echo '    Name or ID of the security group to use for network access control.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Display this message.'
    exit "${argError}"
fi


#
# Main script
#

inRegion="$(lib region-from-zone "${inLocation}")" \
|| exit "$?"

echo "type:      ${instanceType}"
echo "in:        ${inRegion} / ${inLocation}"

# Figure out the correct AMI.

amiInfo="$(
${progDir}/find-ami \
    --in="${inLocation}" --instance-type="${instanceType}"
)"

if (( $? != 0 )); then
    exit "$?"
fi

jval --raw "${amiInfo}" \
    '| (
        "Using AMI:",
        "  desc: " + .Description,
        "  name: " + .Name,
        "  id:   " + .ImageId
    )'

# Resolve the security group and subnet IDs, if necessary.

subnetId=''
if [[ ${securityGroup} != '' ]]; then
    securityGroup="$(lib find-security-group --in="${inLocation}" "${securityGroup}")" \
    || exit 1
    vpcId="$(lib find-vpc --in="${inLocation}" "${securityGroup}")" \
    || exit 1
    echo "VPC:       ${vpcId}"
    subnetId="$(lib find-vpc-subnet --in="${inLocation}" --vpc="${vpcId}")" \
    || exit 1
    echo "subnet:    ${subnetId}"
fi

# Form the main command, and do it!

imageId="$(jval --raw "${amiInfo}.ImageId")"

# Note: If a subnet ID is provided, then it implies the availability zone, in
# which case one doesn't also need to specify the availability zone explicitly.
# However, it's easier just to include it because this script is also meant to
# work when a security group and subnet aren't specified.
awsArgs="$(
jq -n \
    --arg imageId "${imageId}" \
    --arg inLocation "${inLocation}" \
    --arg instanceType "${instanceType}" \
    --arg keyName "${keyName}" \
    --arg name "${name}" \
    --arg securityGroup "${securityGroup}" \
    --arg subnetId "${subnetId}" \
'
    {
        ImageId:      $imageId,
        InstanceType: $instanceType,
        MaxCount:     1,
        Placement:    { AvailabilityZone: $inLocation }
    }
    + if $keyName == "" then {} else { KeyName: $keyName } end
    + if $name == "" then {}
      else {
          TagSpecifications: [
              {
                  ResourceType: "instance",
                  Tags: [
                      {
                          Key: "Name",
                          Value: $name
                      }
                  ]
              }
          ]
      }
      end
    + if $securityGroup == "" then {} else { SecurityGroupIds: [$securityGroup] } end
    + if $subnetId == "" then {} else { SubnetId: $subnetId } end
')"

echo ''
echo 'Launch arguments:'
echo "${awsArgs}"

awsResult="$(
aws ec2 run-instances \
    --region="${inRegion}" \
    --cli-input-json "${awsArgs}"
)"

if (( $? != 0 )); then
    exit "$?"
fi

# Note: Public IP and DNS are de facto (usually?) not set in the output from
# `ec2 run-instances`.
jq -n --raw-output \
    --argjson info "${awsResult}" \
'
    $info | .Instances[0] |
    {
        InstanceId: .InstanceId,
        PrivateDnsName: .PrivateDnsName,
        PrivateIpAddress: .PrivateIpAddress
    }
'
