#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Load the helper library.
. "${progDir}/lib/init"


#
# Argument parsing
#

# Output style.
outputStyle=strings

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Location (availability zone).
inLocation=''

while (( $# > 0 )); do
    case "$1" in
        --compact-json)
            outputStyle=compact-json
            ;;
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --json)
            outputStyle=json
            ;;
        -h|--help)
            showHelp=1
            break
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if (( !argError )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi
fi

if (( argError )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Lists all accessible availability zones in a given region. The result'
    echo '  is one zone name per line (by default), or a JSON array (given an'
    echo '  appropriate option).'
    echo ''
    echo '  --compact-json'
    echo '    Produce compact JSON output.'
    echo '  --in=<region-or-zone>'
    echo '    What region to look in. Must be specified. If specified as an'
    echo '    availability zone, only the region portion matters.'
    echo '  --json'
    echo '    Produce JSON output.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit $(( argError < 0 ? 0 : argError ))
fi


#
# Main script
#

inRegion="$(lib region-from-location "${inLocation}")" \
|| exit "$?"

cmd=(ec2-json describe-availability-zones --in="${inRegion}" ::)
suffix=()

case "${outputStyle}" in
    compact-json)
        cmd+=(--compact)
        ;;
    strings)
        cmd+=(--raw)
        suffix=('| .[]')
        ;;
esac

"${cmd[@]}" '.AvailabilityZones | map(.ZoneName) | sort' "${suffix[@]}"
