#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Load the helper library.
. "${progDir}/lib/milky-cloud-library"


#
# Parameters for occasional update.
#

# Pattern for the AMI name to select. This includes, for example, the version
# of the kernel we want to find.
amiNamePattern='amzn2-ami-kernel-5.10-hvm-*-gp2'


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Instance type.
instanceType=''

# Location (availability zone).
inLocation=''

while (( $# > 0 )); do
    case "$1" in
        -h|--help)
            showHelp=1
            break
            ;;
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --instance-type=?*)
            instanceType="${1#*=}"
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if (( !${argError} )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi

    if [[ ${instanceType} == '' ]]; then
        echo 1>&2 'Missing option: --instance-type'
        argError=1
    fi
fi

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Finds an AMI to use when launching an instance. On success, prints'
    echo '  a JSON object of the salient info.'
    echo ''
    echo '  --in=<availability-zone>'
    echo '    Where the AMI is to be launched. Must be specified.'
    echo '  --instance-type=<type>'
    echo '    What type of instance is to be launched. Must be specified.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

"${progDir}/aws-preflight" \
|| exit "$?"

awsRegion="$("${progDir}/region-from-zone" "${inLocation}")" \
|| exit "$?"

# Check to see if the indicated instance type is available in the availability
# zone.

foundInstanceType="$(
"${progDir}/aws-json" ec2 describe-instance-type-offerings \
    --in="${awsRegion}" \
    inLocation="${inLocation}" \
    instanceType="${instanceType}" \
    '{
        LocationType: "availability-zone",
        Filters: [
            {
                Name: "location",
                Values: [$inLocation]
            },
            {
                Name: "instance-type",
                Values: [$instanceType]
            }
        ]
    }' \
    :: '$result.InstanceTypeOfferings | length'
)" \
|| exit "$?"

if (( !${foundInstanceType} )); then
    echo 1>&2 "No such instance type: ${instanceType} in ${inLocation}"
    exit 1
fi

# `aws ec2 describe-instance-types` to extract the supported architecture,
# ignoring `i386` which we don't care about (`x86_64` is the modern choice).

architecture="$(
"${progDir}/aws-json" ec2 describe-instance-types \
    --in="${awsRegion}" \
    instanceType="${instanceType}" \
    '{ InstanceTypes: [$instanceType] }' \
    :: '
        $result.InstanceTypes[0].ProcessorInfo.SupportedArchitectures
        | map(select(. != "i386"))
        | .[0] // "error"
    '
)" \
|| exit "$?"

# Note: Quoted `"error"` because the value is JSON (not a raw string).
if [[ ${architecture} == '"error"' ]]; then
    echo 1>&2 "Unsupported instance type: ${instanceType} in ${inLocation}"
    exit 1
fi

# `aws ec2 describe-images` to find the most recent salient AMI.

thisYear="$(date "+%Y")"

"${progDir}/aws-json" ec2 describe-images \
    --in="${awsRegion}" \
    amiNamePattern="${amiNamePattern}" \
    architecture:json="${architecture}" \
    thisYear:json="${thisYear}" \
    '{
        ExecutableUsers: ["all"],
        Owners: ["amazon"],
        Filters: [
            {
                Name: "architecture",
                Values: [$architecture]
            },
            {
                Name: "image-type",
                Values: ["machine"]
            },
            {
                Name: "root-device-type",
                Values: ["ebs"]
            },
            {
                Name: "name",
                Values: [$amiNamePattern]
            },
            {
                Name: "creation-date",
                Values: [
                    ($thisYear | tostring) + "*",
                    ($thisYear - 1 | tostring) + "*"
                ]
            }
        ]
    }' \
    :: '
    $result.Images | max_by(.CreationDate)
    |
    {
        Description: .Description,
        ImageId:     .ImageId,
        Name:        .Name
    }'
