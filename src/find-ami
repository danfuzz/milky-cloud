#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

#
# Parameters for occasional update.
#

# Pattern for the AMI name to select. This includes, for example, the version
# of the kernel we want to find.
amiNamePattern='amzn2-ami-kernel-5.10-hvm-*-gp2'


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Instance type.
instanceType=''

# Location (availability zone).
inLocation=''

while true; do
    case "$1" in
        -h|--help)
            showHelp=1
            break
            ;;
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --instance-type=?*)
            instanceType="${1#*=}"
            ;;
        --) # End of all options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)  # Default case: No more options, break out of the loop.
            break
    esac

    shift
done

if (( !${argError} )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi

    if [[ ${instanceType} == '' ]]; then
        echo 1>&2 'Missing option: --instance-type'
        argError=1
    fi
fi

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Finds an AMI to use when launching an instance. On success, prints'
    echo '  a JSON object of the salient info.'
    echo ''
    echo '  --in=<availability-zone>'
    echo '    Where the AMI is to be launched. Must be specified.'
    echo '  --instance-type=<type>'
    echo '    What type of instance is to be launched. Must be specified.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

"${progDir}/aws-preflight" \
|| exit "$?"

AWS_REGION="$(${progDir}/region-from-zone "${inLocation}")" \
|| exit "$?"
export AWS_REGION

# aws ec2 describe-instance-type-offerings ...

awsArgs="$(
jq -n \
    --arg inLocation "${inLocation}" \
    --arg instanceType "${instanceType}" \
'
    {
        LocationType: "availability-zone",
        Filters: [
            {
                Name: "location",
                Values: [$inLocation]
            },
            {
                Name: "instance-type",
                Values: [$instanceType]
            }
        ]
    }
')"

awsResult="$(
aws ec2 describe-instance-type-offerings \
    --cli-input-json="${awsArgs}" \
    --query='length(InstanceTypeOfferings[])' \
|| echo '0'
)"

if (( ${awsResult} == 0 )); then
    echo 1>&2 "No such instance type: ${instanceType} in ${inLocation}"
    exit 1
fi

# aws ec2 describe-instance-types ...

awsArgs="$(
jq -n \
    --arg instanceType "${instanceType}" \
'
    {
        InstanceTypes: [$instanceType]
    }
')"

awsResult="$(
aws ec2 describe-instance-types \
    --cli-input-json="${awsArgs}" \
    --query='InstanceTypes[0].ProcessorInfo.SupportedArchitectures' \
|| echo '[]'
)"

# Get a single `x86_64` or `arm64` from the supported architectures, or `error`
# if neither seems to be supported.
architecture="$(
jq -n --raw-output \
    --argjson archList "${awsResult}" \
'
    $archList | map(select(. == "x86_64" or . == "arm64")) | .[0] // "error"
')"

# aws ec2 describe-images ...

thisYear="$(date "+%Y")"

awsArgs="$(
jq -n \
    --arg amiNamePattern "${amiNamePattern}" \
    --arg architecture "${architecture}" \
    --argjson thisYear "${thisYear}" \
'
    {
        ExecutableUsers: ["all"],
        Owners: ["amazon"],
        Filters: [
            {
                Name: "architecture",
                Values: [$architecture]
            },
            {
                Name: "image-type",
                Values: ["machine"]
            },
            {
                Name: "root-device-type",
                Values: ["ebs"]
            },
            {
                Name: "name",
                Values: [$amiNamePattern]
            },
            {
                Name: "creation-date",
                Values: [
                    ($thisYear | tostring) + "*",
                    ($thisYear - 1 | tostring) + "*"
                ]
            }
        ]
    }
')"

awsResult="$(
aws ec2 describe-images \
    --cli-input-json="${awsArgs}" \
    --query='max_by(Images, &CreationDate)' \
)"

jq -n \
    --argjson imageInfo "${awsResult}" \
'
    $imageInfo | { Description: .Description, ImageId: .ImageId, Name: .Name}
'
