#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Load the helper library.
. "${progDir}/lib/init"


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Location (region or availability zone).
inLocation=''

while (( $# > 0 )); do
    case "$1" in
        -h|--help)
            showHelp=1
            break
            ;;
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if [[ $# < 1 ]]; then
    echo 1>&2 'Missing argument: name or ID'
    argError=1
else
    nameOrId="$1"
    shift
fi

if (( !${argError} )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi
fi

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...] <name-or-id>"
    echo '  Finds a security group by name or validates the existence of one by'
    echo '  ID. On success, prints the security group ID.'
    echo ''
    echo '  --in=<region-or-zone>'
    echo '    Where to look. Must be specified. If specified as an availability'
    echo '    zone, only the region portion matters.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

inRegion="$(lib region-from-location "${inLocation}")" \
|| exit "$?"

if [[ ${nameOrId} =~ ^sg- ]]; then
    # It looks like an ID.
    filterName='group-id'
else
    # It's expected to be a name.
    filterName='group-name'
fi

result="$(
ec2-json describe-security-groups \
    --in="${inRegion}" \
    filterName="${filterName}" \
    nameOrId="${nameOrId}" \
    '{
        Filters: [
            {
                Name: $filterName,
                Values: [$nameOrId]
            }
        ]
    }' \
    :: \
    '
        .SecurityGroups | map({ id: .GroupId, name: .GroupName })
        |
        {
            count: (. | length),
            id:    (.[0].id // "none"),
            all:   map(.id + " " + (.name | tojson))
        }
    '
)" \
|| exit "$?"

count="$(jval "${result}" '.count')"
id="$(jval --raw "${result}" '.id')"

if (( ${count} == 0 )); then
    echo 1>&2 'No such security group.'
    exit 1
elif (( ${count} != 1 )); then
    echo 1>&2 'Ambiguous name or ID matches all of:'
    jval --raw 1>&2 "${result}" '.all[] | "  " + .'
    exit 1
fi

echo "${id}"
