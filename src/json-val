#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog


#
# Argument parsing
#

# Compact output?
compact=0

# List of variable assignments, as parallel arrays of type, name, and value.
varTypes=()
varNames=()
varValues=()

# Value construction expression.
valueExpression=''

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Parse options.
while (( $# > 0 )); do
    case "$1" in
        -h|--help)
            showHelp=1
            break
            ;;
        --compact)
            compact=1
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

# Parse assignments.
while (( $# > 0 && !${argError} )); do
    arg="$1"
    if [[ ${arg} == '--' ]]; then
        shift
        break
    fi

    [[ ${arg} =~ ^([a-zA-Z0-9_]+)(:[a-z]+)?=(.*)$ ]] \
    || break

    varNames+=("${BASH_REMATCH[1]}")
    varValues+=("${BASH_REMATCH[3]}")

    varType="${BASH_REMATCH[2]}"
    if [[ ${varType} == '' ]]; then
        varType='string'
    else
        # Drop initial `:`.
        [[ ${varType} =~ ^:(.*)$ ]];
        varType="${BASH_REMATCH[1]}"
    fi

    varTypes+=("${varType}")
    
    shift
done

# Construct value expression from remaining arguments

if (( $# == 0 )); then
    echo 1>&2 'No value construction expression specified.'
    argError=1
else
    valueExpression="$*"
fi

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...] [--] [<assignment> ...] [--] <jq-expression> ..."
    echo '  Constructs a JSON value from variable assignments passed into an'
    echo '  expression evaluated by `jq`. The <jq-expression> arguments are'
    echo '  concatenated together (separated by spaces) to form the final'
    echo '  expression to be evaluated.'
    echo ''
    echo '  <assignment>'
    echo '    <name>=<value> Assign `$name` to be the indicated string value.'
    echo '    <name>:json=<value> Assign `$name` to be the indicated parsed JSON value.'
    echo ''
    echo '  --compact'
    echo '    Output in compact form (not multiline).'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

jqArgs=('--null-input')

if (( ${compact} )); then
    jqArgs+=('--compact-output')
fi

for (( i = 0; ${i} < ${#varTypes[@]}; i++ )); do
    varType="${varTypes[${i}]}"
    case "${varType}" in
        json)
            jqArgs+=('--argjson')
            ;;
        string)
            jqArgs+=('--arg')
            ;;
        *)
            echo 1>&2 "Unrecognized variable type: ${varType}"
            exit 1
            ;;
    esac
    
    jqArgs+=("${varNames[${i}]}" "${varValues[${i}]}")
done

# Note: `jq` doesn't recognize `--` as an end-of-options sign, but generally
# speaking there's no ambiguity between a valid `jq` option and its program
# text. Nonetheless, we prepend an extra space if the program begins with a
# dash, just in case the user of this script passed in something wacky.
if [[ ${valueExpression} =~ ^- ]]; then
    valueExpression=" ${valueExpression}"
fi

jqArgs+=("${valueExpression}")

exec jq "${jqArgs[@]}"
