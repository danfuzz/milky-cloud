#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Load the helper library.
. "${progDir}/lib/init"


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Location (region or availability zone).
inLocation=''

# Name of the VPC.
name=''

while (( $# > 0 )); do
    case "$1" in
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --name=?*)
            name="${1#*=}"
            ;;
        -h|--help)
            showHelp=1
            break
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if (( !argError )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi
    if [[ ${name} == '' ]]; then
        echo 1>&2 'Missing option: --name'
        argError=1
    fi
fi

if (( showHelp || argError )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Makes a new VPC, plus associated accouterments. On success, prints'
    echo '  the ID of the created VPC.'
    echo ''
    echo '  --in=<region-or-zone>'
    echo '    What region to make the VPC in. Must be specified. If specified as'
    echo '    an availability zone, only the region portion matters.'
    echo '  --name=<name>'
    echo '    Name to assign to the constructed VPC. Must be specified.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

inRegion="$(lib region-from-location "${inLocation}")" \
|| exit "$?"

# Create the main VPC result.
vpcId="$(ec2-json create-vpc \
    --in="${inRegion}" \
    tagSpec:json="$(lib name-tag-spec vpc "${name}")" \
    '
        $tagSpec +
        {
            CidrBlock: "10.1.0.0/16",
            AmazonProvidedIpv6CidrBlock: true,
            InstanceTenancy: "default"
        }
    ' \
    :: --raw '.Vpc.VpcId'
)" \
|| exit "$?"

echo 1>&2 "Made VPC: ${vpcId}"

# After this point, in case of error, we try to clean things up by removing the
# VPC and all its interconnected dependencies.
error=0

# Create a security group.
groupId=''
if (( !error )); then
    groupId="$(
    lib make-security-group \
        --in="${inRegion}" --name="standard-for-${name}" --vpc="${vpcId}" \
    )" \
    || error=1
fi

# Create an internet gateway.
gatewayId=''
if (( !error )); then
    gatewayId="$(ec2-json create-internet-gateway \
        --in="${inRegion}" \
        "$(lib name-tag-spec internet-gateway "${name}")" \
        :: --raw '.InternetGateway.InternetGatewayId'
    )" \
    && echo "Made internet gateway: ${gatewayId}" \
    || error=1
fi

# Attach the internet gateway to the VPC.
gatewayAttached=0
if (( !error )); then
    ec2-json attach-internet-gateway \
        --in="${inRegion}" \
        gatewayId="${gatewayId}" \
        vpcId="${vpcId}" \
        '{
            InternetGatewayId: $gatewayId,
            VpcId: $vpcId
        }' \
    && echo "Attached internet gateway: ${gatewayId}" \
    && gatewayAttached=1 \
    || error=1
fi

# Create a route table. Needs to associate the VPC's CIDR ranges (Ipv4 and Ipv6)
# with "local" routing, and everything else with the internet gateway.

# Create a subnet per availability zone. Attach the route table via
# `associate-route-table`.

if (( !error )); then
    lib add-subnets \
        --in="${inRegion}" --vpc="${vpcId}" --name="standard-for-${name}" \
    || error=1
fi

# TODO: Finish this!
error=1

# Do cleanup if necessary.

if (( error )); then
    echo 1>&2 'Error(s) after VPC creation. Attempting cleanup!'

    if (( gatewayAttached )); then
        echo 1>&2 'Detaching internet gateway...'
        ec2-json detach-internet-gateway \
            --in="${inRegion}" \
            gatewayId="${gatewayId}" \
            vpcId="${vpcId}" \
            '{
                InternetGatewayId: $gatewayId,
                VpcId: $vpcId
            }'
    fi

    if [[ ${gatewayId} != '' ]]; then
        echo 1>&2 'Deleting internet gateway...'
        ec2-json delete-internet-gateway \
            --in="${inRegion}" \
            gatewayId="${gatewayId}" \
            '{ InternetGatewayId: $gatewayId }'
    fi

    if [[ ${groupId} != '' ]]; then
        echo 1>&2 'Deleting security group...'
        ec2-json delete-security-group \
            --in="${inRegion}" \
            groupId="${groupId}" \
            '{ GroupId: $groupId }'
    fi

    echo 1>&2 'Deleting subnets...'
    lib delete-subnets --in="${inRegion}" --vpc="${vpcId}" --all

    echo 1>&2 'Deleting VPC...'
    ec2-json delete-vpc \
        --in="${inRegion}" \
        vpcId="${vpcId}" \
        '{ VpcId: $vpcId }'

    echo 1>&2 'Done with post-error cleanup.'
    exit "${error}"
fi

echo "${vpcId}"
