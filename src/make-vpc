#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Load the helper library.
. "${progDir}/lib/init"


#
# Helper functions
#

# Creates a VPC, and waits for its state to settle. Prints out the VPC info upon
# success.
function make-vpc-per-se {
    local error=0
    local vpcId=''
    local vpcInfo
    local waitSec
    local maxTime

    while (( !error )); do
        if [[ ${vpcId} == '' ]]; then
            # Create the actual VPC.
            vpcInfo="$(ec2-json create-vpc \
                --in="${inRegion}" \
                tagSpec:json="$(lib name-tag-spec vpc "${name}")" \
                '
                    $tagSpec +
                    {
                        CidrBlock: "10.1.0.0/16",
                        AmazonProvidedIpv6CidrBlock: true,
                        InstanceTenancy: "default"
                    }
                ' \
                :: '.Vpc'
            )" \
            || return "$?"

            vpcId="$(jget --raw "${vpcInfo}" '.VpcId')"
            echo 1>&2 "Made VPC: ${vpcId}"
        else
            # Re-fetch the VPC info.
            vpcInfo="$(ec2-json describe-vpcs \
                --in="${inRegion}" \
                vpcId="${vpcId}" \
                '{ VpcIds: [$vpcId] }' \
                :: '.Vpcs[0]'
            )" \
            || error="$?"

            if (( error )); then
                break
            fi
        fi

        # It _might_ be the case that if the whole VPC's state is `available`,
        # then it's safe to assume that all network addresses are `associated`.
        # However, that doesn't seem to be explicitly stated in the AWS docs, so
        # we test explicitly for the network associations.
        local ready="$(jget --raw "${vpcInfo}" '
              .CidrBlockAssociationSet[0].CidrBlockState as $cidr4
            | .Ipv6CidrBlockAssociationSet[0].Ipv6CidrBlockState as $cidr6
            |
                (.State == "available")
            and ($cidr4 == null or $cidr4.State == "associated")
            and ($cidr6 == null or $cidr6.State == "associated")
            |
            if . == true then 1 else 0 end
        ')"

        if (( ready )); then
            break
        fi

        if [[ ${maxTime} == '' ]]; then
            # Retry for no more than 60 seconds total.
            maxTime=$(($(date '+%s') + 60))
        elif (( $(date '+%s') > maxTime )); then
            echo 1>&2 'Timed out while waiting for VPC to become ready.'
            error=1
            break
        fi

        if [[ ${waitSec} == '' ]]; then
            # First sleep is sub-second. In practice, this appears to be enough
            # to ensure readiness, at least most of the time.
            sleep 0.1
            waitSec=1
        else
            echo 1>&2 'Not yet ready...'
            sleep "${waitSec}"
            (( waitSec = waitSec * 3 / 2 + 1 ))
        fi
    done

    if (( error )); then
        return "${error}"
    fi

    echo "${vpcInfo}"
}


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Location (region or availability zone).
inLocation=''

# Name of the VPC.
name=''

while (( $# > 0 )); do
    case "$1" in
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --name=?*)
            name="${1#*=}"
            ;;
        -h|--help)
            showHelp=1
            break
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if (( !argError )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi
    if [[ ${name} == '' ]]; then
        echo 1>&2 'Missing option: --name'
        argError=1
    fi
fi

if (( argError )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Makes a new VPC, plus associated accouterments. On success, prints'
    echo '  the ID of the created VPC.'
    echo ''
    echo '  --in=<region-or-zone>'
    echo '    What region to make the VPC in. Must be specified. If specified as'
    echo '    an availability zone, only the region portion matters.'
    echo '  --name=<name>'
    echo '    Name to assign to the constructed VPC. Must be specified.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit $(( argError < 0 ? 0 : argError ))
fi


#
# Main script
#

# Name to use for all the sub-resources.
resourceName="standard-for-${name}"

inRegion="$(lib region-from-location "${inLocation}")" \
|| exit "$?"

# Create the actual VPC.
vpcInfo="$(make-vpc-per-se)" \
|| exit "$?"

vpcId="$(jget --raw "${vpcInfo}" '.VpcId')"
cidr4="$(jget --raw "${vpcInfo}" '.CidrBlockAssociationSet[0].CidrBlock')"
cidr6="$(jget --raw "${vpcInfo}" '.Ipv6CidrBlockAssociationSet[0].Ipv6CidrBlock')"

echo 1>&2 'Networks:'
echo 1>&2 "  IPv4: ${cidr4}"
echo 1>&2 "  IPv6: ${cidr6}"

# After this point, in case of error, we try to clean things up by removing the
# VPC and all its interconnected dependencies.

error=0

# Set the attributes on the VPC to let instances have public DNS hostnames.
# Note: The two attributes have to be turned on in this specific order, because
# one depends on the other, and AWS will reject an invalid intermediate state.
if (( !error )); then
    lib set-attributes \
        --progress --in="${inRegion}" --id="${vpcId}" \
        EnableDnsSupport=true \
        EnableDnsHostnames=true \
    || error=1
fi

# Configure the default security group.
if (( !error )); then
    lib configure-security-group \
        --progress --in="${inRegion}" --security-group="${vpcId}" \
        --name-tag="default-for-${vpcId}" \
    || error=1
fi

# Create a subnet per availability zone.
if (( !error )); then
    lib add-subnets \
        --progress --quiet --in="${inRegion}" --vpc="${vpcId}" \
        --name="${resourceName}" \
    || error=1
fi

# Create and attach an internet gateway.
gatewayAdded=0
if (( !error )); then
    gatewayId="$(
        lib add-internet-gateway \
            --progress --in="${inRegion}" \
            --vpc="${vpcId}" --name="${resourceName}" \
    )" \
    && gatewayAdded=1 \
    || error=1
fi

# Do cleanup if necessary.

if (( error )); then
    echo 1>&2 'Error(s) after VPC creation. Attempting cleanup!'

    if (( gatewayAdded )); then
        echo 1>&2 'Deleting internet gateway...'
        lib delete-internet-gateway \
            --in="${inRegion}" --gateway="${gatewayId}"
    fi

    echo 1>&2 'Deleting subnets...'
    lib delete-subnets --quiet --in="${inRegion}" --vpc="${vpcId}" --all

    echo 1>&2 'Deleting VPC...'
    ec2-json delete-vpc \
        --in="${inRegion}" \
        vpcId="${vpcId}" \
        '{ VpcId: $vpcId }'

    echo 1>&2 'Done with post-error cleanup.'
    exit "${error}"
fi

if (( !error )); then
    echo 1>&2 "VPC ${vpcId} is ready for action!"
fi

echo "${vpcId}"
