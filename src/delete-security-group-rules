#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Load the helper library.
. "${progDir}/lib/init"


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Filter to apply, to determine which rule(s) to remove.
filterArgs=()

# Name or ID of the security group.
groupNameOrId=''

# Location (region or availability zone).
inLocation=''

# Quiet?
quiet=0

while (( $# > 0 )); do
    case "$1" in
        --all)
            filterArgs=('.')
            ;;
        --all-egress)
            filterArgs=('select(.IsEgress == true)')
            ;;
        --all-ingress)
            filterArgs=('select(.IsEgress == false)')
            ;;
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --quiet)
            quiet=1
            ;;
        --security-group=?*)
            groupNameOrId="${1#*=}"
            ;;
        -h|--help)
            showHelp=1
            break
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if (( !argError )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi
    if [[ ${groupNameOrId} == '' ]]; then
        echo 1>&2 'Missing option: --security-group'
        argError=1
    fi
fi

if (( ${#filterArgs[@]} == 0 )); then
    if (( $# == 0 )); then
        echo 1>&2 'Missing filter option or arguments.'
        argError=1
    fi
    filterArgs=("$@")
elif (( $# > 0 )); then
    echo 1>&2 'Cannot specify both filter option and arguments.'
    argError=1
fi

if (( showHelp || argError )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...] [<assignment> ...] <jq-expression> ..."
    echo '  Removes rules from an existing security group, based on given filter'
    echo '  criteria. Simple filters can be specified via options, or if no such'
    echo '  option is used, a general filter can be specified via assignment and'
    echo '  expression arguments, similar to `aws-json`. This filter is expected'
    echo '  to accept `SecurityGroupRule` objects and then re-output the ones to'
    echo '  be removed.'
    echo ''
    echo '  On success, prints a JSON array of the IDs of all removed rules.'
    echo ''
    echo '  --all'
    echo '    Remove all rules.'
    echo '  --all-egress'
    echo '    Remove all egress rules.'
    echo '  --all-ingress'
    echo '    Remove all ingress rules.'
    echo '  --in=<region-or-zone>'
    echo '    What region to make the security group in. Must be specified. If'
    echo '    specified as an availability zone, only the region portion matters.'
    echo '  --quiet'
    echo '    Suppress non-error output.'
    echo '  --security-group=<name-or-id>'
    echo '    Name or ID of the security group to operate on. Can also be a VPC ID,'
    echo '    to indicate the default security group for that VPC.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

inRegion="$(lib region-from-location "${inLocation}")" \
|| exit "$?"

# Validate or find the ID of the security group.
groupId="$(lib find-security-group --in="${inRegion}" "${groupNameOrId}")" \
|| exit "$?"

allRules="$(ec2-json describe-security-group-rules \
    --in="${inRegion}" \
    "$(lib filter-spec group-id="${groupId}")" \
    :: '.SecurityGroupRules[]'
)" \
|| exit "$?"

selectedRules="$(
    jval <<<"${allRules}" --read-stdin -- "${filterArgs[@]}"
)" \
|| exit "$?"

egressRuleIds="$(
    jval <<<"${selectedRules}" --slurp-stdin \
        'map(select(.IsEgress == true) | .SecurityGroupRuleId)'
)" \
|| exit "$?"

ingressRuleIds="$(
    jval <<<"${selectedRules}" --slurp-stdin \
        'map(select(.IsEgress == false) | .SecurityGroupRuleId)'
)" \
|| exit "$?"

if [[ ${egressRuleIds} != '[]' ]]; then
    # Non-empty list of egress rules to delete.
    ec2-json revoke-security-group-egress \
        --in="${inRegion}" \
        groupId="${groupId}" \
        ruleIds:json="${egressRuleIds}" \
        '{
            GroupId: $groupId,
            SecurityGroupRuleIds: $ruleIds
        }' \
        :: --none \
    || exit "$?"
fi

if [[ ${ingressRuleIds} != '[]' ]]; then
    # Non-empty list of egress rules to delete.
    ec2-json revoke-security-group-ingress \
        --in="${inRegion}" \
        groupId="${groupId}" \
        ruleIds:json="${ingressRuleIds}" \
        '{
            GroupId: $groupId,
            SecurityGroupRuleIds: $ruleIds
        }' \
        :: --none \
    || exit "$?"
fi

if (( !quiet )); then
    jval \
        ids:json="[${egressRuleIds}, ${ingressRuleIds}]" \
        '$ids | flatten | sort'
fi
