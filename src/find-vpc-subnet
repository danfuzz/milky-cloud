#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Load the helper library.
. "${progDir}/lib/init"


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Location (availability zone).
inLocation=''

# VPC name or ID.
nameOrId=''

while (( $# > 0 )); do
    case "$1" in
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --vpc=?*)
            nameOrId="${1#*=}"
            ;;
        -h|--help)
            showHelp=1
            break
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if (( !${argError} )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi
    if [[ ${nameOrId} == '' ]]; then
        echo 1>&2 'Missing option: --vpc'
        argError=1
    fi
fi

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Finds a VPC subnet that meets the indicated criteria. On success,'
    echo '  prints the subnet ID.'
    echo ''
    echo '  --in=<availability-zone>'
    echo '    What availibility zone to look in. Must be specified.'
    echo '  --vpc=<name-or-id>'
    echo '    Name or ID of the VPC to look in. Must be specified.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

inRegion="$(lib region-from-zone "${inLocation}")" \
|| exit "$?"

vpcId="$(lib find-vpc --in="${inRegion}" "${nameOrId}")" \
|| exit "$?"

filterSpec="$(lib aws-filter-spec \
    availability-zone="${inLocation}" \
    vpc-id="${vpcId}"
)"

result="$(ec2-json describe-subnets \
    --in="${inRegion}" \
    filterSpec:json="${filterSpec}" \
    '{ Filters: $filterSpec }' \
    :: '.Subnets | map(.SubnetId)' \
)" \
|| exit "$?"

subnetId="$(jval --raw \
    "${result}" '
    |
    if length == 0 then "none"
    elif length == 1 then .[0]
    else "ambiguous"
    end
')"

case "${subnetId}" in
    ambiguous)
        echo 1>&2 'Ambiguous specification matches all of:'
        jval 1>&2 --raw "${result}" '[] | "  " + .'
        exit 1
        ;;
    none)
        echo 1>&2 'No such subnet.'
        exit 1
        ;;
esac

echo "${subnetId}"
