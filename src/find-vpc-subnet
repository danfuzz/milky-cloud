#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Location (availability zone).
inLocation=''

# VPC name or ID.
nameOrId=''

while (( $# > 0 )); do
    case "$1" in
        -h|--help)
            showHelp=1
            break
            ;;
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --vpc=?*)
            nameOrId="${1#*=}"
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if (( !${argError} )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi
    if [[ ${nameOrId} == '' ]]; then
        echo 1>&2 'Missing option: --vpc'
        argError=1
    fi
fi

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Finds a VPC subnet that meets the indicated criteria. On success,'
    echo '  prints the subnet ID.'
    echo ''
    echo '  --in=<region-or-zone>'
    echo '    Where to look. Must be specified.'
    echo '  --vpc=<name-or-id>'
    echo '    Name or ID of the VPC to look in. Must be specified.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

"${progDir}/aws-preflight" \
|| exit "$?"

awsRegion="$("${progDir}/region-from-zone" "${inLocation}")" \
|| exit "$?"

vpcId="$("${progDir}/find-vpc" --in="${awsRegion}" "${nameOrId}")" \
|| exit "$?"

# aws ec2 describe-subnets

awsArgs="$(
jq -n \
    --arg zone "${inLocation}" \
    --arg vpcId "${vpcId}" \
'
    {
        Filters: [
            {
                Name: "availability-zone",
                Values: [$zone]
            },
            {
                Name: "vpc-id",
                Values: [$vpcId]
            }
        ]
    }
')"

awsResult="$(
aws ec2 describe-subnets \
    --region="${awsRegion}" \
    --cli-input-json="${awsArgs}" \
|| echo 'error'
)"

if [[ ${awsResult} == 'error' ]]; then
    # In this case, `aws` will have spewed an error message of some sort, we
    # hope!
    exit 1
fi

subnetId="$(jq -n --raw-output \
    --argjson info "${awsResult}" \
'
    $info 
    | .Subnets
    | 
    if length == 0 then "subnet-none"
    elif length == 1 then .[0].SubnetId
    else "subnet-ambiguous"
    end
')"

if [[ ${subnetId} == 'subnet-none' ]]; then
    echo 1>&2 'No such subnet.'
    exit 1
elif [[ ${subnetId} == 'subnet-ambiguous' ]]; then
    echo 1>&2 'Ambiguous specification matches all of:'
    jq 1>&2 -n --raw-output \
        --argjson info "${awsResult}" \
    '
        $info | .Subnets | .[] | "  " + .SubnetId
    '
    exit 1
fi

echo "${subnetId}"
