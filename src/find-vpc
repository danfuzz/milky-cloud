#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Load the helper library.
. "${progDir}/lib/init"


#
# Helper functions
#

# Performs a `describe-*` call and passes through the JSON output under the
# indicated top-level object key. Print out the final requested result (either
# just the ID or the full info), including possibly doing a second call to
# get the requested info.
function do-find {
    local commandName="$1"
    local topKey="$2"
    local filterName="$3"
    local nameOrId="$4"

    local result
    result="$(ec2-json "${commandName}" \
        --in="${inRegion}" \
        "$(lib filter-spec "${filterName}=${nameOrId}")"
    )" \
    || return "$?"

    local idResult
    idResult="$(jval \
        result:json="${result}" \
        topKey="${topKey}" \
        '$result[$topKey] | map(.VpcId) | unique'
    )"

    local vpcId
    vpcId="$(jget --raw \
        "${idResult}" \
        '
        if length == 0 then "none"
        elif length == 1 then .[0]
        else "ambiguous"
        end
    ')"

    case "${vpcId}" in
        ambiguous)
            echo 1>&2 'Ambiguous name or ID matches all of:'
            jget 1>&2 --raw "${idResult}" '.[] | "  " + .'
            return 1
            ;;
        none)
            echo 1>&2 'No such VPC.'
            return 1
            ;;
    esac

    if (( printAll )); then
        if [[ ${topKey} != 'Vpcs' ]]; then
            # We got the ID out of some other object (e.g. a security group),
            # and we've been asked for full info. So we need to actually get
            # that info!
            result="$(ec2-json describe-vpcs \
                --in="${inRegion}" \
                vpcId="${vpcId}" \
                '{ VpcIds: [$vpcId] }'
            )" \
            || return "$?"
        fi
        jget "${result}" '.Vpcs[0]'
    else
        echo "${vpcId}"
    fi
}

# Find a VPC by looking through all the VPCs.
function find-via-describe-vpcs {
    local filterName="$1"
    local nameOrId="$2"

    do-find describe-vpcs Vpcs "${filterName}" "${nameOrId}"
}

# Find a VPC from an associated security group.
function find-via-describe-security-groups {
    local nameOrId="$1"

    do-find describe-security-groups SecurityGroups group-id "${nameOrId}"
}


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Location (region or availability zone).
inLocation=''

# Print full object?
printAll=0

while (( $# > 0 )); do
    case "$1" in
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --print-all)
            printAll=1
            ;;
        -h|--help)
            showHelp=1
            break
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if (( $# < 1 )); then
    echo 1>&2 'Missing argument: name or ID'
    argError=1
else
    nameOrId="$1"
    shift
fi

if (( !argError )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi
fi

if (( showHelp || argError )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...] <name-or-id>"
    echo '  Finds a VPC by name or security group ID, or validates the existence'
    echo '  of one by ID. On success, prints the VPC ID (by default) or the'
    echo '  full VPC info object.'
    echo ''
    echo '  --print-all'
    echo '    Print the full info object, not just the ID.'
    echo '  --in=<region-or-zone>'
    echo '    Where to look. Must be specified. If specified as an availability'
    echo '    zone, only the region portion matters.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

inRegion="$(lib region-from-location "${inLocation}")" \
|| exit "$?"

if [[ ${nameOrId} =~ ^vpc- ]]; then
    # It looks like an ID.
    find-via-describe-vpcs 'vpc-id' "${nameOrId}"
elif [[ ${nameOrId} =~ ^sg- ]]; then
    # It looks like a security group ID.
    find-via-describe-security-groups "${nameOrId}"
else
    # It's expected to be a name.
    find-via-describe-vpcs 'tag:Name' "${nameOrId}"
fi
