#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Load the helper library.
. "${progDir}/lib/init"


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Location (region or availability zone).
inLocation=''

while (( $# > 0 )); do
    case "$1" in
        -h|--help)
            showHelp=1
            break
            ;;
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if [[ $# < 1 ]]; then
    echo 1>&2 'Missing argument: name or ID'
    argError=1
else
    nameOrId="$1"
    shift
fi

if (( !${argError} )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi
fi

if (( ${showHelp} || ${argError} )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...] <name-or-id>"
    echo '  Finds a VPC by name or security group ID, or validates the existence'
    echo '  of one by ID. On success, prints the VPC ID.'
    echo ''
    echo '  --in=<region-or-zone>'
    echo '    Where to look. Must be specified. If specified as an availability'
    echo '    zone, only the region portion matters.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi

#
# Helper functions
#

# Performs a `describe-*` call and passes through the JSON output under the
# indicated top-level object key.
function do-describe-call {
    local commandName="$1"
    local topKey="$2"
    local filterName="$3"
    local nameOrId="$4"

    local awsArgs="$(
    jq -n \
        --arg filterName "${filterName}" \
        --arg nameOrId "${nameOrId}" \
    '
        {
            Filters: [
                {
                    Name: $filterName,
                    Values: [$nameOrId]
                }
            ]
        }
    ')"

    local awsResult="$(
    aws ec2 "${commandName}" \
        --region="${awsRegion}" \
        --cli-input-json="${awsArgs}" \
    || echo 'error'
    )"

    if [[ ${awsResult} == 'error' ]]; then
        # In this case, `aws` will have spewed an error message of some sort, we
        # hope!
        exit 1
    fi

    jq -n --raw-output \
        --argjson info "${awsResult}" \
        --arg topKey "${topKey}" \
        '$info | .[$topKey]'
}

# Find a VPC by looking through all the VPCs.
function find-via-describe-vpcs {
    local filterName="$1"
    local nameOrId="$2"

    local awsResult
    awsResult="$(do-describe-call describe-vpcs Vpcs "${filterName}" "${nameOrId}")" \
    || exit "$?"

    local vpcId="$(jq -n --raw-output \
        --argjson info "${awsResult}" \
    '
        $info
        |
        if length == 0 then "vpc-none"
        elif length == 1 then .[0].VpcId
        else "vpc-ambiguous"
        end
    ')"

    if [[ ${vpcId} == 'vpc-none' ]]; then
        echo 1>&2 'No such VPC.'
        exit 1
    elif [[ ${vpcId} == 'vpc-ambiguous' ]]; then
        echo 1>&2 'Ambiguous name or ID matches all of:'
        jq 1>&2 -n --raw-output \
            --argjson info "${awsResult}" \
        '
            $info | .[] | "  " + .VpcId
        '
        exit 1
    fi

    echo "${vpcId}"
}

# Find a VPC from an associated security group.
function find-via-describe-security-groups {
    local nameOrId="$1"

    local awsResult
    awsResult="$(do-describe-call describe-security-groups SecurityGroups group-id "${nameOrId}")" \
    || exit "$?"

    vpcId="$(jq -n --raw-output \
        --argjson info "${awsResult}" \
    '
        $info
        |
        if length == 0 then "vpc-none"
        elif length == 1 then .[0].VpcId
        else "vpc-ambiguous"
        end
    ')"

    if [[ ${vpcId} == 'vpc-none' ]]; then
        echo 1>&2 'No such VPC.'
        exit 1
    elif [[ ${vpcId} == 'vpc-ambiguous' ]]; then
        echo 1>&2 'Unexpected, Ambiguous security group ID matches all of:'
        jq 1>&2 -n --raw-output \
            --argjson info "${awsResult}" \
        '
            $info | .[] | "  " + .VpcId
        '
        exit 1
    fi

    echo "${vpcId}"
}

#
# Main script
#

"${progDir}/aws-preflight" \
|| exit "$?"

awsRegion="$("${progDir}/region-from-location" "${inLocation}")" \
|| exit "$?"

if [[ ${nameOrId} =~ ^vpc- ]]; then
    # It looks like an ID.
    find-via-describe-vpcs 'vpc-id' "${nameOrId}"
elif [[ ${nameOrId} =~ ^sg- ]]; then
    # It looks like a security group ID.
    find-via-describe-security-groups "${nameOrId}"
else
    # It's expected to be a name.
    find-via-describe-vpcs 'tag:Name' "${nameOrId}"
fi
