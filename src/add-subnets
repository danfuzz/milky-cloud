#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Set `progName` to the program name, `progDir` to its directory, and `baseDir`
# to `progDir`'s directory. Follows symlinks.
function init-prog {
    local newp p="$0"

    while newp="$(readlink "$p")"; do
        [[ ${newp} =~ ^/ ]] && p="${newp}" || p="$(dirname "$p")/${newp}"
    done

    progName="${p##*/}"
    progDir="$(cd "$(dirname "$p")"; /bin/pwd -P)"
    baseDir="$(cd "${progDir}/.."; /bin/pwd -P)"
}
init-prog

# Load the helper library.
. "${progDir}/lib/init"


#
# Helper functions
#

# Gets the number of bits needed to represent N values (e.g. the numbers
# 0..(N-1)).
function bits-needed {
    local n="$1"
    local count=0

    while (( n > 0 )); do
        (( count++ ))
        (( n >>= 1 ))
    done

    echo "${count}"
}


#
# Argument parsing
#

# Error during argument processing?
argError=0

# Need help?
showHelp=0

# Location (region or availability zone).
inLocation=''

# Name for the subnets.
name=''

# Progress messages?
progress=0

# Quiet?
quiet=0

# Name or ID of the VPC.
vpcNameOrId=''

while (( $# > 0 )); do
    case "$1" in
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --name=?*)
            name="${1#*=}"
            ;;
        --progress)
            progress=1
            ;;
        --quiet)
            quiet=1
            ;;
        --vpc=?*)
            vpcNameOrId="${1#*=}"
            ;;
        -h|--help)
            showHelp=1
            break
            ;;
        --)
            # Explicit end of options
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument
            break
            ;;
    esac

    shift
done

if (( !argError )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi
    if [[ ${vpcNameOrId} == '' ]]; then
        echo 1>&2 'Missing option: --vpc'
        argError=1
    fi
fi

if (( showHelp || argError )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Adds a set of subnets to a VPC -- one per availability zone -- along'
    echo '  with an associated routing table. Upon success, prints a JSON array'
    echo '  of all the created subnets.'
    echo ''
    echo '  --in=<region-or-zone>'
    echo '    What region to make the security group in. Must be specified. If'
    echo '    specified as an availability zone, only the region portion matters.'
    echo '  --name=<name>'
    echo '    Name to use for the created subnets. If not specified, a name is'
    echo '    generated programatically.'
    echo '  --progress'
    echo '    Print progress messages to stderr.'
    echo '  --quiet'
    echo '    Suppress non-error output to stdout.'
    echo '  --vpc=<name-or-id>'
    echo '    Name or ID of the VPC.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit "${argError}"
fi


#
# Main script
#

inRegion="$(lib region-from-location "${inLocation}")" \
|| exit "$?"

azList=($(lib list-availability-zones --in="${inRegion}")) \
|| exit "$?"

# Get all the VPC info.
vpcInfo="$(lib find-vpc --in="${inRegion}" --print-all "${vpcNameOrId}")" \
|| exit "$?"

vpcId="$(jget --raw "${vpcInfo}" '.VpcId')"

cidr4="$(jget --raw "${vpcInfo}" '
    .CidrBlockAssociationSet
    |
    if length == 0 then "none"
    elif length == 1 then .[0].CidrBlock
    else "many"
    end
')"

if [[ ${cidr4} == 'many' ]]; then
    echo 1>&2 'Sorry, not set up to deal with multiple CIDRs (IPv4).'
    exit 1
fi

cidr6="$(jget --raw "${vpcInfo}" '
    .Ipv6CidrBlockAssociationSet
    |
    if length == 0 then "none"
    elif length == 1 then .[0].Ipv6CidrBlock
    else "many"
    end
')"

if [[ ${cidr6} == 'many' ]]; then
    echo 1>&2 'Sorry, not set up to deal with multiple CIDRs (IPv6).'
    exit 1
fi

azCount="${#azList[@]}"
v4Subnets=()
v6Subnets=()

if [[ ${cidr4} != 'none' ]]; then
    v4Subnets=($(lib cidr-calc make-subnets "${cidr4}" "${azCount}"))
fi

if [[ ${cidr6} != 'none' ]]; then
    # `64` because AWS requires V6 subnet networks to be exactly 64 bits.
    v6Subnets=($(lib cidr-calc make-subnets "${cidr6}" "${azCount}" 64))
fi

if [[ ${name} == '' ]]; then
    name="$(lib now-stamp via-script)"
fi

tagSpec="$(lib name-tag-spec 'subnet' "${name}")"

results=()
error=0

for (( n = 0; n < azCount && !error; n++ )); do
    az="${azList[${n}]}"
    v4Subnet="${v4Subnets[${n}]}"
    v6Subnet="${v6Subnets[${n}]}"
    result="$(ec2-json create-subnet \
        --in="${inRegion}" \
        az="${azList[${n}]}" \
        tagSpec:json="${tagSpec}" \
        v4Subnet="${v4Subnets[${n}]}" \
        v6Subnet="${v6Subnets[${n}]}" \
        vpcId="${vpcId}" \
        '
        $tagSpec
        +
        {
            AvailabilityZone: $az,
            VpcId: $vpcId
        }
        +
        if $v4Subnet == ""
            then { Ipv6Native: true }
            else { CidrBlock: $v4Subnet }
        end
        +
        if $v6Subnet == ""
            then { }
            else { Ipv6CidrBlock: $v6Subnet }
        end
        ' \
        :: --raw '.Subnet.SubnetId' \
    )" \
    || error=1

    if (( error )); then
        break
    fi

    results+=("${result}")

    # Set the public-IP-address attribute on the subnet, which means that
    # instances launched in this subnet will be publicly accessible (unless that
    # setting is overridden during launch).
    ec2-json modify-subnet-attribute \
        --in="${inRegion}" \
        subnetId="${result}" \
        '{
            SubnetId: $subnetId,
            MapPublicIpOnLaunch: { Value: true }
        }' \
    || error=1

    # Set the DNS name policy to name instances in this subnet after their
    # instance ID (not DNS address).
    ec2-json modify-subnet-attribute \
        --in="${inRegion}" \
        subnetId="${result}" \
        '{
            SubnetId: $subnetId,
            PrivateDnsHostnameTypeOnLaunch: "resource-name"
        }' \
    || error=1

    # TODO: Consider explicitly turning on the attributes for A and AAAA record
    # responses. Also for IPv6-on-creation.

    if (( progress )); then
        echo 1>&2 "Made subnet: ${result}"
    fi
done

if (( error )); then
    # Attempt to delete any subnets that had been added.
    if (( progress )); then
        echo 1>&2 'Problem creating subnets; attempting cleanup...'
    fi

    for id in "${results[@]}"; do
        if (( progress )); then
            echo 1>&2 "Removing subnet: ${id}"
        fi

        ec2-json delete-subnet \
            --in="${inRegion}" \
            id="${id}" \
            '{
                SubnetId: $id
            }'
    done

    if (( progress )); then
        echo 1>&2 'Done with post-error subnet cleanup.'
    fi

    exit 1
fi

if (( progress )); then
    echo 1>&2 "Done making and configuring ${#results[@]} subnets."
fi

if (( !quiet )); then
    jarray --strings "${results[@]}"
fi
