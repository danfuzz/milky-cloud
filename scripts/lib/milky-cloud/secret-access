#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<opt> ...] <assignment> ...

    Access account secrets. This is a wrapper for 1Password\'s `op` tool (and
    may eventually grow to handle other things), meant to avoid tainting the
    rest of the system with details of how secrets are retrieved.

    The <assignment> syntax is `<name>`, `<name>=<path>`, or
    `<name>=<source> <path>`, where <name> is the name to assign, <source> is a
    source (as in the option of the same name, described below), and <path> is
    the URI-like path to the secret in whatever container it comes from. The
    form `<name>` (no `=` or right-hand-side) is short for `<name>=<name>`.

    --env
      Scans all environment variables for values of the form `SECRET <source>` or
      `SECRET <source> <path>` (space separated), adding those to the (possibly
      empty) assignments. In variables where `<path>` is omitted, it is taken to
      be the variable name itself.
    --output=<style>
      `eval` -- Output an `eval`able script to set the values.
      `json` -- Output a JSON object with bindings for all requested secrets.
        This is the default.
      `text` -- Output the raw text of all secrets, each followed by a newline
        but with no other decoration. This is mostly only useful when requesting
        a single secret.
    --source=<origin>
      Container to retrieve from. This is required if any sources are omitted from
      the assignments.
      `1password:<vault>/<record>` -- Names a 1Password vault and record to
        retrieve from. The path can be arbitrarily deep.
      `env` -- Indicates that the <path> is actually an an environment variable
        name that contains the value.
      (Other sources may be defined later.)
'

opt-toggle --var=doEnv env

opt-value --var=outputStyle --init='json' --enum='eval json text' output

opt-value --var=source --filter='/^[-_.:/a-zA-Z0-9]+$/' source

# List of variable assignments, as parallel arrays.
varNames=()
varSources=()
varPaths=()

rest-arg --call=parse-rest \
    --filter='/^[_a-zA-Z0-9]+(=[-_.:/a-zA-Z0-9]+( [-_.:/a-zA-Z0-9]+)?)?$/' \
    assignments
function parse-rest {
    # Parse assignments.
    while (( $# > 0 )); do
        local arg="$1"

        [[ ${arg} =~ ^([^=]+)(=([^ ]+ )?([^ ]+))?$ ]] \
        || break

        local name="${BASH_REMATCH[1]}"
        local rhs="${BASH_REMATCH[2]}"
        local source="${BASH_REMATCH[3]}"
        local path="${BASH_REMATCH[4]}"

        if [[ ${rhs} == '' ]]; then
            path="${name}"
        fi
        if [[ ${source} != '' ]]; then
            # Remove the space at the end.
            [[ ${source} =~ ^(.*)' '$ ]]
            source="${BASH_REMATCH[1]}"
        fi

        varNames+=("${name}")
        varSources+=("${source}")
        varPaths+=("${path}")
        shift
    done
}

process-args "$@" || exit "$?"


#
# Helper functions
#

# Retrieves a secret from 1Password.
function source-1password {
    local vaultRecord="$1"
    local path="$2"

    if [[ ${vaultRecord} == '' ]]; then
        error-msg 'Missing 1Password vault record.'
        return 1
    fi

    local opUrl="op://${vaultRecord}/${path}"
    # Note: `op` is the (very poorly named) 1Password CLI.
    op read "op://${vaultRecord}/${path}" \
    || {
        error-msg 'Could not read 1Password secret:'
        error-msg "  ${opUrl}"
        return 1
    }
}

# Retrieves a secret from an environment variable.
function source-env {
    local expectEmpty="$1"
    local envName="$2"

    if [[ ${expectEmpty} != '' ]]; then
        error-msg '`env` does not take paths.'
        return 1
    fi

    local result="${!envName}"
    if [[ ${result} == '' ]]; then
        error-msg "Environment variable not set: ${envName}"
        return 1
    fi

    echo "${result}"
}

# Retrieves a secret.
function get-secret {
    local source="$1"
    local path="$2"

    if ! [[ ${source} =~ ^([^:]+)(:(.+))?$ ]]; then
        error-msg "Invalid source: ${source}"
        exit 1
    fi

    local sourceName="${BASH_REMATCH[1]}"
    local sourcePath="${BASH_REMATCH[3]}"
    local sourceFunc="source-${sourceName}"
    if ! declare -F "${sourceFunc}" >/dev/null; then
        error-msg "Unrecognized source: ${sourceName}"
        exit 1
    fi

    "${sourceFunc}" "${sourcePath}" "${path}"
}


#
# Main script
#

if (( !doEnv && ${#varNames[@]} == 0 )); then
    error-msg 'Need one or more assignment arguments.'
    exit 1
fi

if (( doEnv )); then
    toEval="$(env -0 | jval --input=raw0 --output=raw '
        capture("(?<name>[^=]+)=SECRET (?<source>[^ ]+)( (?<path>.+))?$")
        |
        "varNames+=(" + (.name | @sh) + ")",
        "varSources+=(" + (.source | @sh) + ")",
        "varPaths+=(" + ((.path // .name) | @sh) + ")"
    ')" \
    || exit "$?"
    eval "${toEval}"
fi

varValues=()
for i in "${!varNames[@]}"; do
    if [[ ${varSources[i]} == '' ]]; then
        if [[ ${source} == '' ]]; then
            error-msg 'Must use --source when making source-free assignments.'
            exit 1
        fi
        varSources[i]="${source}"
    fi
    value="$(get-secret "${varSources[i]}" "${varPaths[i]}")" \
    || exit "$?"
    varValues[i]="${value}"
done

case "${outputStyle}" in
    eval)
        for i in "${!varNames[@]}"; do
            name="${varNames[i]}"
            value="${varValues[i]}"
            printf 'export %s=%q\n' "${name}" "${value}"
        done
        ;;
    json)
        jval \
            names:json="$(jarray --input=strings "${varNames[@]}")" \
            values:json="$(jarray --input=strings "${varValues[@]}")" '
            [$names, $values]
            |
            transpose
            |
            map({ key: .[0], value: .[1] })
            |
            from_entries
            '
        ;;
    text)
        printf '%s\n' "${varValues[@]}"
        ;;
esac
