#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<opt> ...]

    Finds a DNS zone (Route53 "hosted zone") by name, or validates the
    existence of one by ID, and prints its information. If given a name, it
    is allowed to be more than just the main two components; any additional
    subdomains are ignored. The name is also accepted either with or without
    a final dot (`.`). If given an ID, it can be the plain ID string or the
    fully-qualified `/hostedzone/...` form.

    --domain=<name>
      Domain to look up. Can be either a domain name or a zone ID.
    --not-found-ok
      Do not report an error -- just don\'t print any output -- if there is
      no zone with the given name. This has no effect if given an ID.
    --output=<style> :: `id` `json`
      What to output, as with `jval`, except that `id` prints just the ID of the
      zone as a plain string. `json` is the default.
'

# Ok if no zone found?
opt-toggle --var=notFoundOk not-found-ok

# What to print.
opt-value --var=outputStyle --init=json --enum='id json' output

# Domain name or ID to look up.
opt-value --required --var=nameOrId --filter='/^[-./a-zA-Z0-9]+$/' domain

process-args "$@" || exit "$?"


#
# Helper functions
#

# Finds the zone ID for a given domain name.
function find-from-domain {
    local domain="$1"

    # Extract the main domain, canonicalized here _without_ a final `.`.
    [[ ${domain} =~ ([^.]+[.][^.]+)[.]?$ ]] || return "$1"
    domain="${BASH_REMATCH[1]}"

    lib aws-json route53 list-hosted-zones-by-name --global \
        domain="${domain}" \
        '{ DNSName: "\($domain)." }' \
        :: \
        domain="${domain}" '
            .HostedZones[]
            | select(.Name == "\($domain).")
            | {
                id: .Id,
                name: $domain # Note: _Without_ the final `.`.
            }'
}

# Finds the zone info for a given zone ID.
function find-from-id {
    local id="$1"
    local fullId="${id}"

    if [[ ! "${id}" =~ ^/hostedzone/ ]]; then
        fullId="/hostedzone/${id}"
    fi

    lib aws-json route53 get-hosted-zone --global \
        id="${fullId}" \
        '{ Id: $id }' \
        :: '
            .HostedZone
            | {
                id: .Id,
                name: (.Name | sub("[.]$"; "")) # Drop the final `.`.
            }
        '

    echo "${zoneInfo}"
}


#
# Main script
#

if [[ ${nameOrId} =~ [.] ]]; then
    # It looks like a domain name.
    zoneInfo="$(find-from-domain "${nameOrId}")" \
    || exit "$?"
else
    # It's expected to be an ID.
    zoneInfo="$(find-from-id "${nameOrId}")" \
    || exit "$?"
fi

if [[ ${zoneInfo} == '' ]]; then
    if (( notFoundOk )); then
        exit
    fi
    error-msg "Could not find zone info for: ${nameOrId}"
    exit 1
fi

if [[ ${outputStyle} == 'id' ]]; then
    jget --output=raw "${zoneInfo}" '.id'
else
    jget "${zoneInfo}"
fi
