#!/bin/bash
#
# Copyright 2022-2023 the Milk-prod Authors (Dan Bornstein et alia).
# This project is PROPRIETARY and UNLICENSED.

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<opt> ...] [:: [<out-opt> ...] [<jval-expr> ...]]

    Gets a set of DNS records that match the indicated query, using the Route53
    API (not "front-end" DNS queries). Prints a sequence of JSON results or an
    array thereof (depending on options).

    An optional `::` followed by additional arguments causes the initial output
    to be further processed by `jval`, in a manner analogous to how `aws-json`
    works, see which for details.

    Note: This command only handles regular DNS records, and not aliases or
    other AWS-specific stuff.

    --domain=<name-or-id>
      Main domain to match. Can be either a domain name per se or a Zone ID.
      Required.
    --name=<name>
      Name and subdomain (but not main domain name) to match. Use `.` to indicate
      an apex record. Required.
    --not-found-ok
      Do not report an error if fewer records were found than implied by the
      given number of `--type`s.
    --output=<style> :: array json none
      What to output. This controls the initial output, not postprocessing if
      any (which can specify its own `--output`).
      * `array` -- Output a JSON array (instead of individual objects).
      * `json` -- Output a sequence of JSON objects. This is the default.
      * `none` -- Do not output anything.
    --type=<list>
      A space-separated list of one or more record types (in lower case).
      Required.
    --value=<value>
      Specific value which must be present in the matched records.
'

# Handles JSON `--output` and post-processing arguments.
usual-json-output-args

# Domain to find.
opt-value --required --var=domain --filter='/^[-./a-zA-Z0-9]+$/' domain

# Name to find.
opt-value --required --var=name --filter='/^[-_.a-z0-9]+$/' name

# Ok if not all records found?
opt-toggle --var=notFoundOk not-found-ok

# Types to find.
opt-value --required --var=types --filter='/^[ a-z]+$/' type

# Value required to be in the result.
opt-value --var=findValue --filter='/./' value

process-args "$@" || exit "$?"


#
# Main script
#

# Canonicalize the `name` by ensuring it does not end with a `.`
if [[ ${name} =~ ^(.*)[.]$ ]]; then
    name="${BASH_REMATCH[1]}"
fi

# Canonicalize the `domain` by ensuring it does not end with a `.`
if [[ ${domain} =~ ^(.*)[.]$ ]]; then
    domain="${BASH_REMATCH[1]}"
fi

# Avoid weirdness: Reject `name` if it ends with the domain name.
if [[ ${name} =~ ".${domain}" ]]; then
    error-msg 'Do not append the `--domain` to the `--name`.'
    exit 1
fi

# Convert `types` to a sorted JSON array of uppercase names.
types="$(
    jval types="${types}" '
        $types
        | split(" "; "g")
        | map(select(. != "") | ascii_upcase)
        | sort'
)" \
|| exit "$?"

if [[ ${types} == '[]' ]]; then
    error-msg 'No types listed!'
    usage --short
    exit 1
fi

zoneInfo="$(lib dns find-zone --domain="${domain}")" \
|| exit "$?"

# Extract the domain name and ID. (We need to get the domain name, because the
# original `--domain` might have been specified as an ID.)
zoneId="$(jget --output=raw "${zoneInfo}" '.id')"
domain="$(jget --output=raw "${zoneInfo}" '.name')"

fullName=
if [[ ${name} == '' ]]; then
    fullName="${domain}."
else
    fullName="${name}.${domain}."
fi

resultArray="$(lib aws-json route53 list-resource-record-sets --global \
    fullName="${fullName}" \
    types:json="${types}" \
    zoneId="${zoneId}" '
    {
        HostedZoneId:    $zoneId,
        StartRecordName: $fullName,
        StartRecordType: $types[0]
    }
    +
    if ($types | length) == 1 then
        { MaxItems: "1" }
    else
        .
    end' \
    :: \
    domain="${domain}" \
    findValue="${findValue}" \
    fullName="${fullName}" \
    notFoundOk:json="${notFoundOk}" \
    types:json="${types}" \
    zoneId="${zoneId}" '
    .ResourceRecordSets
    |
    map(select(
        (.Name == $fullName)
        and
        ((.Type as $type | $types | bsearch($type)) >= 0)
    ))
    |
    map({
        domain: $domain,
        fullName: (.Name | sub("[.]$"; "")),
        name:   (
                    .Name[:-($domain | length) - 1]
                    | sub("[.]$"; "")
                    | if . == "" then "." else . end
                ),
        type:   (.Type | ascii_downcase),
        ttl:    .TTL,
        values: (.ResourceRecords | map(.Value)),
        zoneId: $zoneId
    })
    |
    if $findValue == "" then
        .
    else
        # Filter out elements where `.values` does not contain the one we want.
        map(select((.values - [$findValue]) != .values))
    end
    |
    if ($notFoundOk == 1) or (length == ($types | length)) then
        .
    else
        { count: length }
    end
    '
)" \
|| exit "$?"

if [[ ${resultArray} =~ ^'{' ]]; then
    len="$(jget "${resultArray}" '.count')"
    if (( len == 0 )); then
        error-msg 'No matching records found.'
    else
        error-msg "Insufficient matching records found. (Found ${len}.)"
    fi
    exit 1
fi

json-postproc-output "${resultArray}"
