#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage $'
    ${name} [<opt> ...]

    Controls major aspects of one or more instances.

    --do=<action> :: protect-off protect-on reboot start stop terminate
      What action to perform. Must be specified.
    --loc=<region-or-zone>
      Where to look for instances. Must be specified.
    --id=<id-or-name>
      ID or name of the instance(s) to control, as with `find-instance` (see
      which).
    --multiple
      Allow multiple matching instances.
    --not-found-ok
      Do not report an error if there are no matching instances.
    --vpc=<name-or-id>
      VPC where the instance must reside, named as with `find-vpc` (see which).
      If not specified, then this command will find an instance in any VPC (in
      the given location).

    ${name} [--help | -h]

    Displays this message.
'

# Want help?
opt-action --call='{ usage; exit }' help/h

# What to do to the instance(s).
opt-value --required --var=action \
    --enum='protect-off protect-on reboot start stop terminate' do

# Name or ID to look up.
opt-value --var=nameOrId --init='*' --filter='/./' id

# Location (region or availability zone).
opt-value --required --var=location --filter='/[-a-z0-9]+/' loc

# Multiple results?
opt-toggle --var=multipleResults multiple

# Ok if no instances found?
opt-toggle --var=notFoundOk not-found-ok

# VPC to require.
opt-value --var=vpcNameOrId --filter='/./' vpc

process-args "$@" || usage --short


#
# Helper functions
#

# Performs protection or unprotection.
function change-protection {
    local action="$1"
    local ids="$2"

    # Convert `action` to an attribute value.
    local value='error'
    case "${action}" in
        protect-off) value=false ;;
        protect-on)  value=true  ;;
    esac

    # Convert `ids` to a regular array.
    ids=($(jget --output=raw "${ids}" '.[]'))

    local id attrib
    for id in "${ids[@]}"; do
        for attrib in 'DisableApiStop' 'DisableApiTermination'; do
            ec2-json modify-instance-attribute --loc="${location}" \
                id="${id}" \
                attrib="${attrib}" \
                value:json="${value}" \
                '{
                    InstanceId: $id,
                    ($attrib):  { Value: $value }
                }' \
            || return "$?"
        done
    done
}

# Performs major control (rebooting, etc.).
function major-control {
    local action="$1"
    local ids="$2"

    ec2-json "${action}-instances" --loc="${location}" \
        ids:json="${ids}" \
        '{ InstanceIds: $ids }' \
        :: --output=none \
    || return "$?"
}


#
# Main script
#

progress-msg --enable

findArgs=(--loc="${location}" --output=id)
if (( multipleResults )); then
    findArgs+=(--multiple)
fi
if (( notFoundOk )); then
    findArgs+=(--not-found-ok)
fi
if [[ ${vpcNameOrId} != '' ]]; then
    findArgs+=(--vpc="${vpcNameOrId}")
fi
findArgs+=("${nameOrId}")

ids=($(lib find-instance "${findArgs[@]}")) \
|| exit "$?"

case "${action}" in
    protect-off) gerund='Unprotecting'; func=change-protection ;;
    protect-on)  gerund='Protecting';   func=change-protection ;;
    reboot)      gerund='Rebooting';    func=major-control     ;;
    start)       gerund='Starting';     func=major-control     ;;
    stop)        gerund='Stopping';     func=major-control     ;;
    terminate)   gerund='Terminating';  func=major-control     ;;
esac

progress-msg "${gerund} instance(s):"
progress-msg --exec printf '  %s\n' "${ids[@]}"

ids="$(jarray --input=strings "${ids[@]}")"

"${func}" "${action}" "${ids}" \
|| exit "$?"

progress-msg "${gerund}: Done."
