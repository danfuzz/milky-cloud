#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage $'
    ${name} [<opt> ...]

    Controls major aspects of one or more instances.

    --do=<action> :: expire-after expire-off protect-off protect-on reboot start
        stop terminate
      What action to perform. Must be specified.
    --expired
      Limit the results to expired instances only. This is in support for
      commands such as `${name} --do=terminate --expired ...`.
    --id=<id-or-name>
      ID or name of the instance(s) to control, as with `find-instance` (see
      which).
    --loc=<region-or-zone>
      Where to look for instances. Must be specified.
    --multiple
      Allow multiple matching instances.
    --not-found-ok
      Do not report an error if there are no matching instances.
    --time=<secs>
      Salient time of the action, as a Unix Epoch seconds count. Only used for
      `expire-after`.
    --vpc=<name-or-id>
      VPC where the instance must reside, named as with `find-vpc` (see which).
      If not specified, then this command will find an instance in any VPC (in
      the given location).

    ${name} [--help | -h]

    Displays this message.
'

# Want help?
opt-action --call='{ usage; exit }' help/h

# What to do to the instance(s).
opt-value --required --var=action \
    --enum='expire-after expire-off protect-off protect-on reboot start stop terminate' do

# Expired instances only?
opt-toggle --var=expiredOnly expired

# Name or ID to look up.
opt-value --var=nameOrId --init='*' --filter='/./' id

# Location (region or availability zone).
opt-value --required --var=location --filter='/[-a-z0-9]+/' loc

# Multiple results?
opt-toggle --var=multipleResults multiple

# Ok if no instances found?
opt-toggle --var=notFoundOk not-found-ok

# Timestamp in seconds.
opt-value --var=timeSecs --filter='/^[0-9]{10,12}$/' time

# VPC to require.
opt-value --var=vpcNameOrId --filter='/./' vpc

process-args "$@" || usage --short


#
# Helper functions
#

# Performs protection or unprotection.
function change-protection {
    local action="$1"
    local ids="$2"

    # Convert `action` to an attribute value.
    local value='error'
    case "${action}" in
        protect-off) value=false ;;
        protect-on)  value=true  ;;
    esac

    # Convert `ids` to a regular array.
    ids=($(jget --output=raw "${ids}" '.[]'))

    local id attrib
    for id in "${ids[@]}"; do
        for attrib in 'DisableApiStop' 'DisableApiTermination'; do
            ec2-json modify-instance-attribute --loc="${location}" \
                id="${id}" \
                attrib="${attrib}" \
                value:json="${value}" \
                '{
                    InstanceId: $id,
                    ($attrib):  { Value: $value }
                }' \
            || return "$?"
        done
    done
}

# Performs major control (rebooting, etc.).
function major-control {
    local action="$1"
    local ids="$2"

    ec2-json "${action}-instances" --loc="${location}" \
        ids:json="${ids}" \
        '{ InstanceIds: $ids }' \
        :: --output=none \
    || return "$?"
}

# Sets or clears a termination date/time.
function queue-expiry {
    local action="$1"
    local ids="$2"

    local TAG_NAME='expired-after'

    # Convert `action`.
    local cmd='error' tagsJson=''
    case "${action}" in
        expire-after)
            if [[ ${timeSecs} == '' ]]; then
                error-msg 'Missing required option --time.'
                return 1
            fi
            cmd='create-tags'
            local dateStr="$(lib timey print "${timeSecs}" '+%s %Y-%m-%d-%H%M%S')"
            tagsJson="$(lib tag-spec "${TAG_NAME}=${dateStr}")"
            ;;
        expire-off)
            cmd='delete-tags'
            tagsJson="$(lib tag-spec "${TAG_NAME}")"
            ;;
    esac

    ec2-json "${cmd}" --loc="${location}" \
        resources:json="${ids}" \
        tags:json="${tagsJson}" \
        '{ Resources: $resources } + $tags'
}


#
# Main script
#

progress-msg --enable

findArgs=(--loc="${location}" --output=json)
if (( multipleResults )); then
    findArgs+=(--multiple)
fi
if (( notFoundOk )); then
    findArgs+=(--not-found-ok)
fi
if [[ ${vpcNameOrId} != '' ]]; then
    findArgs+=(--vpc="${vpcNameOrId}")
fi
if (( expiredOnly )); then
    findArgs+=(--expired)
fi
findArgs+=("${nameOrId}")

instanceInfo="$(lib find-instance "${findArgs[@]}")" \
|| exit "$?"

if (( notFoundOk && ("$(jlength "${instanceInfo}")" == 0) )); then
    info-msg 'No matching instances found. Not taking action.'
    exit
fi

ids="$(jget "${instanceInfo}" 'map(.id)')" \
|| exit "$?"

case "${action}" in
    expire-after) gerund='Expiring';     func=queue-expiry      ;;
    expire-off)   gerund='Unexpiring';   func=queue-expiry      ;;
    protect-off)  gerund='Unprotecting'; func=change-protection ;;
    protect-on)   gerund='Protecting';   func=change-protection ;;
    reboot)       gerund='Rebooting';    func=major-control     ;;
    start)        gerund='Starting';     func=major-control     ;;
    stop)         gerund='Stopping';     func=major-control     ;;
    terminate)    gerund='Terminating';  func=major-control     ;;
esac

progress-msg "${gerund} instance(s):"
progress-msg --exec jget --output=raw "${ids}" '.[] | "  " + .'

"${func}" "${action}" "${ids}" \
|| exit "$?"

progress-msg "${gerund}: Done."
