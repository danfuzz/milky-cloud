#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage $'
    ${name} [<opt> ...]

    Adds a set of subnets to a VPC -- one per availability zone -- along with
    an associated routing table. Upon success, prints a JSON array of all the
    created subnets.

    --[no-]ipv4
      Include public IPv4 networking. The default is `--ipv4`. (Note: IPv6 usage
      can be determined by observing the VPC info, but not IPv4.)
    --loc=<region-or-zone>
      What region to make the subnets in. Must be specified. If specified as an
      availability zone, only the region portion matters.
    --name=<name>
      Name to use for the created subnets. If not specified, a name is
      generated programatically.
    --progress
      Print progress messages to stderr.
    --quiet (--no-quiet to disable)
      Suppress non-error output to stdout.
    --vpc=<name-or-id>
      Name or ID of the VPC.

    ${name} [--help | -h]

    Displays this message.
'

# Want help?
opt-action --call='{ usage; exit }' help/h

# Do public IPv4?
opt-toggle --var=useIpv4 --init=1 ipv4

# Region, passed as either region per se or availability zone.
opt-value --required --var=region --filter=region-from-location loc

# Name for the subnets.
opt-value --var=name --filter='/./' name

# Progress messages?
opt-toggle --call='{ progress-msg --set="$1" }' progress

# Quiet?
opt-toggle --var=quiet quiet

# Name or ID of the VPC.
opt-value --required --var=vpcNameOrId --filter='/./' vpc

process-args "$@" || usage --short


#
# Helper functions
#

# Extracts a unique-to-network CIDR block from VPC info, or reports `none` or
# `many`.
function extractCidr {
    local vpcInfo="$1"
    local net="$2"

    local field="${net}CidrBlocks"

    jget --output=raw "${vpcInfo}" \
        field="${field}" '
        .[$field]
        |
        if length == 0 then
            "none"
        elif length == 1 then
            .[0]
        else
            "many"
        end
    '
}


#
# Main script
#

azList=($(lib list-availability-zones --loc="${region}")) \
|| exit "$?"

# Get all the VPC info.
vpcInfo="$(lib find-vpc --loc="${region}" --output=json "${vpcNameOrId}")" \
|| exit "$?"

vpcId="$(jget --output=raw "${vpcInfo}" '.id')"

cidr4='none'
v4Subnets=()
if (( useIpv4 )); then
    cidr4="$(extractCidr "${vpcInfo}" ipv4)"
    if [[ ${cidr4} == 'many' ]]; then
        error-msg 'Sorry, cannot deal with multiple CIDRs (IPv4).'
        exit 1
    fi
    v4Subnets=($(lib cidr-calc make-subnets "${cidr4}" "${#azList[@]}"))
fi

cidr6="$(extractCidr "${vpcInfo}" ipv6)"
v6Subnets=()
if [[ ${cidr6} == 'many' ]]; then
    error-msg 'Sorry, cannot deal with multiple CIDRs (IPv6).'
    exit 1
elif [[ ${cidr6} != 'none' ]]; then
    # `64` because AWS requires V6 subnet networks to be exactly 64 bits.
    v6Subnets=($(lib cidr-calc make-subnets "${cidr6}" "${#azList[@]}" 64))
fi

if [[ ${name} == '' ]]; then
    name="$(lib timey now-stamp --suffix=-via-script)"
fi

tagSpec="$(lib tag-spec --type='subnet' --name="${name}")"

progressArg="--progress=$(progress-msg --status)"

# Attributes to set on each subnet.
attributes=(
    PrivateDnsHostnameTypeOnLaunch=resource-name
)
if [[ ${cidr4} != 'none' ]]; then
    attributes+=(
        EnableResourceNameDnsARecordOnLaunch=true
        MapPublicIpOnLaunch=true
    )
fi
if [[ ${cidr6} != 'none' ]]; then
    attributes+=(
        AssignIpv6AddressOnCreation=true
        EnableResourceNameDnsAAAARecordOnLaunch=true
    )
fi

results=()
error=0

for n in "${!azList[@]}"; do
    az="${azList[n]}"
    v4Subnet="${v4Subnets[n]}"
    v6Subnet="${v6Subnets[n]}"
    result="$(ec2-json create-subnet \
        --loc="${region}" \
        az="${azList[n]}" \
        tagSpec:json="${tagSpec}" \
        v4Subnet="${v4Subnets[n]}" \
        v6Subnet="${v6Subnets[n]}" \
        vpcId="${vpcId}" \
        '
        $tagSpec
        +
        {
            AvailabilityZone: $az,
            VpcId: $vpcId
        }
        +
        if $v4Subnet == ""
            then { Ipv6Native: true }
            else { CidrBlock: $v4Subnet }
        end
        +
        if $v6Subnet == ""
            then { }
            else { Ipv6CidrBlock: $v6Subnet }
        end
        ' \
        :: --output=raw '.Subnet.SubnetId' \
    )" \
    || {
        error=1
        break
    }

    results+=("${result}")

    progress-msg "Made subnet: ${result}"

    # Set attributes on the subnet:
    # * AssignIpv6AddressOnCreation: Make instances have an IPv6 address.
    # * EnableResourceNameDnsARecordOnLaunch: Make DNS report an IPv4 address.
    # * EnableResourceNameDnsAAAARecordOnLaunch: Make DNS report an IPv6 address
    #   (it can legitimately report both).
    # * MapPublicIpOnLaunch: Make instances publicly accessible via IPv4 (by
    #   default).
    # * PrivateDnsHostnameTypeOnLaunch: Private DNS name is based on the
    #   instance ID (not private DNS address).
    lib set-attributes \
        --loc="${region}" --id="${result}" "${progressArg}" "${attributes[@]}" \
    && progress-msg "Configured subnet: ${result}" \
    || {
        error=1
        break
    }
done

if (( error )); then
    # Attempt to delete any subnets that had been added.
    error-msg 'Problem creating subnets; attempting cleanup...'

    for id in "${results[@]}"; do
        progress-msg "Removing subnet: ${id}"

        ec2-json delete-subnet \
            --loc="${region}" \
            id="${id}" \
            '{
                SubnetId: $id
            }'
    done

    progress-msg 'Done with post-error subnet cleanup.'

    exit 1
fi

progress-msg "Done making and configuring ${#results[@]} subnets."

if (( !quiet )); then
    jarray --input=strings "${results[@]}"
fi
