#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/init.sh" || exit "$?"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] [<assignment> ...] <filter-expr> ...
      Removes rules from an existing security group, based on given filter
      criteria. Simple filters can be specified via options, or if no such option
      is used, a general filter can be specified via assignment and expression
      arguments, similar to `aws-json`. This filter is expected to accept
      `SecurityGroupRule` objects and then re-output the ones to be removed.

      On success, prints a JSON array of the IDs of all removed rules.

      --all
        Remove all rules.
      --all-egress
        Remove all egress rules.
      --all-ingress
        Remove all ingress rules.
      --loc=<region-or-zone>
        What region to make the security group in. Must be specified. If
        specified as an availability zone, only the region portion matters.
      --quiet
        Suppress non-error output to stdout.
      --security-group=<name-or-id>
        Name or ID of the security group to operate on. Can also be a VPC ID, to
        indicate the default security group for that VPC.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$@"
}

# Want help?
opt-action --call='{ usage }' help/h

# Region, passed as either region per se or availability zone.
opt-value --required --var=region --filter=region-from-location loc

# Name or ID of the security group.
opt-value --required --var=groupNameOrId --filter='/./' security-group

# Simple filter.
opt-choice --var=simpleFilter \
    all='.' \
    all-egress='select(.IsEgress == true)' \
    all-ingress='select(.IsEgress == false)'

# Quiet?
opt-toggle --var=quiet quiet

# Filter arguments.
rest-arg --var=filterArgs filter-exprs

process-args "$@" || usage "$?"

if (( ${#filterArgs[@]} == 0 )); then
    if [[ ${simpleFilter} == '' ]]; then
        error-msg 'Missing filter option or arguments.'
        exit 1
    fi
    filterArgs=("${simpleFilter}")
elif [[ ${simpleFilter} != '' ]]; then
    error-msg 'Cannot specify both filter option and arguments.'
    exit 1
fi


#
# Main script
#

# Validate or find the ID of the security group.
groupId="$(lib find-security-group --loc="${region}" "${groupNameOrId}")" \
|| exit "$?"

allRules="$(ec2-json describe-security-group-rules \
    --loc="${region}" \
    "$(lib filter-spec group-id="${groupId}")" \
    :: '.SecurityGroupRules[]'
)" \
|| exit "$?"

selectedRules="$(
    jval <<<"${allRules}" --input=read -- "${filterArgs[@]}"
)" \
|| exit "$?"

egressRuleIds="$(
    jval <<<"${selectedRules}" --input=slurp \
        'map(select(.IsEgress == true) | .SecurityGroupRuleId)'
)" \
|| exit "$?"

ingressRuleIds="$(
    jval <<<"${selectedRules}" --input=slurp \
        'map(select(.IsEgress == false) | .SecurityGroupRuleId)'
)" \
|| exit "$?"

if [[ ${egressRuleIds} != '[]' ]]; then
    # Non-empty list of egress rules to delete.
    ec2-json revoke-security-group-egress \
        --loc="${region}" \
        groupId="${groupId}" \
        ruleIds:json="${egressRuleIds}" \
        '{
            GroupId: $groupId,
            SecurityGroupRuleIds: $ruleIds
        }' \
        :: --output=none \
    || exit "$?"
fi

if [[ ${ingressRuleIds} != '[]' ]]; then
    # Non-empty list of egress rules to delete.
    ec2-json revoke-security-group-ingress \
        --loc="${region}" \
        groupId="${groupId}" \
        ruleIds:json="${ingressRuleIds}" \
        '{
            GroupId: $groupId,
            SecurityGroupRuleIds: $ruleIds
        }' \
        :: --output=none \
    || exit "$?"
fi

if (( !quiet )); then
    jval \
        ids:json="[${egressRuleIds}, ${ingressRuleIds}]" \
        '$ids | flatten | sort'
fi
