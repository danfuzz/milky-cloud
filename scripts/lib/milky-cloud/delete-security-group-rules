#!/bin/bash
#
# Copyright 2022-2025 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<opt> ...] [<assignment> ...] <filter-expr> ...

    Removes rules from an existing security group, based on given filter
    criteria. Simple filters can be specified via options, or if no such option
    is used, a general filter can be specified via assignment and expression
    arguments, similar to `aws-json`. This filter is expected to accept
    `SecurityGroupRule` objects and then re-output the ones to be removed.

    On success, prints the IDs of all removed rules as JSON.

    --all
      Remove all rules.
    --all-egress
      Remove all egress rules.
    --all-ingress
      Remove all ingress rules.
    --filter=<filter-expr>
      Alternative equivalent to passing <filter-expr> as a single non-option
      argument. It is invalid to use this _and_ pass non-option filter arguments.
    --loc=<region-or-zone>
      What region to make the security group in. Must be specified. If
      specified as an availability zone, only the region portion matters.
    --output=<style> :: array json none
      What to output.
      * `array` -- Output a JSON array (instead of individual objects).
      * `json` -- Output a sequence of JSON objects. This is the default.
      * `none` -- Do not output anything.
    --security-group=<name-or-id>
      Name or ID of the security group to operate on. Can also be a VPC ID, to
      indicate the default security group for that VPC.
'

# Handles JSON `--output`.
usual-json-output-args --no-rest

# Single filter expression, and aliases for specific values.
opt-value --var=simpleFilter --filter='/./' filter
opt-alias all         --filter='.'
opt-alias all-egress  --filter='select(.IsEgress == true)'
opt-alias all-ingress --filter='select(.IsEgress == false)'

# Region, passed as either region per se or availability zone.
opt-value --required --var=region --filter=region-from-location-filter loc

# Name or ID of the security group.
opt-value --required --var=groupNameOrId --filter='/./' security-group

# Filter arguments.
rest-arg --var=filterArgs filter-exprs

process-args "$@" || exit "$?"

if (( ${#filterArgs[@]} == 0 )); then
    if [[ ${simpleFilter} == '' ]]; then
        error-msg 'Missing filter option or arguments.'
        exit 1
    fi
    filterArgs=("${simpleFilter}")
elif [[ ${simpleFilter} != '' ]]; then
    error-msg 'Cannot specify both filter option and arguments.'
    exit 1
fi


#
# Main script
#

# Validate or find the ID of the security group.
groupId="$(lib find-security-group --loc="${region}" "${groupNameOrId}")" \
|| exit "$?"

allRules="$(ec2-json describe-security-group-rules \
    --loc="${region}" \
    "$(lib filter-spec group-id="${groupId}")" \
    :: '.SecurityGroupRules[]'
)" \
|| exit "$?"

selectedRules="$(
    jval <<<"${allRules}" --input=read -- "${filterArgs[@]}"
)" \
|| exit "$?"

egressRuleIds="$(
    jval <<<"${selectedRules}" --input=slurp \
        'map(select(.IsEgress == true) | .SecurityGroupRuleId)'
)" \
|| exit "$?"

ingressRuleIds="$(
    jval <<<"${selectedRules}" --input=slurp \
        'map(select(.IsEgress == false) | .SecurityGroupRuleId)'
)" \
|| exit "$?"

if [[ ${egressRuleIds} != '[]' ]]; then
    # Non-empty list of egress rules to delete.
    ec2-json revoke-security-group-egress \
        --loc="${region}" \
        groupId="${groupId}" \
        ruleIds:json="${egressRuleIds}" \
        '{
            GroupId: $groupId,
            SecurityGroupRuleIds: $ruleIds
        }' \
        :: --output=none \
    || exit "$?"
fi

if [[ ${ingressRuleIds} != '[]' ]]; then
    # Non-empty list of egress rules to delete.
    ec2-json revoke-security-group-ingress \
        --loc="${region}" \
        groupId="${groupId}" \
        ruleIds:json="${ingressRuleIds}" \
        '{
            GroupId: $groupId,
            SecurityGroupRuleIds: $ruleIds
        }' \
        :: --output=none \
    || exit "$?"
fi

resultArray="$(jval \
    ids:json="[${egressRuleIds}, ${ingressRuleIds}]" \
    '$ids | flatten | sort'
)"

json-postproc-output "${resultArray}"
