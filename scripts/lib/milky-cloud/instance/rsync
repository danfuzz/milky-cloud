#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"

#
# Argument parsing
#

define-usage $'
    ${name} [<opt> ...] <rsync-arg> ...

    Uses `rsync` to copy files to or from the indicated instance, using
    `instance ssh` to make the connection (see which for details).

    Options passed through to `rsync`: --archive --checksum --delete --verbose
    Options passed through to `instance ssh`: --announce --default-loc
      --default-userid --default-vpn --key --secret

    --ssh-cmd=<path>
      Path to an alternative SSH command to use. Must be argument-compatible
      with `instance ssh`.

    ${name} [--help | -h]

    Displays this message.
'

# Want help?
opt-action --call='{ usage; exit }' help/h

# Used when this script calls through to itself via `rsync`.
opt-toggle --var=fromRsync from-rsync

# Alternative SSH command.
opt-value --var=sshCmd --filter='/./' ssh-cmd

# Passed through to `rsync`.
rsyncOpts=()
opt-toggle --call='{ rsyncOpts+=(--archive="$1") }' archive
opt-toggle --call='{ rsyncOpts+=(--checksum="$1") }' checksum
opt-toggle --call='{ rsyncOpts+=(--delete="$1") }' delete
opt-toggle --call='{ rsyncOpts+=(--verbose="$1") }' verbose

# Passed through to `instance ssh` (or the `--ssh-cmd`).
sshOpts=()
opt-toggle --call='{ sshOpts+=(--announce="$1") }' announce
opt-value --call='{ sshOpts+=(--default-loc="$1") }' default-loc
opt-value --call='{ sshOpts+=(--default-userid="$1") }' default-userid
opt-value --call='{ sshOpts+=(--default-vpc="$1") }' default-vpc
opt-value --call='{ sshOpts+=(--key="$1") }' key
opt-value --call='{ sshOpts+=(--secret="$1") }' secret

# Main arguments.
rest-arg --var=args arg

process-args "$@" || usage --short


#
# Helper functions
#

# Constructs and performs the call to `rsync`.
function call-rsync {
    local rshCmd=("$(this-cmd-path)" --from-rsync)

    if [[ ${sshCmd} != '' ]]; then
        if [[ !((-f ${sshCmd}) && (-x ${sshCmd})) ]]; then
            error-msg "Cannot execute \`ssh-cmd\`: ${sshCmd}"
            exit 1
        fi
        rshCmd+=(--ssh-cmd="${sshCmd}")
    fi

    rshCmd+=(--)

    local opt
    for opt in "${sshOpts[@]}"; do
        rshCmd+=("$(base64 <<<"${opt}")")
    done
    rshCmd+=('::')

    # Note: The main reason `--omit-dir-times` is being used here is to avoid
    # `rsync` always saying (when `--verbose`) that directories are updated even
    # when no files changed in them, in the case where date stamps don't match
    # (e.g. when sync'ing a rebuilt set of files).
    local rsyncCmd=(
        rsync --rsh="${rshCmd[*]}" --omit-dir-times "${rsyncOpts[@]}" --
    )

    exec "${rsyncCmd[@]}" "$@"
}

# Handles the inner callback from `rsync` to this script.
function rsync-callback {
    local sshFullCmd=()

    if [[ ${sshCmd} == '' ]]; then
        sshFullCmd+=("$(lib --path instance ssh)") || return "$?"
    else
        sshFullCmd+=("${sshCmd}")
    fi

    local arg
    while (( $# > 0 )); do
        arg="$1"
        shift

        if [[ ${arg} == '::' ]]; then
            break
        fi

        sshFullCmd+=("$(base64 <<<"${arg}" --decode)")
    done

    local sshTarget=''
    if [[ $1 == '-l' ]]; then
        # This is the userid to log in as.
        sshTarget="$2@"
        shift 2
    fi

    local sshHost="$1"
    shift
    sshTarget+="${sshHost}"

    sshFullCmd+=(--script -- "${sshTarget}" "$@")

    exec "${sshFullCmd[@]}"
}


#
# Main script
#

# What's going on: The "rsh" command passed to `rsync` is a single string, with
# non-standard rules about how to do special-character quoting. Rather than deal
# with this directly, we just base64-encode the `instance ssh` arguments, and
# tell `rsync` to call back to this script. When we get called back, we both
# deal with the argument decoding _and_ interpreting the normal `rsh`/`ssh`
# arguments it passes.

if (( fromRsync )); then
    # We are being called from within `rsync`.
    rsync-callback "${args[@]}"
else
    # We need to build up an "rsh" command and call `rsync` with it.
    call-rsync "${args[@]}"
fi
