#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"

#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<opt> ...] <rsync-arg> ...

    Uses `rsync` to copy files to or from the indicated instance, using
    `instance ssh` to make the connection (see which for details).

    Options passed through to `rsync`: --archive --checksum --delete --verbose
    Options passed through to `instance ssh`: --announce --default-loc
      --default-userid --default-vpn --key --secret

    --ssh-cmd=<path>
      Path to an alternative SSH command to use. Must be argument-compatible
      with `instance ssh`.
'

# Used when this script calls through to itself via `rsync`.
opt-toggle --var=fromRsync from-rsync

# Alternative SSH command.
opt-value --var=sshCmd --filter='/./' ssh-cmd

# Passed through to `rsync` (after interpretation).
rsyncOpts=()
opt-toggle --call='{ rsyncOpts+=(--archive="$1") }' archive
opt-toggle --call='{ rsyncOpts+=(--checksum="$1") }' checksum
opt-toggle --call='{ rsyncOpts+=(--delete="$1") }' delete
opt-toggle --call='{ rsyncOpts+=(--verbose="$1") }' verbose

# Passed through to `instance ssh` (or the `--ssh-cmd`).
sshOpts=()
opt-toggle --call='{ sshOpts+=(--announce="$1") }' announce
opt-value --call='{ sshOpts+=(--default-loc="$1") }' default-loc
opt-value --call='{ sshOpts+=(--default-userid="$1") }' default-userid
opt-value --call='{ sshOpts+=(--default-vpc="$1") }' default-vpc
opt-value --call='{ sshOpts+=(--key="$1") }' key
opt-value --call='{ sshOpts+=(--secret="$1") }' secret

# Main arguments.
rest-arg --var=args arg

process-args "$@" || exit "$?"


#
# Helper functions
#

# Constructs and performs the call to `rsync`.
function call-rsync {
    local rshCmd=("$(rsh-quote "$(this-cmd-path)")" --from-rsync)

    if [[ ${sshCmd} != '' ]]; then
        if [[ !((-f ${sshCmd}) && (-x ${sshCmd})) ]]; then
            error-msg "Cannot execute \`ssh-cmd\`: ${sshCmd}"
            exit 1
        fi
        rshCmd+=("$(rsh-quote --ssh-cmd="${sshCmd}")")
    fi

    rshCmd+=(--)

    local opt
    for opt in "${sshOpts[@]}"; do
        rshCmd+=("$(rsh-quote "${opt}")")
    done
    rshCmd+=('::')

    # Note: The main reason `--omit-dir-times` is being used here is to avoid
    # `rsync` always saying (when `--verbose`) that directories are updated even
    # when no files changed in them, in the case where date stamps don't match
    # (e.g. when sync'ing a rebuilt set of files).
    local rsyncCmd=(
        rsync --rsh="${rshCmd[*]}" --omit-dir-times
    )

    # `rsyncOpts` elements are in the form `--<opt>=<N>` with `N` either `0` or
    # `1`, but the actual `rsync` command wants `--<opt>` or `--no-<opt>`.
    local opt
    for opt in "${rsyncOpts[@]}"; do
        if [[ ${opt} =~ ^--([^=]+)=(0|1)$ ]]; then
            local maybeNo=''
            if [[ ${BASH_REMATCH[2]} == '0' ]]; then
                maybeNo='no-'
            fi
            rsyncCmd+=("--${maybeNo}${BASH_REMATCH[1]}")
        fi
    done

    rsyncCmd+=(--)

    exec "${rsyncCmd[@]}" "$@"
}

# Handles the inner callback from `rsync` to this script.
function rsync-callback {
    local sshFullCmd=()

    if [[ ${sshCmd} == '' ]]; then
        sshFullCmd+=("$(lib --path instance ssh)") || return "$?"
    else
        sshFullCmd+=("${sshCmd}")
    fi

    local arg
    while (( $# > 0 )); do
        arg="$1"
        shift

        if [[ ${arg} == '::' ]]; then
            break
        fi

        sshFullCmd+=("${arg}")
    done

    local sshTarget=''
    if [[ $1 == '-l' ]]; then
        # This is the userid to log in as.
        sshTarget="$2@"
        shift 2
    fi

    local sshHost="$1"
    shift
    sshTarget+="${sshHost}"

    sshFullCmd+=(--script -- "${sshTarget}" "$@")

    exec "${sshFullCmd[@]}"
}

# Quotes an argument so it can be passed via the `--rsh` option to `rsync` and
# then be received on the other side as a single argument. Note that the rules
# for this quoting are _not_ the same as regular shell quoting. (The rules are
# documented on the `rsync` manpage, in the full description of the option.)
function rsh-quote {
    local arg="$1"

    if ! [[ ${arg} =~ [\ \'\"] ]]; then
        # Nothing needs to be quoted.
        printf '%s' "${arg}"
        return
    fi

    # For simplicity we pick single-quote as the wrapper (even though maybe
    # double-quote might have turned out to be a more efficient choice in some
    # cases). As such, we need to double each single-quote, and wrap the whole
    # argument in them too.

    local processed=''

    while [[ ${arg} =~ ^([^\']*)\'(.*)$ ]]; do
        local prefix="${BASH_REMATCH[1]}"
        local suffix="${BASH_REMATCH[2]}"
        processed+="${prefix}''"
        arg="${suffix}"
    done

    processed="'${processed}${arg}'"

    printf '%s' "${processed}"
}


#
# Main script
#

# What's going on: The "rsh" command passed to `rsync` is a single string, with
# non-standard rules about how to do special-character quoting. We construct an
# appropriately-quoted command string which calls back to this very script, at
# which point we use the embedded arguments to make the ultimate call to
# `instance ssh` arguments.

if (( fromRsync )); then
    # We are being called from within `rsync`.
    rsync-callback "${args[@]}"
else
    # We need to build up an "rsh" command and call `rsync` with it.
    call-rsync "${args[@]}"
fi
