#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage $'
    ${name} [<opt> ...] [:: [<out-opt> ...] [<jval-expr> ...]]

    Finds one or more instances by name or ID, with optional extra criteria, and
    prints some information about them. <name-or-id> accepts `*` as a wildcard
    character.

    Without `--multiple`, the result is a JSON object of information about the
    one instance found (or no output if there was no match). With `--multiple`,
    the result is always an array of information objects, which can have any
    number of elements (including zero or one).

    An optional `::` followed by additional arguments causes the initial output
    to be further processed by `json-val`, in a manner analogous to how
    `aws-json` works, see which for details.

    --attributes
      Add info about useful attributes (as in `ec2 describe-instance-attribute`)
      to the results. (This is not done by default because it is unfortunately
      heavyweight, requiring two additional AWS API calls per result.)
    --default-loc=<region-or-zone>
      Location to use if one is not specified in the `--id`.
    --default-vpc=<id-spec>
      VPC ID to use if one is not specified in the `--id`. Accepts wildcards.
    --expired=<choice> :: `exclude` `include` `only`
      Whether or not to include expired instances, or _only_ include them.
      Default `exclude`.
    --id=<id-spec>
      Identifier for the instance or instances to find. This can take any of
      these forms, including wildcards for any portion except for zone/region:
      * `<id-or-name>` -- Instance ID or name. `--default-loc` must have been
        passed. Will use `--default-vpc` if specified or if not will find
        instances in any VPC.
      * `<id-or-name>.<vpc-id>` -- Instance and VPC IDs (or names).
        `--default-loc` must have been passed.
      * `<id-or-name>.<vpc-id>.<region-or-zone>` -- Fully-specified.
      * `<id-or-name>.<region-or-zone>` -- Instance ID and location. Will use
        `--default-vpc` if specified or if not will find instances in any VPC.
    --multiple
      Allow multiple results? Implies `--not-found-ok`.
    --not-found-ok
      Do not report an error if there are no matching instances.
    --terminated=<choice> :: exclude include only
      Whether or not to include terminated instances, or _only_ include them.
      Default `exclude`.

    ${name} [--help | -h]

    Displays this message.
'

# Want help?
opt-action --call='{ usage; exit }' help/h

# Add attribute info?
opt-toggle --var=addAttributes attributes

# Default location (region or zone).
opt-value --var=defaultLocation --filter='/./' default-loc

# Default VPC (name or ID).
opt-value --var=defaultVpc --init='*' --filter='/./' default-vpc

# Expired instance inclusion.
opt-value --var=expired --init='exclude' --enum='exclude include only' expired

# ID spec of the instance(s), per docs (above).
opt-value --required --var=idSpec --filter='/[-.*a-zA-Z0-9]+/' id

# Multiple results?
opt-toggle --var=multipleResults multiple

# Ok if no instance found?
opt-toggle --var=notFoundOk not-found-ok

# Terminated instance inclusion.
opt-value --var=terminated --init='exclude' --enum='exclude include only' terminated

# Optional post-processing arguments.
rest-arg --var=postArgs post-arg

process-args "$@" || usage --short

if (( ${#postArgs[@]} != 0 )) && [[ ${postArgs[0]} != '::' ]]; then
    error-msg 'First post-processing argument must be `::`.'
    usage --short
    exit 1
fi

if (( multipleResults )); then
    notFoundOk=1
fi


#
# Helper functions
#

# Add attribute info to the given list of instance info.
function add-attributes {
    local infoJson="$1"

    local ids=($(jget --output=raw "${infoJson}" '.[] | .id'))
    local atts=()

    if (( ${#ids[@]} == 0 )); then
        # No actual results to add to.
        echo "${infoJson}"
        return
    fi

    local id attStop attTerm
    for id in "${ids[@]}"; do
        attStop="$(
            ec2-json describe-instance-attribute --loc="${location}" \
                id="${id}" '{
                    InstanceId: $id,
                    Attribute:  "disableApiStop"
                }' :: '.DisableApiStop.Value'
        )" \
        || return "$?"
        attTerm="$(
            ec2-json describe-instance-attribute --loc="${location}" \
                id="${id}" '{
                    InstanceId: $id,
                    Attribute:  "disableApiTermination"
                }' :: '.DisableApiTermination.Value'
        )" \
        || return "$?"
        atts+=("$(
            jval attStop:json="${attStop}" attTerm:json="${attTerm}" \
                '{ disableApiStop: $attStop, disableApiTermination: $attTerm }'
        )")
    done

    jval \
        atts:json="$(jarray "${atts[@]}")" \
        info:json="${infoJson}" '
        [$info, $atts] | transpose | map({ attributes: .[1] } + .[0])
    '
}

# Filter the given list of instance info, based on expiry information.
function filter-expired {
    local choice="$1"
    local infoJson="$2"

    local nowSecs="$(lib timey secs now)"

    jget "${infoJson}" \
        choice="${choice}" \
        nowSecs:json="${nowSecs}" '
        def isExpired:
            if .expiredAfter then
                (.expiredAfter | match("^[0-9]+").string | fromjson) < $nowSecs
            else
                false
            end
        ;
        if $choice == "only" then
            map(select(isExpired))
        else
            map(select(isExpired | not))
        end
    '
}

# Filter the given list of instance info, based on termination state.
function filter-terminated {
    local choice="$1"
    local infoJson="$2"

    jget "${infoJson}" \
        choice="${choice}" '
        def isTerminated: .state == "terminated";
        if $choice == "only" then
            map(select(isTerminated))
        else
            map(select(isTerminated | not))
        end
    '
}


#
# Main script
#

# Parse the `idSpec` into components, and fill in with defaults as necessary.

if [[ !(${idSpec} =~ ^([^.]+)([.][^.]+)?([.][^.]+)?$) ]]; then
    error-msg "Could not parse ID: ${idSpec}"
    exit 1
fi

instanceSpec="${BASH_REMATCH[1]}"
vpcSpec="${BASH_REMATCH[2]:1}"  # `:1` to drop the initial `.`.
location="${BASH_REMATCH[3]:1}" # `:1` to drop the initial `.`.

if [[ ${location} == '' ]]; then
    if lib parse-location --quiet "${vpcSpec}"; then
        # "VPC" is actually a location.
        location="${vpcSpec}"
        vpcSpec=''
    elif [[ ${defaultLocation} == '' ]]; then
        error-msg "Missing location in ID (no default given): ${idSpec}"
        exit 1
    else
        location="${defaultLocation}"
    fi
fi

locJson="$(lib parse-location --quiet --output=json "${location}")" \
|| {
    error-msg "Invalid location in ID: ${location}"
    exit 1
}

region="$(jget --output=raw "${locJson}" '.region')"
zone="$(jget --output=raw "${locJson}" '.zone // ""')"

if [[ ${vpcSpec} == '' ]]; then
    if [[ ${defaultVpc} == '' ]]; then
        error-msg "Missing VPC spec in ID (no default given): ${idSpec}"
        exit 1
    fi
    vpcSpec="${defaultVpc}"
fi

# Set up filter arguments for the `describe-instances` call.

filters=()

if is-instance-id "${instanceSpec}"; then
    filters+=(instance-id="${instanceSpec}")
else
    filters+=(tag:Name="${instanceSpec}")
fi

vpcName=''
if is-vpc-id "${vpcSpec}"; then
    filters+=(vpc-id="${vpcSpec}")
elif [[ ${vpcSpec} != '*' ]]; then
    # Can't filter on VPC name, so we have to look up the VPC.
    vpcInfo="$(lib find-vpc --output=json --loc="${location}" "${vpcSpec}")" \
    || exit "$?"
    vpcId="$(jget --output=raw "${vpcInfo}" '.VpcId')"
    vpcName="$(jget --output=raw "${vpcInfo}" \
        '(.Tags | map(select(.Key == "Name") | .Value)[0]) // ""'
    )"
    filters+=(vpc-id="${vpcId}")
fi

if [[ ${zone} != '' ]]; then
    filters+=(availability-zone="${zone}")
fi

if [[ ${expired} == 'only' ]]; then
    # This limits results to those with the salient tag, but then we have to
    # filter based on the actual tag value.
    filters+=(tag-key='expired-after')
fi

# Get the initial array of results.

resultArray="$(ec2-json describe-instances --loc="${location}" \
    "$(lib filter-spec "${filters[@]}")" \
    :: \
        region="${region}" \
        vpcName="${vpcName}" '
    [.Reservations[].Instances[] | {
        expiredAfter:   (.Tags | map(select(.Key == "expired-after") | .Value)[0]),
        fullName:       "filled-in-below",
        hostPublicKey:  (.Tags | map(select(.Key == "host-public-key") | .Value)[0]),
        id:             .InstanceId,
        ipv6Address:    (.NetworkInterfaces[].Ipv6Addresses[0].Ipv6Address),
        name:           (.Tags | map(select(.Key == "Name") | .Value)[0]),
        nameDotRegion:  "filled-in-below",
        privateAddress: .PrivateIpAddress,
        publicAddress:  .PublicIpAddress,
        region:         $region,
        state:          .State.Name,
        subnet:         .SubnetId,
        vpc:            .VpcId,
        vpcName:        .VpcId,
        zone:           .Placement.AvailabilityZone
    }
    | .fullName = .name + "." + .vpcName + "." + .region
    | .nameDotRegion = .name + "." + .region
    |
    if $vpcName != "" then
        .vpcName = $vpcName
    else . end
    ]'
)" \
|| exit "$?"

# Perform initial post-processing.

if [[ ${terminated} != 'include' ]]; then
    # It's more straightforward to filter out terminated instances as a
    # post-processing step than to try to construct a filter for them, because
    # the AWS API doesn't have a way to say "not this value" in its filters.
    resultArray="$(filter-terminated "${terminated}" "${resultArray}")" \
    || exit "$?"
fi

if [[ ${expired} != 'include' ]]; then
    resultArray="$(filter-expired "${expired}" "${resultArray}")" \
    || exit "$?"
fi

if (( addAttributes )); then
    # This is a heavyweight operation, which is why we don't just always do it.
    resultArray="$(add-attributes "${resultArray}")" \
    || exit "$?"
fi

resultLength="$(jlength "${resultArray}")" \
|| exit "$?"

if (( (resultLength == 0) && !notFoundOk )); then
    error-msg 'No matching instances found.'
    exit 1
elif (( (resultLength > 1) && !multipleResults )); then
    error-msg 'Ambiguous search matches all of:'
    error-msg --exec jget --output=raw "${resultArray}" '.[] | "  " + .id'
    exit 1
fi

if (( multipleResults )); then
    result="${resultArray}"
else
    # Extract the only result in the array.
    result="$(jget "${resultArray}" '.[0]')"
fi

# Perform client-directed post-processing if any.

if (( ${#postArgs[@]} == 0 )); then
    jget "${result}"
else
    error-msg 'Post-processing not yet available. Sorry!'
    exit 1
fi
