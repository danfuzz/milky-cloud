#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"
. "$(this-cmd-dir)/control-help.sh"

# Which key algorithm to find.
KEY_ALGORITHM='ed25519'

# The tag name to store keys in.
TAG_NAME='host-public-key'


#
# Argument parsing
#

define-usage $'
    ${name} [<opt> ...] [:: [<out-opt> ...] [<jval-expr> ...]]

    Extracts the SSH host public key from one or more instances, storing it in
    the appropriately-named tag. Most options are passed through to `instance
    info` to determine which instance(s) to act on.

    By default, this command prints the result of the `instance info` which
    selected instances. This can be altered via the `--output=<style>` option and
    any post-processing arguments.

    Details: This extracts just the host public key for the ED25519 algorithm
    (which has gloriously short keys), and it does so by looking at the console
    output from the instance.

    Options passed through to `instance info`:
      --attributes
      --default-loc=<region-or-zone>
      --default-vpc=<id-spec>
      --expired=<choice> :: `exclude` `include` `only`
      --id=<id-spec>
      --multiple
      --not-found-ok
      --output (sort of; applies to final output)
      --protected

    ${name} [--help | -h]

    Displays this message.
'

# Want help?
opt-action --call='{ usage; exit }' help/h

# Options and arguments passed through to `instance info`.
usual-info-args

process-args "$@" || usage --short


#
# Helper functions
#

# Key extraction implementation, plugged into the control skeleton.
function extract-impl {
    local infoJson
    local loc

    while (( $# > 0 )); do
        case "$1" in
            --info=*) infoJson="${1#*=}" ;;
            --loc=*)  loc="${1#*=}"      ;;
            *)
                error-msg $'Shouldn\'t happen!'
                return 1
        esac
        shift
    done

    progress-msg 'Status:'

    # Extract the `id`s of the instances, as a regular Bash array.
    local ids=($(jget --output=raw "${infoJson}" '.[] | .id'))

    local trouble=()

    local i
    for i in "${!ids[@]}"; do
        local id="${ids[i]}"
        local info="$(
            jget "${infoJson}" id="${id}" '.[] | select(.id == $id)'
        )"

        function _msg-callback {
            progress-msg "  ${id}: $1"
        }

        if ! extract-one "${info}" _msg-callback; then
            trouble+=("${id}")
        fi

        unset -f _msg-callback
    done

    if (( ${#trouble[@]} != 0 )); then
        error-msg 'Trouble with:'
        error-msg --exec printf '  %s\n' "${trouble[@]}"
        return 1
    fi
}

# Extracts just one instance's key.
function extract-one {
    local infoJson="$1"
    local msg="$2"

    local key="$(jget --output=raw "${info}" '.hostPublicKey // ""')"
    local id="$(jget --output=raw "${info}" '.id')"
    local zone="$(jget --output=raw "${info}" '.zone')"
    local idZone="${id}.${zone}"

    if [[ ${key} != '' ]]; then
        "${msg}" 'Already extracted.'
        return
    fi

    "${msg}" 'Extracting...'

    local attempt
    for (( attempt = 0; attempt < 45; attempt++ )); do
        if (( attempt < 10 )); then
            if (( attempt == 2 )); then
                "${msg}" 'This can take five minutes...'
            elif (( attempt == 3 )); then
                "${msg}" 'Patience is a virtue...'
            fi
        elif (( (attempt % 5) == 0 )); then
            "${msg}" 'Still waiting...'
        fi

        key="$(try-extraction "${zone}" "${id}")" \
        || return "$?"

        if [[ ${key} != '' ]]; then
            break
        fi

        sleep 10
    done

    if [[ ${key} == '' ]]; then
        "${msg}" 'Could not retrieve.'
        return 1
    fi

    "${msg}" "Got ${KEY_ALGORITHM} key:"
    "${msg}" "  ${key:0:15}...${key:${#key}-15:15}"

    save-key "${zone}" "${id}" "${key}" \
    || return "$?"

    "${msg}" "Saved to tag \`${TAG_NAME}\`."
}

# Saves a key to the designated instance tag.
function save-key {
    local zone="$1"
    local id="$2"
    local key="$3"

    local sshAuth="ssh-${KEY_ALGORITHM} ${key}"

    ec2-json create-tags --loc="${zone}" \
        id="${id}" \
        tagSpec:json="$(lib tag-spec "${TAG_NAME}=${sshAuth}")" \
        '{ Resources: [$id] } + $tagSpec'
}

# Makes one attempt at extraction.
function try-extraction {
    local zone="$1"
    local id="$2"

    ec2-json get-console-output --loc="${zone}" \
        id="${id}" \
        '{ InstanceId: $id }' \
        :: --output=raw \
            alg="${KEY_ALGORITHM}" \
        '
          (.Output // "")
        | split("\n")
        | (index("-----BEGIN SSH HOST KEY KEYS-----") + 1) as $startIndex
        | index("-----END SSH HOST KEY KEYS-----") as $endIndex
        | .[$startIndex:$endIndex]
        | map(split(" ") | select(.[0] == "ssh-" + $alg) | .[1])
        | .[0] // ""
        '
}


#
# Main script
#

instance-control-skeleton --full-info 'Extracting host keys' extract-impl
