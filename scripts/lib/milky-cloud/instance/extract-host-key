#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"
. "$(this-cmd-dir)/control-help.sh"


#
# Argument parsing
#

define-usage $'
    ${name} [<opt> ...] [:: [<out-opt> ...] [<jval-expr> ...]]

    Extracts the SSH host public key from one or more instances, storing it in
    the appropriately-named tag. Most options are passed through to `instance
    info` to determine which instance(s) to act on.

    By default, this command prints the result of the `instance info` which
    selected instances. This can be altered via the `--output=<style>` option and
    any post-processing arguments.

    Details: This extracts just the host public key for the ED25519 algorithm
    (which has gloriously short keys), and it does so by looking at the console
    output from the instance.

    Options passed through to `instance info`:
      --attributes
      --default-loc=<region-or-zone>
      --default-vpc=<id-spec>
      --expired=<choice> :: `exclude` `include` `only`
      --id=<id-spec>
      --multiple
      --not-found-ok
      --output (sort of; applies to final output)

    ${name} [--help | -h]

    Displays this message.
'

# Want help?
opt-action --call='{ usage; exit }' help/h

# Options and arguments passed through to `instance info`.
usual-info-args

process-args "$@" || usage --short


#
# Helper functions
#

# Key extraction implementation, plugged into the control skeleton.
function extract-impl {
    local infoJson
    local loc

    while (( $# > 0 )); do
        case "$1" in
            --info=*) infoJson="${1#*=}" ;;
            --loc=*)  loc="${1#*=}"      ;;
            *)
                error-msg $'Shouldn\'t happen!'
                return 1
        esac
        shift
    done

    progress-msg 'Status:'

    # Extract the `id`s of the instances, as a regular Bash array.
    local ids=($(jget --output=raw "${infoJson}" '.[] | .id'))

    local trouble=()

    local i
    for i in "${!ids[@]}"; do
        local id="${ids[i]}"
        local info="$(
            jget "${infoJson}" id="${id}" '.[] | select(.id == $id)'
        )"

        function _msg-callback {
            progress-msg "  ${id}: $1"
        }

        if ! extract-one "${info}" _msg-callback; then
            trouble+=("${id}")
        fi

        unset -f _msg-callback
    done

    if (( ${#trouble[@]} != 0 )); then
        error-msg 'Trouble with:'
        error-msg --exec printf '  %s\n' "${trouble[@]}"
        return 1
    fi
}

# Extracts just one instance's key.
function extract-one {
    local infoJson="$1"
    local msg="$2"

    local key="$(jget --output=raw "${info}" '.hostPublicKey // ""')"
    local idZone="$(jget --output=raw "${info}" '"\(.id).\(.zone)"')"

    if [[ ${key} != '' ]]; then
        _msg-callback 'already extracted'
        return
    fi

    _msg-callback 'TODO'
    return 1
}


#
# Main script
#

instance-control-skeleton --full-info 'Extracting host keys' extract-impl

exit 1
##########################################
# OLD STUFF

# Extracts the host public key for ED25519 from the console logs.
function extract-host-key {
    local instanceId="$1"
    local keyAlgorithm='ed25519'

    progress-msg 'Extracting host public key...'

    local attempt=0
    local key=''
    while [[ ${key} == '' ]]; do
        (( attempt++ ))
        if (( attempt != 1 )); then
            if (( attempt == 2 )); then
                progress-msg 'This can take a while...'
            elif (( (attempt % 6) == 0 )); then
                progress-msg 'Still waiting for console output...'
            fi
            sleep 10
        fi
        local key
        key="$(
            ec2-json get-console-output --loc="${zone}" \
                id="${instanceId}" \
                '{ InstanceId: $id }' \
                :: --output=raw \
                    alg="${keyAlgorithm}" \
                '
                  (.Output // "")
                | split("\n")
                | (index("-----BEGIN SSH HOST KEY KEYS-----") + 1) as $startIndex
                | index("-----END SSH HOST KEY KEYS-----") as $endIndex
                | .[$startIndex:$endIndex]
                | map(split(" ") | select(.[0] == "ssh-" + $alg) | .[1])
                | .[0] // ""
                '
        )" \
        || return "$?"
    done

    progress-msg "Got ${keyAlgorithm} key:"
    progress-msg "  ${key}"

    local sshAuth="ssh-${keyAlgorithm} ${key}"
    local tagName='host-public-key'
    ec2-json create-tags --loc="${zone}" \
        id="${instanceId}" \
        tagSpec:json="$(lib tag-spec "${tagName}=${sshAuth}")" \
        '{ Resources: [$id] } + $tagSpec' \
    || return "$?"

    progress-msg "Key stored as instance tag \`${tagName}\`."
}
