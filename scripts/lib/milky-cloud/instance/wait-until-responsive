#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"
. "$(this-cmd-dir)/control-help.sh"


#
# Argument parsing
#

define-usage $'
    ${name} [<opt> ...] [:: [<out-opt> ...] [<jval-expr> ...]]

    Waits until one or more instances are all responsive. "Responsive" in this
    case means that an instance is in state `running` and can answer an SSH
    connection enough to provide its host keys. Most options are passed through
    to `instance info` to determine which instance(s) to act on.

    By default, this command prints the result of the `instance info` which
    selected instances. This can be altered via the `--output=<style>` option and
    any post-processing arguments.

    --[no-]check-host-keys
      Compare the host keys with what is stored in the instances\' corresponding
      tag. This is _on_ by default.

    Options passed through to `instance info`:
      --attributes
      --default-loc=<region-or-zone>
      --default-vpc=<id-spec>
      --expired=<choice> :: `exclude` `include` `only`
      --id=<id-spec>
      --multiple
      --not-found-ok
      --output (sort of; applies to final output)

    ${name} [--help | -h]

    Displays this message.
'

# Want help?
opt-action --call='{ usage; exit }' help/h

# Options and arguments passed through to `instance info`.
usual-info-args

# Check the host keys?
opt-toggle --var=checkHostKeys --init=1 check-host-keys

process-args "$@" || usage --short


#
# Helper functions
#

# Waits for just one instance to be in state `running`.
function wait-for-one-running {
    local infoJson="$1"
    local msg="$2"

    local state="$(jget --output=raw "${info}" '.state')"
    local idZone="$(jget --output=raw "${info}" '"\(.id).\(.zone)"')"

    if [[ ${state} == 'running' ]]; then
        _msg-callback 'already running'
        return
    fi

    while true; do
        state="$(
            lib instance info --not-found-ok --id="${idZone}" \
                :: --output=raw '.state'
        )" \
        || return "$?"

        if [[ ${state} == '' ]]; then
            # Shouldn't happen.
            "${msg}" 'no such instance?'
            return 1
        elif [[ ${state} != 'pending' ]]; then
            break
        fi

        sleep 1
    done

    if [[ ${state} != 'running' ]]; then
        # Cannot possibly become `running`.
        "${msg}" "cannot run; state: ${state}"
        return 1
    fi

    "${msg}" 'running'
}

# Waits for one instance to be ssh-accessible. Optionally checks the host key.
function wait-for-one-ssh {
    local infoJson="$1"
    local msg="$2"

    local v4Addr="$(jget --output=raw "${infoJson}" '.publicAddress')"
    local v6Addr="$(jget --output=raw "${infoJson}" '.ipv6Address')"
    local expectedKey="$(jget --output=raw "${infoJson}" '.hostPublicKey // ""')"

    local tries=30
    local success=0
    local responsive=0
    local shownKeyMsg=0
    local shownBootMsg=0

    while (( !success && (tries-- > 0) )); do
        local gotKey="$(
            # `-T 60` == one minute timeout. `awk` to print just the key.
            ssh-keyscan 2>/dev/null -T 60 -t ed25519 "${v4Addr}" \
            | awk '{print $2, $3}'
        )"

        if [[ ${gotKey} == '' ]]; then
            # Host is apparently unreachable, or it might be _almost_ ready.
            if (( !shownBootMsg )); then
                "${msg}" 'booting'
                shownBootMsg=1
            fi
            sleep 1
        elif (( checkHostKeys )) && [[ (${expectedKey} != '') && (${expectedKey} != ${gotKey}) ]]; then
            responsive=1
            if (( !shownKeyMsg )); then
                "${msg}" 'booting (host key not yet set)'
                shownKeyMsg=1
            fi
            sleep 1
        else
            "${msg}" 'ssh reachable via IPv4'
            success=1
        fi
    done

    if (( !success )); then
        "${msg}" 'ssh unreachable via IPv4'
        return 1
    fi

    local gotKey="$(
        # `-T 60` == one minute timeout. `awk` to print just the key.
        ssh-keyscan 2>/dev/null -T 60 -t ed25519 "${v6Addr}" \
        | awk '{print $2, $3}'
    )"

    # Don't bother re-checking the key; just care if we got one.
    if [[ ${gotKey} == '' ]]; then
        "${msg}" 'ssh unreachable via IPv6'
        return 1
    fi

    "${msg}" 'ssh reachable via IPv6'
}

# Wait implementation, plugged into the control skeleton.
function wait-impl {
    local infoJson
    local loc

    while (( $# > 0 )); do
        case "$1" in
            --info=*) infoJson="${1#*=}" ;;
            --loc=*)  loc="${1#*=}"      ;;
            *)
                error-msg $'Shouldn\'t happen!'
                return 1
        esac
        shift
    done

    progress-msg 'Status:'

    # Extract the `id`s of the instances, as a regular Bash array.
    local ids=($(jget --output=raw "${infoJson}" '.[] | .id'))

    local trouble=()

    local i
    for i in "${!ids[@]}"; do
        local id="${ids[i]}"
        local info="$(
            jget "${infoJson}" id="${id}" '.[] | select(.id == $id)'
        )"

        function _msg-callback {
            progress-msg "  ${id}: $1"
        }

        if ! wait-for-one-running "${info}" _msg-callback; then
            trouble+=("${id}")
            unset ids[i]
        fi

        unset -f _msg-callback
    done

    for i in "${!ids[@]}"; do
        local id="${ids[i]}"
        local info="$(
            jget "${infoJson}" id="${id}" '.[] | select(.id == $id)'
        )"

        function _msg-callback {
            progress-msg "  ${id}: $1"
        }

        if ! wait-for-one-ssh "${info}" _msg-callback; then
            trouble+=("${id}")
            unset ids[i]
        fi

        unset -f _msg-callback
    done

    if (( ${#trouble[@]} != 0 )); then
        error-msg 'Trouble with:'
        error-msg --exec printf '  %s\n' "${trouble[@]}"
        return 1
    fi
}


#
# Main script
#

instance-control-skeleton --full-info 'Waiting for running' wait-impl
