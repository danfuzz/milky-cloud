#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"
. "$(this-cmd-dir)/control-help.sh"


#
# Argument parsing
#

define-usage $'
    ${name} [<opt> ...] [:: [<out-opt> ...] [<jval-expr> ...]]

    Waits until one or more instances are all responsive. "Responsive" in this
    case means that an instance is in state `running` and can answer an SSH
    connection enough to provide its host keys. Most options are passed through
    to `instance info` to determine which instance(s) to act on.

    By default, this command prints the result of the `instance info` which
    selected instances. This can be altered via the `--output=<style>` option and
    any post-processing arguments.

    --[no-]check-host-keys
      Compare the host keys with what is stored in the instances\' corresponding
      tag. This is _on_ by default.

    Options passed through to `instance info`:
      --attributes
      --default-loc=<region-or-zone>
      --default-vpc=<id-spec>
      --expired=<choice> :: `exclude` `include` `only`
      --id=<id-spec>
      --multiple
      --not-found-ok
      --output (sort of; applies to final output)

    ${name} [--help | -h]

    Displays this message.
'

# Want help?
opt-action --call='{ usage; exit }' help/h

# Options and arguments passed through to `instance info`.
usual-info-args

# Check the host keys?
opt-toggle --var=checkHostKeys --init=1 check-host-keys

process-args "$@" || usage --short


#
# Helper functions
#

# Waits for just one instance to be in state `running`.
function wait-for-one-running {
    local fullName="$1"

    local state
    while true; do
        infoJson="$(lib instance info --id="${fullName}")" || return "$?"

        if [[ ${infoJson} == '' ]]; then
            error-msg "Cannot wait for ${name}; no such instance."
            return 1
        fi

        state="$(jget --output=raw "${infoJson}" '.state')"
        if [[ ${state} != 'pending' ]]; then
            break
        fi

        sleep 1
    done

    if [[ ${state} != 'running' ]]; then
        # Cannot possibly become `running`. Error message is printed by our
        # caller.
        return 1
    fi
}

# Waits for one instance to be ssh-accessible. Optionally checks the host key.
function wait-for-one-ssh {
    error-msg TODO

    echo 'ssh unreachable (ip4)'
    echo 'ssh unreachable (ip6)'
    return 1
}

# Wait implementation, plugged into the control skeleton.
function wait-impl {
    local infoJson
    local loc

    while (( $# > 0 )); do
        case "$1" in
            --info=*) infoJson="${1#*=}" ;;
            --loc=*)  loc="${1#*=}"      ;;
            *)
                error-msg $'Shouldn\'t happen!'
                return 1
        esac
        shift
    done

    progress-msg 'Status:'

    # Extract the `id`s of the instances, as a regular Bash array.
    local ids=($(jget --output=raw "${infoJson}" '.[] | .id'))

    local trouble=()

    local i
    for i in "${!ids[@]}"; do
        local id="${ids[i]}"
        local info="$(
            jget "${infoJson}" id="${id}" '.[] | select(.id == $id)'
        )"
        local state="$(jget --output=raw "${info}" '.state')"
        if [[ ${state} == 'running' ]]; then
            progress-msg "  ${id}: already running"
        elif ! wait-for-one-running "${id}.${loc}"; then
            trouble+=("${id}")
            unset ids[i]
            progress-msg "  ${id}: cannot run"
        else
            progress-msg "  ${id}: running"
        fi
    done

    for i in "${!ids[@]}"; do
        local id="${ids[i]}"
        local info="$(
            jget "${infoJson}" id="${id}" '.[] | select(.id == $id)'
        )"
        local errMsgs
        errMsgs="$(wait-for-one-ssh "${info}")" || {
            trouble+=("${id}")
            set-array-from-lines errMsgs "${errMsgs}"
            progress-msg --exec printf "  ${id}: %s\n" "${errMsgs[@]}"
        }
    done

    if (( ${#trouble[@]} != 0 )); then
        error-msg 'Trouble with:'
        error-msg --exec printf '  %s\n' "${trouble[@]}"
        return 1
    fi
}


#
# Main script
#

instance-control-skeleton --full-info 'Waiting for running' wait-impl

exit 1
#########################################
# OLD STUFF
# TODO
info-msg TODO
exit 1

progress-msg 'Waiting for instance to be running...'

local infoJson

local state
while true; do
    infoJson="$(find-prod-instance --json "${name}")" || return "$?"

    if [[ ${infoJson} == '' ]]; then
        error-msg "Cannot wait for ${name}; no such instance."
        return 1
    fi

    state="$(jget --output=raw "${infoJson}" '.state')"
    if [[ ${state} != 'pending' ]]; then
        break
    fi

    sleep 1
done

if [[ ${state} != 'running' ]]; then
    error-msg "Instance ${name} in state ${state}; cannot become running."
    return 1
fi

# Use `ssh-keyscan` to see if (a) we can connect to SSH, and (b) we get our
# expected host key. If we can't connect, fail on that front. If we connect
# and see the wrong key, wait a moment and try again because that means that
# the initial boot is still ongoing.

progress-msg 'Waiting for first boot to complete...'

local address="$(jget --output=raw "${infoJson}" '.publicAddress')"
local expectedKey="$(jget --output=raw "${infoJson}" '.hostPublicKey')"

local tries=30
local success=0
local responsive=0
local shownKeyMsg=0
while (( !success && (tries-- > 0) )); do
    local gotKey="$(
        # `-T 60` == one minute timeout. `awk` to print just the key.
        ssh-keyscan 2>/dev/null -T 60 -t ed25519 "${address}" \
        | awk '{print $2, $3}'
    )"

    if [[ ${gotKey} == ${expectedKey} ]]; then
        success=1
    elif [[ ${gotKey} == '' ]]; then
        # Host is apparently unreachable, or it might be _almost_ ready.
        error-msg 'Still waiting for first boot to complete...'
        sleep 1
    else
        responsive=1
        if (( !shownKeyMsg )); then
            progress-msg 'Waiting for correct host key...'
            shownKeyMsg=1
        fi
        sleep 1
    fi
done

if (( !success )); then
    if (( responsive )); then
        error-msg "Instance ${name} is running and responsive,"
        error-msg "but boot seems to be incomplete. Alas!"
    else
        error-msg "Instance ${name} did not complete its first boot. Alas!"
    fi
    return 1
fi

progress-msg 'Done!'
