#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage $'
    ${name} [<opt> ...] <name-or-id>

    Finds a VPC by name or security group ID, or validates the existence of one
    by ID, and prints its information.

    --loc=<region-or-zone>
      Where to look. Must be specified. If specified as an availability zone,
      only the region portion matters.
    --not-found-ok
      Do not report an error -- just don\'t print any output -- if there is
      no VPC with the given name or ID.
    --output=<style> :: `compact` `id` `json`
      What to output, as with `json-val`, except that `id` prints just the ID
      of the VPC as a plain string. `id` is the default.

    ${name} [--help | -h]

    Displays this message.
'

# Want help?
opt-action --call='{ usage; exit }' help/h

# Region, passed as either region per se or availability zone.
opt-value --required --var=region --filter=region-from-location loc

# Ok if no VPC found?
opt-toggle --var=notFoundOk not-found-ok

# What to print.
opt-value --var=outputStyle --init=id --enum='compact id json' output

# Name or ID to look up.
positional-arg --required --var=nameOrId name-or-id

process-args "$@" || usage --short


#
# Helper functions
#

# Performs a `describe-*` call and passes through the JSON output under the
# indicated top-level object key. Print out the final requested result (either
# just the ID or the full info), including possibly doing a second call to
# get the requested info.
function do-find {
    local commandName="$1"
    local topKey="$2"
    local filterName="$3"
    local nameOrId="$4"
    local outputStyle="$5"

    local result
    result="$(ec2-json "${commandName}" \
        --loc="${region}" \
        "$(lib filter-spec "${filterName}=${nameOrId}")"
    )" \
    || return "$?"

    local idResult
    idResult="$(jget "${result}" \
        topKey="${topKey}" \
        '.[$topKey] | map(.VpcId) | unique'
    )"

    local vpcId
    vpcId="$(jget --output=raw \
        "${idResult}" \
        '
        if length == 0 then "none"
        elif length == 1 then .[0]
        else "ambiguous"
        end
    ')"

    case "${vpcId}" in
        ambiguous)
            error-msg 'Ambiguous name or ID matches all of:'
            error-msg --exec jget --output=raw "${idResult}" '.[] | "  " + .'
            return 1
            ;;
        none)
            if (( notFoundOk )); then
                return
            else
                error-msg "No such VPC: ${nameOrId}"
                return 1
            fi
            ;;
    esac

    if [[ ${outputStyle} == 'id' ]]; then
        echo "${vpcId}"
    else
        if [[ ${topKey} != 'Vpcs' ]]; then
            # We got the ID out of some other object (e.g. a security group),
            # and we've been asked for full info. So we need to actually get
            # that info!
            result="$(ec2-json describe-vpcs \
                --loc="${region}" \
                vpcId="${vpcId}" \
                '{ VpcIds: [$vpcId] }'
            )" \
            || return "$?"
        fi
        # TODO: Convert any other AWS-specific fields that are needed to our
        # project-friendly form, and then drop the AWS-specific stuff.
        jget --output="${outputStyle}" "${result}" '
            .Vpcs[0]
            | . + {
                id: .VpcId,
                ipv4CidrBlocks: (
                    (.CidrBlockAssociationSet // []) | map(.CidrBlock)
                ),
                ipv6CidrBlocks: (
                    (.Ipv6CidrBlockAssociationSet // []) | map(.Ipv6CidrBlock)
                ),
                isDefault: .IsDefault,
                name:      (.Tags | map(select(.Key == "Name") | .Value)[0]),
                state: (
                    # It _might_ be the case that if the VPC state is
                    # `available`, then it is safe to assume that all network
                    # blocks are `associated`. However, that is not explicitly
                    # stated in the AWS docs, so we test explicitly for the
                    # network associations.
                    if .State == "available" then
                        (.CidrBlockAssociationSet | map(.CidrBlockState.State) | unique)
                            as $ipv4States
                        |
                        (.Ipv6CidrBlockAssociationSet | map(.Ipv6CidrBlockState.State) | unique)
                            as $ipv6States
                        |
                        if $ipv4States == ["associated"] then
                            if $ipv6States == ["associated"] then
                                "available"
                            else
                                "pending-ipv6"
                            end
                        elif $ipv6States == ["associated"] then
                            "pending-ipv4"
                        else
                            "pending-ip"
                        end
                    else
                        .State
                    end
                )
            }
        '
    fi
}

# Find a VPC by looking through all the VPCs.
function find-via-describe-vpcs {
    local filterName="$1"
    local nameOrId="$2"
    local outputStyle="$3"

    do-find describe-vpcs Vpcs "${filterName}" "${nameOrId}" "${outputStyle}"
}

# Find a VPC from an associated security group.
function find-via-describe-security-groups {
    local nameOrId="$1"
    local outputStyle="$2"

    do-find describe-security-groups SecurityGroups group-id "${nameOrId}" \
        "${outputStyle}"
}


#
# Main script
#

if [[ ${nameOrId} =~ ^vpc- ]]; then
    # It looks like an ID.
    find-via-describe-vpcs 'vpc-id' "${nameOrId}" "${outputStyle}"
elif [[ ${nameOrId} =~ ^sg- ]]; then
    # It looks like a security group ID.
    find-via-describe-security-groups "${nameOrId}" "${outputStyle}"
else
    # It's expected to be a name.
    find-via-describe-vpcs 'tag:Name' "${nameOrId}" "${outputStyle}"
fi
