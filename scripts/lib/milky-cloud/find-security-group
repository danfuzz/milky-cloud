#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<opt> ...] <name-or-id>

    Finds a security group by name or validates the existence of one by ID, and
    prints its information. If passed an ID, it can either be the ID of a
    security group per se, or it can be an ID of a VPC which is taken to refer
    to the default security group for the indicated VPC. If passed a name, it
    must be the AWS `GroupName` and not its (tag) name.

    --loc=<region-or-zone>
      Where to look. Must be specified. If specified as an availability zone,
      only the region portion matters.
    --not-found-ok
      Do not report an error -- just don\'t print any output -- if there is
      no security group with the given name or ID.
    --output=<style> :: `compact` `id` `json`
      What to output, as with `jval`, except that `id` prints just the ID of the
      security group as a plain string. `id` is the default.
'

# Region, passed as either region per se or availability zone.
opt-value --required --var=region --filter=region-from-location loc

# Ok if no security group found?
opt-toggle --var=notFoundOk not-found-ok

# Output style.
opt-value --var=outputStyle --init=id --enum='compact id json' output

# Name or ID to look up.
positional-arg --required --var=nameOrId name-or-id

process-args "$@" || usage --short


#
# Main script
#

filterSpec=''
if [[ ${nameOrId} =~ ^sg- ]]; then
    # It looks like a security group ID.
    filterSpec="$(lib filter-spec group-id="${nameOrId}")"
elif [[ ${nameOrId} =~ ^vpc- ]]; then
    # It looks like a VPC ID.
    filterSpec="$(lib filter-spec group-name=default vpc-id="${nameOrId}")"
else
    # It's expected to be the name of a security group.
    filterSpec="$(lib filter-spec group-name="${nameOrId}")"
fi

result="$(
ec2-json describe-security-groups \
    --loc="${region}" \
    "${filterSpec}" \
    :: \
    '
        .SecurityGroups
        |
        {
            count: (. | length),
            group: .[0],
            all:   map(.GroupId + " " + (.GroupName | tojson))
        }
    '
)" \
|| exit "$?"

count="$(jget "${result}" '.count')"

if (( count == 0 )); then
    if (( notFoundOk )); then
        exit
    fi
    error-msg "No such security group: ${nameOrId}"
    exit 1
elif (( count != 1 )); then
    error-msg 'Ambiguous name or ID matches all of:'
    error-msg --exec jget --output=raw "${result}" '.all[] | "  " + .'
    exit 1
fi

if [[ ${outputStyle} == 'id' ]]; then
    jget --output=raw "${result}" '.group.GroupId'
else
    jget --output="${outputStyle}" "${result}" '.group'
fi
