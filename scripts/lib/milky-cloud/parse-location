#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage $'
    ${name} [<opt> ...] <location>

    Parses a location -- a region or availability zone -- and if valid then
    optionally prints out one of the components.

    --input=<style>
      `any` -- Accept either an availability zone or region as <location>.
        This is the default.
      `region` -- Require a region.
      `zone` -- Require an availability zone.
    --output=<style>
      `none` -- Do not produce any output. This is the default.
      `json` -- Output parsed details, in JSON form.
      `region` -- Output the region.
      `zone` -- Output the availability zone (which will be the same as the
        input). This implies `--input=zone`.
      `zone-suffix` -- Output the zone suffix (everything after the region).
        This implies `--input=zone`.
    --quiet
      Do not print an error if the given <location> is invalid.

    ${help}
'

# Want help?
opt-action --call='{ usage; exit }' help/h

# Input type.
opt-value --var=inputType --init=any --enum='any region zone' input

# Item to output.
opt-value --var=outputItem --init=none --enum='none json region zone zone-suffix' output

# Quiet? (Suppress error messages?)
opt-toggle --var=quiet quiet

# Location to parse.
positional-arg --required --var=location location

process-args "$@" || usage --short


#
# Main script
#

# Basic validation and identification.

region=''
zone=''
zoneSuffix=''

# Note: The length limits are based on observation, plus a dose of leeway.
if [[ ! ${location} =~ ^([a-z]{2}-[a-z]{3,10}-[0-9])([a-z]|-[a-z]{2,5}-[0-9][a-z])?$ ]]; then
    if (( !quiet )); then
        error-msg "Invalid value for argument <location>: ${location}"
    fi
    exit 1
fi

region="${BASH_REMATCH[1]}"
zoneSuffix="${BASH_REMATCH[2]}"
if [[ ${zoneSuffix} != '' ]]; then
    zone="${location}"
fi

# Validate the specific required input type.

if [[ ${outputItem} =~ ^zone ]]; then
    # Don't allow region input if we are to print a zone-ish thing.
    inputType='zone'
fi

case "${inputType}" in
    region)
        if [[ ${zone} != '' ]]; then
            if (( !quiet )); then
                error-msg "Region required; got zone: ${location}"
            fi
            exit 1
        fi
        ;;
    zone)
        if [[ ${zone} == '' ]]; then
            if (( !quiet )); then
                error-msg "Zone required; got region: ${location}"
            fi
            exit 1
        fi
        ;;
esac

# Output whatever is requested, if anything.
case "${outputItem}" in
    json)
        jval \
            location="${location}" \
            region="${region}" \
            zoneSuffix="${zoneSuffix}" '
        {
            location: $location,
            region:   $region
        }
        |
        if $zoneSuffix == "" then .
        else . + {
            zone:       $location,
            zoneSuffix: $zoneSuffix
        }
        end'
        ;;
    region)
        echo "${region}"
        ;;
    zone)
        echo "${location}"
        ;;
    zone-suffix)
        echo "${zoneSuffix}"
        ;;
esac
