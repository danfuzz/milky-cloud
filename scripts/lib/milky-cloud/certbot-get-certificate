#!/bin/bash
#
# Copyright 2022-2025 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<opt> ...]

    Runs Certbot to get a certificate, saving it to a local directory. This
    uses the DNS challenge, implemented "manually" here to call out to other
    scripts in this project which use Route53. (Why not use Certbot\'s Route53
    plugin? Because as of this writing, it is easier to reimplement it than to
    get the plugins, because reasons.)

    After a successful run of this command, it is safe to delete the specified
    work directory. All certificates and Cerbot account information will have
    been stored in the output directory. (The Certbot account information will
    get re-used on subsequent invocations.)

    --domain=<domain-name>
      Domain name to get a certificate for. This is required, and can be
      specified more than once to get a certificate with alternate subjects.
      (The first domain listed is the primary.) Wildcards are allowed, in the
      form `*.domain.name`.
    --email=<email-address>
      Email address to use when making API requests. This is required. Per
      Certbot / LetsEncrypt docs, this is just used for urgent communication.
    --min-lifetime-days=<count>
      Cause this command to _not_ actually get a new certificate if there are
      at least <count> days left before an existing certificate expires. If
      this option is not used, then the command will always get a new
      certificate.
    --out=<path>
      Directory to use to store certs and Certbot account information. Defaults
      to `out/certs` under the current directory. The directory will be created
      if it doesn\'t exist.
    --staging
      Use the staging server.
    --work-dir=<path>
      Directory to use for Certbot intermediate file storage, including logs.
      Defaults to `out/certbot` under the current directory. The directory
      will be created if it doesn\'t exist.
'

# Special logic for callbacks from `certbot` to skip the usual argument parsing
# and just call the right hook.
runHook=''
if [[ ${RUN_CERTBOT_HOOK} == 1 ]]; then
    # Certbot sets `CERTBOT_AUTH_OUTPUT` only when calling the cleanup script.
    if [[ ${CERTBOT_AUTH_OUTPUT-unset} == 'unset' ]]; then
        runHook=authentication
    else
        runHook=cleanup
    fi
fi

if [[ ${runHook} == '' ]]; then
    # Directory to use for final output.
    opt-value --var=outDir --default='out/certs' out

    # Domain(s) to get a certificate for.
    certName='' # Primary name (minus wildcard, if any).
    domainArgs=()
    opt-value --required --call=add-domain --filter='/^([*][.])?[-.a-z0-9]+$/' domain
    function add-domain {
        domainArgs+=(--domain="$1")
        if [[ ${certName} == '' ]]; then
            # Drop the wildcard off of the domain, if any, to produce the main
            # certificate name.
            [[ $1 =~ ^([*][.])?(.*)$ ]]
            certName="${BASH_REMATCH[2]}"
        fi
    }

    # Email address.
    opt-value --required --var=email --filter='/^[-_.+@a-z0-9]+$/' email

    # Minimum days of validity for an existing certificate.
    opt-value --var=minLifetimeDays --filter='/^[0-9]{1,4}$/' min-lifetime-days

    # Use the staging server?
    opt-toggle --var=useStaging staging

    # Directory to use for Certbot intermediate files.
    opt-value --var=workDir --default='out/certbot' work-dir

    process-args "$@" || exit "$?"
fi


#
# Helper functions
#

function make-dns-change {
    local action="$1"
    local domain="$2" # Full domain, not just apex.
    local validationData="$3"

    local waitOpt=()
    local prefix=''
    if [[ ${action} == --delete ]]; then
        prefix='!'
        waitOpt=(--no-wait)
    fi

    # Split into name and main domain.

    [[ ${domain} =~ ^(.*[.])?([^.]+[.][^.]+)$ ]] || {
        error-msg "Could not parse domain: ${domain}"
    }

    local name="_acme-challenge.${BASH_REMATCH[1]}"
    domain="${BASH_REMATCH[2]}"

    # There will be at least one trailing `.` (two if we're doing the apex).
    # Drop them
    name="${name%.*}"

    # Note: When asking for a cert which covers both a domain name (with any
    # number of subdomains including zero) and a wildcard of that exact same
    # domain name, there might be two active ACME challenges which both want to
    # use the same record name. So we always have to `--merge` records instead
    # of just overwriting them.

    # DNS format requires the value to be double-quoted.
    validationData="\"${validationData}\""

    lib dns change "${waitOpt[@]}" --merge --ttl=60 --domain="${domain}" \
        "${prefix}${name}:txt=${validationData}" \
    || {
        info-msg 'There may be trouble!'
    }
}

# The "authentication" hook. This is (in effect) a callback from `certbot`.
function authentication-hook {
    local validationData="${CERTBOT_VALIDATION}"
    local domain="${CERTBOT_DOMAIN}"

    make-dns-change --add "${domain}" "${validationData}"
}

# The "cleanup" hook. This is (in effect) a callback from `certbot`.
function cleanup-hook {
    local domain="${CERTBOT_DOMAIN}"
    local remainingChallenges="${CERTBOT_REMAINING_CHALLENGES}"
    local validationData="${CERTBOT_VALIDATION}"

    make-dns-change --delete "${domain}" "${validationData}"
}

# Does a certificate lifetime check. Prints `keep` or `renew`.
function lifetime-check {
    local minLifetimeDays="$1"
    local fullChainFile="$2"

    local SECS_PER_DAY=$(( 24 * 60 * 60 ))

    local expireDateStr="$(
        openssl x509 -in "${fullChainOut}" -noout -enddate
    )" \
    || return "$?"

    if ! [[ ${expireDateStr} =~ ^[^=]+=(.*)$ ]]; then
        error-msg "Strange date in certificate: ${expireDateStr}"
        return 1
    fi

    local expireSecs="$(lib timey secs --input=rfc822 "${BASH_REMATCH[1]}")"
    local nowSecs="$(lib timey secs now)"
    local remainingDays=$(( (expireSecs - nowSecs) / SECS_PER_DAY ))

    info-msg 'Existing certificate expires:'
    info-msg "  $(lib timey print "${expireSecs}")"

    case "${remainingDays}" in
        -*)
            info-msg $'  That\'s in the past! Eek!'
            ;;
        0)
            info-msg $'  That\'s today! Eek!'
            ;;
        1)
            info-msg $'  That\'s tomorrow! Eek!'
            ;;
        *)
            info-msg "  ${remainingDays} days from now"
            ;;
    esac

    info-msg "Required: at least ${minLifetimeDays} days."
    if (( remainingDays >= minLifetimeDays )); then
        info-msg 'Not renewing existing certificate.'
        echo 'keep'
    else
        info-msg 'Renewing existing certificate.'
        echo 'renew'
    fi
}


#
# Main script
#

# Just run the requested callback hook, if it looks like we were called from
# Certbot.
if [[ ${runHook} != '' ]]; then
    "${runHook}-hook"
    exit "$?"
fi

# Not a callback. Do the main call.

if [[ ! -d ${workDir} ]]; then
    mkdir -p "${workDir}" || exit "$?"
fi

if [[ ! -d ${outDir} ]]; then
    mkdir -p "${outDir}" || exit "$?"
fi
outDir="$(readlink -f "${outDir}")"

accountOutDir="${outDir}/certbot-accounts"
certOutDir="${outDir}/${certName}"
fullChainOut="${certOutDir}/fullchain.pem"

# Check for expiration, if so requested.
if [[ (${minLifetimeDays} != '') && -r "${fullChainOut}" ]]; then
    renewDecision="$(lifetime-check "${minLifetimeDays}" "${fullChainOut}")" \
    || exit "$?"
    if [[ ${renewDecision} == 'keep' ]]; then
        exit
    fi
fi

# Clean out any pre-existing bits about the to-be-produced certificate from the
# Certbot work directory.
rm -rf "${workDir}/archive/${certName}"
rm -rf "${workDir}/live/${certName}"
rm -rf "${workDir}/renewal/${certName}.conf"

# Copy the pre-existing Certbot account info (if any) into the work directory.
if [[ -d "${accountOutDir}" ]]; then
    mkdir -p "${workDir}/accounts"
    lib rsync-local --delete "${accountOutDir}/" "${workDir}/accounts" \
    || exit "$?"
fi

extraOpts=()
if (( useStaging )); then
    extraOpts+=(--staging)
fi

# Note: We use `--force-renewal`, because by the time we're here this script has
# already decided that the certificate needs renewing. (It probably doesn't
# matter, though, because we clean the salient bits out of the work directory,
# above.)
thisCmd="$(this-cmd-path)"
RUN_CERTBOT_HOOK=1 \
certbot certonly \
    --config-dir="${workDir}" --logs-dir="${workDir}" --work-dir="${workDir}" \
    --manual --noninteractive --agree-tos --email="${email}" \
    --preferred-challenges=dns --force-renewal \
    --manual-auth-hook="${thisCmd}" --manual-cleanup-hook="${thisCmd}" \
    --cert-name="${certName}" \
    "${extraOpts[@]}" "${domainArgs[@]}" \
|| exit "$?"

# Copy the result files into place.
mkdir -p "${certOutDir}"
(
    cd "${workDir}/live/${certName}"
    find . '(' -type f -o -type l ')' -name '*.pem' \
        -exec cp '{}' "${certOutDir}" ';'
)

# Copy Certbot account info back into the output area.
mkdir -p "${accountOutDir}"
lib rsync-local --delete "${workDir}/accounts/" "${accountOutDir}" \
|| exit "$?"

info-msg
info-msg 'Certificate files stored to:'
info-msg "  ${certOutDir}"
