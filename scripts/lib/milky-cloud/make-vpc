#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage $'
    ${name} [<opt> ...]

    Makes a new VPC, plus associated accouterments. On success, prints the ID
    of the created VPC.

    --[no-]ipv4
      Include public IPv4 networking. The default is `--ipv4`.
    --[no-]ipv6
      Include public IPv6 networking. The default is `--ipv6`.
    --loc=<region-or-zone>
      What region to make the VPC in. Must be specified. If specified as an
      availability zone, only the region portion matters.
    --name=<name>
      Name to assign to the constructed VPC. Must be specified.
    --[no-]progress
      Print progress messages to stderr. `--progress` is the default.

    ${name} [--help | -h]

    Displays this message.
'

# Want help?
opt-action --call='{ usage; exit }' help/h

# Do public IPv4?
opt-toggle --var=useIpv4 --init=1 ipv4

# Do public IPv6?
opt-toggle --var=useIpv6 --init=1 ipv6

# Region, passed as either region per se or availability zone.
opt-value --required --var=region --filter=region-from-location loc

# Name for the resulting VPC.
opt-value --required --var=name --filter='/^[-_a-zA-Z0-9]+$/' name

# Progress messages?
progress-msg --enable
opt-toggle --call='{ progress-msg --set="$1" }' progress

process-args "$@" || usage --short


#
# Helper functions
#

# Creates a VPC, and waits for its state to settle. Prints out the VPC info upon
# success.
function make-vpc-per-se {
    local error=0
    local vpcId
    local vpcInfo
    local waitSec
    local maxTime

    # Create the actual VPC.
    vpcInfo="$(ec2-json create-vpc \
        --loc="${region}" \
        tagSpec:json="$(lib tag-spec --type='vpc' --name="${name}")" \
        useIpv6:json="${useIpv6}" \
        '
            $tagSpec
            +
            if $useIpv6 == 1 then { AmazonProvidedIpv6CidrBlock: true } else {} end
            +
            {
                # Note: Even when not using IPv4, AWS requires some IPv4 stuff
                # to be defined, such as this.
                CidrBlock: "10.1.0.0/16",
                InstanceTenancy: "default"
            }
        ' \
        :: '.Vpc'
    )" \
    || return "$?"

    vpcId="$(jget --output=raw "${vpcInfo}" '.VpcId')"
    progress-msg "Made VPC: ${vpcId}"

    while (( !error )); do
        vpcInfo="$(lib find-vpc --output=json --loc="${region}" "${vpcId}")" \
        || {
            error="$?"
            break
        }

        local state="$(jget --output=raw "${vpcInfo}" '.state')"
        if [[ ${state} == 'available' ]]; then
            break
        fi

        if [[ ${maxTime} == '' ]]; then
            # Retry for no more than 60 seconds total.
            maxTime=$(($(date '+%s') + 60))
        elif (( $(date '+%s') > maxTime )); then
            error-msg 'Timed out while waiting for VPC to become ready.'
            error=1
            break
        fi

        if [[ ${waitSec} == '' ]]; then
            # First sleep is sub-second. In practice, this appears to be enough
            # to ensure readiness, at least most of the time.
            sleep 0.1
            waitSec=1
        else
            progress-msg 'Not yet ready...'
            sleep "${waitSec}"
            waitSec=5
        fi
    done

    if (( error )); then
        return "${error}"
    fi

    echo "${vpcInfo}"
}


#
# Main script
#

# Name to use for all the sub-resources.
resourceName="standard-for-${name}"

# Create the actual VPC.
vpcInfo="$(make-vpc-per-se)" \
|| exit "$?"

vpcId="$(jget --output=raw "${vpcInfo}" '.id')"
cidr4="$(jget --output=raw "${vpcInfo}" '.ipv4CidrBlocks[0]')"
cidr6="$(jget --output=raw "${vpcInfo}" '.ipv6CidrBlocks[0]')"

progress-msg 'Networks:'
progress-msg "  IPv4: ${cidr4}"
progress-msg "  IPv6: ${cidr6}"

# After this point, in case of error, we try to clean things up by removing the
# VPC and all its interconnected dependencies.

error=0

# Set the attributes on the VPC to let instances have public DNS hostnames.
# Note: The two attributes have to be turned on in this specific order, because
# one depends on the other, and AWS will reject an invalid intermediate state.
if (( !error )); then
    lib set-attributes \
        --progress --loc="${region}" --id="${vpcId}" \
        EnableDnsSupport=true \
        EnableDnsHostnames=true \
    || error=1
fi

# Configure the default security group.
if (( !error )); then
    lib configure-security-group \
        --progress --loc="${region}" --security-group="${vpcId}" \
        --name="default-for-${vpcId}" \
    || error=1
fi

# Create a subnet per availability zone.
if (( !error )); then
    lib add-subnets \
        --progress --quiet --loc="${region}" --vpc="${vpcId}" \
        --ipv4="${useIpv4}" --name="${resourceName}" \
    || error=1
fi

# Create and attach an internet gateway.
gatewayAdded=0
if (( !error )); then
    gatewayId="$(
        lib add-internet-gateway \
            --progress --loc="${region}" \
            --vpc="${vpcId}" --name="${resourceName}" \
    )" \
    && gatewayAdded=1 \
    || error=1
fi

# Do cleanup if necessary.

if (( error )); then
    error-msg 'Error(s) after VPC creation. Attempting cleanup!'

    if (( gatewayAdded )); then
        progress-msg 'Deleting internet gateway...'
        lib delete-internet-gateway \
            --loc="${region}" --gateway="${gatewayId}"
    fi

    progress-msg 'Deleting subnets...'
    lib delete-subnets --quiet --loc="${region}" --vpc="${vpcId}" --all

    progress-msg 'Deleting VPC...'
    ec2-json delete-vpc \
        --loc="${region}" \
        vpcId="${vpcId}" \
        '{ VpcId: $vpcId }'

    progress-msg 'Done with post-error cleanup.'
    exit "${error}"
fi

if (( !error )); then
    progress-msg "VPC is ready for action!"
    progress-msg "  id:   ${vpcId}"
    progress-msg "  name: ${name}"
fi

echo "${vpcId}"
