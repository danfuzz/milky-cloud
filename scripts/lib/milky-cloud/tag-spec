#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<opt> ...] [--] [<spec> ...]
    Constructs and prints a JSON object suitable for use as the `Tags` argument
    to `ec2 create-tags` or the `TagSpecifications` argument to various other
    AWS commands. The result is an object that is suitable for use as-is (if it
    is the only argument) or for merging with other arguments.

      <spec>
        <name>[=<value>] -- Use <value> as a the binding for <name>, or without
          <value> just indicate the tag name in the result (e.g. for a call to
          `ec2 delete-tags`). It is invalid for a given name to be used more
          than once.

      --name=<value>
        Adds a spec to bind `Name` (capitalized) to the given value. This is
        available as a convenience because it is such a common need in that it is
        AWS\'s standard way to tag things with names.
      --output=<style> :: `compact` `json`
        Output style, as with `jval`. Defaults to `json`.
      --type=<type>
        Resource type, if `TagSpecifications` output is wanted. If not specified,
        the output is the `Tags` form suitable for `ec2 create-tags` or `ec2
        delete-tags`.
'

# `Name` binding.
opt-value --var=name --filter='/./' name

# Output style.
opt-value --var=outputStyle --init=json --enum='compact json' output

# Resource type.
opt-value --var=resourceType --filter='/^[-a-z0-9]+$/' type

# List of tag specifications, as parallel arrays of name and value.
tagNames=()
tagValues=()

rest-arg --call=parse-specs specs
function parse-specs {
    local arg
    local error=0

    while (( $# > 0 )); do
        arg="$1"
        if ! [[ ${arg} =~ ^([-_:.a-zA-Z0-9]+)(=.*)?$ ]]; then
            error-msg 'Could not parse tag specification:' "${arg}"
            error=1
        fi

        tagNames+=("${BASH_REMATCH[1]}")
        tagValues+=("${BASH_REMATCH[2]}")

        shift
    done

    return "${error}"
}

process-args "$@" || usage --short


#
# Main script
#

# Add the binding from `--name`, if used.
if [[ ${name} != '' ]]; then
    tagNames+=('Name')
    tagValues+=("=${name}")
fi

# Check for duplicate names.
duplicates=($(
    printf '%s\n' "${tagNames[@]}" | sort | uniq -c | awk '$1 != 1 { print $2 }'
))
if (( ${#duplicates[@]} != 0 )); then
    error-msg 'Duplicate names not allowed:'
    error-msg --exec printf '  %s\n' "${duplicates[@]}"
    exit 1
fi

jval --output="${outputStyle}" \
    names:json="$(jarray --input=strings "${tagNames[@]}")" \
    values:json="$(jarray --input=strings "${tagValues[@]}")" \
    resourceType="${resourceType}" \
'
    [$names, $values]
    |
    transpose
    |
    reduce .[] as [$key, $value] (
        [];
        if ($value | startswith("=")) then
            . + [{ Key: $key, Value: $value[1:] }]
        else
            . + [{ Key: $key }]
        end
    )
    |
    { Tags: . }
    |
    if $resourceType == "" then .
    else { TagSpecifications: [{ ResourceType: $resourceType } + .] }
    end
'
