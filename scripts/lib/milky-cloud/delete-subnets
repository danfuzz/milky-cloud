#!/bin/bash
#
# Copyright 2022-2023 the Milky-cloud Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

. "$(dirname "$(readlink -f "$0")")/_init.sh" || exit "$?"


#
# Argument parsing
#

define-usage --with-help $'
    ${name} [<opt> ...] [<assignment> ...] <filter-expr> ...

    Removes zero or more subnets, based on given filter criteria. Simple filters
    can be specified via options, or if no such option is used, a general filter
    can be specified via assignment and expression arguments, similar to `aws-json`.
    This filter is expected to accept `Subnet` objects and then re-output the
    ones to be removed.

    On success, prints the IDs of all removed subnets as JSON.

    --all
      Remove all subnets.
    --loc=<region-or-zone>
      What region to make the security group in. Must be specified. If
      specified as an availability zone, only the region portion matters.
    --output=<style> :: array json none
      What to output.
      * `array` -- Output a JSON array (instead of individual objects).
      * `json` -- Output a sequence of JSON objects. This is the default.
      * `none` -- Do not output anything.
    --vpc=<name-or-id>
      Name or ID of the VPC to operate on.
'

# Handles JSON `--output`.
usual-json-output-args --no-rest

# Region, passed as either region per se or availability zone.
opt-value --required --var=region --filter=region-from-location loc

# Name or ID of the VPC.
opt-value --required --var=vpcNameOrId --filter='/./' vpc

# Simple filter for `--all` (degenerate choice option).
opt-choice --var=simpleFilter \
    all='.'

# Filter arguments.
rest-arg --var=filterArgs filter-exprs

process-args "$@" || exit "$?"

if (( ${#filterArgs[@]} == 0 )); then
    if [[ ${simpleFilter} == '' ]]; then
        error-msg 'Missing filter option or arguments.'
        exit 1
    fi
    filterArgs=("${simpleFilter}")
elif [[ ${simpleFilter} != '' ]]; then
    error-msg 'Cannot specify both filter option and arguments.'
    exit 1
fi


#
# Main script
#

# Validate or find the ID of the VPC.
vpcId="$(lib find-vpc --loc="${region}" "${vpcNameOrId}")" \
|| exit "$?"

allSubnets="$(ec2-json describe-subnets \
    --loc="${region}" \
    "$(lib filter-spec vpc-id="${vpcId}")" \
    :: '.Subnets[]'
)" \
|| exit "$?"

selectedSubnets="$(
    jval <<<"${allSubnets}" --input=read -- "${filterArgs[@]}"
)" \
|| exit "$?"

subnetIds=($(
    jval <<<"${selectedSubnets}" --output=lines --input=slurp \
        'map(.SubnetId) | sort | .[]'
)) \
|| exit "$?"

for id in "${subnetIds[@]}"; do
    ec2-json delete-subnet \
        --loc="${region}" \
        id="${id}" \
        '{
            SubnetId: $id
        }' \
    || exit "$?"
done

resultArray="$(jarray --input=strings "${subnetIds[@]}")"

json-postproc-output "${resultArray}"
