#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

# Load the helper library.
. "${progDir}/lib/init"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...]
      Detaches and removes an internet gateway, including removing routing
      rules from the default routing table of the formerly-associated VPC.

      --in=<region-or-zone>
        What region to operate in. Must be specified. If specified as an
        availability zone, only the region portion matters.
      --gateway=<id>
        ID of the gateway to remove. Must be specified.
      --progress (--no-progress to disable)
        Print progress messages to stderr.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Want help?
opt-action --call=usage help/h=0

# Location (region or availability zone).
opt-value --required --var=inLocation in

# ID of the gateway.
opt-value --required --var=gatewayId --match='.+' gateway

# Progress messages?
opt-toggle --call=progress-msg-switch progress

process-args "$@" || usage "$?"


#
# Main script
#

inRegion="$(lib region-from-location "${inLocation}")" \
|| exit "$?"

# Get info on the gateway (which also validates the ID).
gatewayInfo="$(ec2-json describe-internet-gateways \
    --in="${inRegion}" \
    gatewayId="${gatewayId}" \
    '{
        InternetGatewayIds: [$gatewayId]
    }' \
    :: '.InternetGateways[0]'
)" \
|| exit "$?"

# Find the attached VPC ID if any. And if there is a VPC, figure out what needs
# to be done to detach it.
vpcId="$(jget --raw "${gatewayInfo}" '.Attachments[0].VpcId')"
rtId=
attached=0
hasIpv4Route=0
hasIpv6Route=0
if [[ ${vpcId} != 'null' ]]; then
    attached=1

    # Find the default route table for the VPC.
    rtInfo="$(ec2-json describe-route-tables \
        --in="${inRegion}" \
        filters:json="$(lib filter-spec vpc-id="${vpcId}" association.main=true)" \
        '$filters' \
        :: --raw '.RouteTables[0]'
    )" \
    || exit "$?"

    rtId="$(jget --raw "${rtInfo}" '.RouteTableId')"

    hasIpv4Route="$(jget "${rtInfo}" '
          .Routes
        | map(select(.DestinationCidrBlock == "0.0.0.0/0"))
        | if . == [] then 0 else 1 end
    ')"

    hasIpv6Route="$(jget "${rtInfo}" '
          .Routes
        | map(select(.DestinationIpv6CidrBlock == "::/0"))
        | if . == [] then 0 else 1 end
    ')"
fi

# At this point, attempt all the needed detachment / deletion bits, and just
# keep track of whether to report an error at the end.

error=0

if (( hasIpv4Route )); then
    progress-msg 'Deleting IPv4 route...'
    ec2-json delete-route \
        --in="${inRegion}" \
        rtId="${rtId}" \
        '{
            RouteTableId: $rtId,
            DestinationCidrBlock: "0.0.0.0/0"
        }' \
    || error=1
fi

if (( hasIpv6Route )); then
    progress-msg 'Deleting IPv6 route...'
    ec2-json delete-route \
        --in="${inRegion}" \
        rtId="${rtId}" \
        '{
            RouteTableId: $rtId,
            DestinationIpv6CidrBlock: "::/0"
        }' \
    || error=1
fi

if (( attached )); then
    progress-msg 'Detaching gateway...'
    ec2-json detach-internet-gateway \
        --in="${inRegion}" \
        gatewayId="${gatewayId}" \
        vpcId="${vpcId}" \
        '{
            InternetGatewayId: $gatewayId,
            VpcId: $vpcId
        }' \
    || error=1
fi

progress-msg 'Deleting gateway...'
ec2-json delete-internet-gateway \
    --in="${inRegion}" \
    gatewayId="${gatewayId}" \
    '{ InternetGatewayId: $gatewayId }' \
|| error=1

if (( error )); then
    echo 1>&2 'Trouble with gateway deletion. May not be fully deleted. Alas!'
else
    progress-msg 'Done with gateway deletion.'
fi

exit "${error}"
