#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

# Load the helper library.
. "${progDir}/lib/init"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...]
      Launches a standard-configured instance. On success, prints a JSON
      object with the most-salient values (including notably the instance
      ID). Note: If neither `--security-group` nor `--vpc` is specified,
      then this command will launch the instance into the default security
      group of the default VPC for the specified availability zone (which,
      TBQH, is probably not what you want).

      --in=<availability-zone>
        Where to launch.
      --instance-type=<type>
        What type of instance to install. Defaults to `t3.nano`, for convenience.
      --key-name=<name>
        Name of the keypair to use for SSH access. If not specified, then
        something else will have to have set up SSH access (e.g. the user
        data script, or something baked into the AMI).
      --name=<name>
        Name tag for the resulting instance.
      --security-group=<name-or-id>
        Name or ID of the security group to use for network access control.
        If specified, this is used to derive the VPC to use, and in conjunction
        with the specified availability zone, the specific subnet within the
        VPC. It is not valid to specify both this option and --vpc.
      --user-data=<data>
        User data for the instance, which is taken to be a script to run on
        first-boot of the instance. It is invalid to specify both this and
        the --user-data-file option. Note: On the instance, the user data can
        be found at `/var/lib/cloud/instance/user-data.txt`, and the log of
        running it can be found at `/var/log/cloud-init-output.log`.
      --user-data-file=<file>
        Name of a file containing user data for the instance. It is invalid
        to specify both this and the --user-data option.
      --vpc=<name-or-id>
        Name or ID of the VPC to launch into. If specified, then the instance
        will be in the default security group of the indicated VPC. It is not
        valid to specify both this option and --security-group.

    ${name} [--help | -h]
      Display this message.
    '

    exit "$1"
}

# Want help?
opt-action --call=usage --value=0 help/h

# Location (region or availability zone).
opt-value --required --var=inLocation in

# Instance type.
opt-value --var=instanceType --default='t3.nano' instance-type

# Name for the SSH keypair that allows for login access.
opt-value --var=keyName --match='.*' key-name

# Name for the instance.
opt-value --var=name --match='.+' name

# Name or ID of the security group to be in.
opt-value --var=groupNameOrId --match='.+' security-group

# Actual user data (first-boot script).
opt-value --var=userData --match='.*' user-data

# Name of file containing user data.
opt-value --var=userDataFile --match='.*' user-data-file

# Name or ID of the VPC to be in.
opt-value --var=vpcNameOrId --match='.+' vpc

process-args "$@" || usage "$?"

if [[ (${userData} != '') && (${userDataFile} != '') ]]; then
    echo 1>&2 'Cannot specify both --user-data and --user-data-file.'
    exit 1
fi

if [[ (${groupNameOrId} != '') && (${vpc} != '') ]]; then
    echo 1>&2 'Cannot specify both --security-group and --vpc.'
    exit 1
fi


#
# Main script
#

# Slurp the user data, if there is user data to be slurped.
if [[ ${userDataFile} != '' ]]; then
    userData="$(cat "${userDataFile}")" \
    || exit 1
fi

# Figure out the region.

inRegion="$(lib region-from-zone "${inLocation}")" \
|| exit "$?"

echo 1>&2 "type: ${instanceType}"
echo 1>&2 "in:   ${inRegion} / ${inLocation}"

# Figure out the correct AMI.

amiInfo="$(
${progDir}/find-ami \
    --in="${inLocation}" --instance-type="${instanceType}"
)"

if (( $? != 0 )); then
    exit "$?"
fi

jget 1>&2 --raw "${amiInfo}" '
    "Using AMI:",
    "  desc: " + .Description,
    "  name: " + .Name,
    "  id:   " + .ImageId
'

# Resolve the VPC, security group, and subnet IDs, if necessary.

vpcId=''
groupId=''
subnetId=''
if [[ ${groupNameOrId} != '' ]]; then
    # Resolve the security group ID, and then use it to find the VPC ID.
    groupId="$(lib find-security-group --in="${inLocation}" "${groupNameOrId}")" \
    || exit 1
    vpcId="$(lib find-vpc --in="${inLocation}" "${groupId}")" \
    || exit 1
elif [[ ${vpcNameOrId} != '' ]]; then
    # Resolve the VPC ID, and then use it to find the security group ID.
    vpcId="$(lib find-vpc --in="${inLocation}" "${vpcNameOrId}")" \
    || exit 1
    groupId="$(lib find-security-group --in="${inLocation}" "${vpcId}")" \
    || exit 1
fi

if [[ ${vpcId} != '' ]]; then
    subnetId="$(lib find-vpc-subnet --in="${inLocation}" --vpc="${vpcId}")" \
    || exit 1
fi

# Make up a name if one wasn't provided.
if [[ ${name} == '' ]]; then
    name="$(lib now-stamp via-script)"
fi

# Form the main command, and do it!

echo 1>&2 'Launching...'

# Note: If a subnet ID is known, then it implies the availability zone, in which
# case one doesn't also need to specify the availability zone explicitly.
# However, it's easier just to include it because this script is also meant to
# work when a subnet isn't known (which means we're just launching into the
# default security group of the default VPC for the region).
#
# Note: Public IP and DNS are de facto (or at least usually) not set in the
# output from `ec2 run-instances`, that is, they aren't known at the moment of
# launch.
result="$(ec2-json run-instances \
    --in="${inRegion}" \
    amiInfo:json="${amiInfo}" \
    inLocation="${inLocation}" \
    instanceType="${instanceType}" \
    keyName="${keyName}" \
    groupId="${groupId}" \
    subnetId="${subnetId}" \
    tagSpec:json="$(lib name-tag-spec instance "${name}")" \
    userData="${userData}" \
    '
        {
            ImageId:      $amiInfo.ImageId,
            InstanceType: $instanceType,
            MaxCount:     1,
            Placement:    { AvailabilityZone: $inLocation }
        }
        + $tagSpec
        + if $keyName == "" then {} else { KeyName: $keyName } end
        + if $groupId == "" then {} else { SecurityGroupIds: [$groupId] } end
        + if $subnetId == "" then {} else { SubnetId: $subnetId } end
        + if $userData == "" then {} else { UserData: $userData } end
    ' \
    :: \
    '
        .Instances[0]
        |
        {
            InstanceId: .InstanceId,
            PrivateDnsName: .PrivateDnsName,
            PrivateIpAddress: .PrivateIpAddress
        }
    '
)" \
|| exit "$?"

echo 1>&2 'Launched!'

jget "${result}" '.'
