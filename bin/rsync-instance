#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License, Version 2.0.
# Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Load the helper libraries.
. "$(dirname "$(readlink -f "$0")")/lib/init.sh" || exit "$?"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] <rsync-arg> ...
      Uses `rsync` to copy files to or from the indicated instance, using
      `ssh-instance` to make the connection (see which for details).

    Options passed through to `rsync`: --archive --delete
    Options passed through to `ssh-instance`: --key --secret

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$@"
}

# Want help?
opt-action --call='{ usage }' help/h

# Used when this script calls through to itself via `rsync`.
opt-toggle --var=fromRsync from-rsync

# Passed through to `rsync`.
rsyncOpts=()
opt-toggle --call='{ rsyncOpts+=(--archive) }' archive
opt-toggle --call='{ rsyncOpts+=(--delete) }' delete

# Passed through to `ssh-instance`.
sshOpts=()
opt-value --call='{ sshOpts+=(--key="$1") }' key
opt-value --call='{ sshOpts+=(--secret="$1") }' secret

# Main arguments.
rest-arg --var=args arg

process-args "$@" || usage "$?"


#
# Helper functions
#

# Constructs and performs the call to `rsync`.
function call-rsync {
    local rshCmd=("$(this-cmd-path)" --from-rsync)

    local opt
    for opt in "${sshOpts[@]}"; do
        rshCmd+=("$(base64 <<<"${opt}")")
    done
    rshCmd+=(--)

    local rsyncCmd=(rsync --rsh="${rshCmd[*]}" "${rsyncOpts[@]}" --)

    # `ssh-instance` lets you use `:` for the location/name form, but `rsync`
    # also uses `:`. We recognize `<loc>:<name>:<path>` here and convert the
    # first `:` into an `=` to avoid confusing `rsync`. It gets converted back
    # to `:` in the inner argument decoder (in `rsync-callback`).
    local arg
    for arg in "${args[@]}"; do
        if [[ ${arg} =~ ^([^/:]+):([^:]+):(.*)$ ]]; then
            arg="${BASH_REMATCH[1]}=${BASH_REMATCH[2]}:${BASH_REMATCH[3]}"
        fi
        rsyncCmd+=("${arg}")
    done

    exec "${rsyncCmd[@]}"
}

# Handles the inner callback from `rsync` to this script.
function rsync-callback {
    local sshCmd=("$(lib --path ssh-instance)")

    local arg
    while (( $# > 0 )); do
        arg="$1"
        shift

        if [[ ${arg} == '--' ]]; then
            break
        fi

        sshCmd+=("$(base64 <<<"${arg}" --decode)")
    done

    local sshTarget=''
    if [[ $1 == '-l' ]]; then
        # This is the userid to log in as.
        sshTarget="$2@"
        shift 2
    fi

    local sshHost="$1"
    shift
    if [[ ${sshHost} =~ ^([^=]+)=(.*)$ ]]; then
        # Convert the `=` back into the original `:` that `ssh-instance` wants.
        sshHost="${BASH_REMATCH[1]}:${BASH_REMATCH[2]}"
    fi
    sshTarget+="${sshHost}"

    sshCmd+=(--script -- "${sshTarget}")

    exec "${sshCmd[@]}" "$@"
}


#
# Main script
#

# What's going on: The "rsh" command passed to `rsync` is a single string, with
# non-standard rules about how to do special-character quoting. Rather than deal
# with this directly, we just base64-encode the `ssh-instance` arguments, and
# tell `rsync` to call back to this script. When we get called back, we both
# deal with the argument decoding _and_ interpreting the normal `rsh`/`ssh`
# arguments it passes.

if (( fromRsync )); then
    # We are being called from within `rsync`.
    rsync-callback "${args[@]}"
else
    # We need to build up an "rsh" command and call `rsync` with it.
    call-rsync
fi
