#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License, Version 2.0.
# Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Load the helper libraries.
. "$(dirname "$(readlink -f "$0")")/lib/init.sh" || exit "$?"

#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] <name-or-id>
      Finds an instance by name or ID, with optional extra criteria, and prints
      some information about it, in JSON form.

      --loc=<region-or-zone>
        Where to look. Must be specified.
      --not-found-ok
        Do not report an error -- just don\'t print any output -- if there is
        no matching instance.
      --vpc=<name-or-id>
        VPC where the instance must reside, named as with `find-vpc` (see which).
        If not specified, then this command will find an instance in any VPC (in
        the given location).

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$@"
}

# Want help?
opt-action --call='{ usage }' help/h

# Location (region or availability zone).
opt-value --required --var=location --filter='/[-a-z0-9]+/' loc

# Ok if no instance found?
opt-toggle --var=notFoundOk not-found-ok

# VPC to require.
opt-value --var=vpcNameOrId --filter='/./' vpc

# Name or ID to look up.
positional-arg --required --var=nameOrId name-or-id

process-args "$@" || usage "$?"


#
# Helper functions
#

# Performs a `describe-*` call and passes through the JSON output under the
# indicated top-level object key. Print out the final requested result (either
# just the ID or the full info), including possibly doing a second call to
# get the requested info.
function do-find {
    local commandName="$1"
    local topKey="$2"
    local filterName="$3"
    local nameOrId="$4"
    local outputStyle="$5"

    local result
    result="$(ec2-json "${commandName}" \
        --loc="${region}" \
        "$(lib filter-spec "${filterName}=${nameOrId}")"
    )" \
    || return "$?"

    local idResult
    idResult="$(jget "${result}" \
        topKey="${topKey}" \
        '.[$topKey] | map(.VpcId) | unique'
    )"

    local vpcId
    vpcId="$(jget --output=raw \
        "${idResult}" \
        '
        if length == 0 then "none"
        elif length == 1 then .[0]
        else "ambiguous"
        end
    ')"

    case "${vpcId}" in
        ambiguous)
            error-msg 'Ambiguous name or ID matches all of:'
            error-msg --exec jget --output=raw "${idResult}" '.[] | "  " + .'
            return 1
            ;;
        none)
            if (( notFoundOk )); then
                return
            else
                error-msg 'No such VPC.'
                return 1
            fi
            ;;
    esac

    if [[ ${outputStyle} == 'id' ]]; then
        echo "${vpcId}"
    else
        if [[ ${topKey} != 'Vpcs' ]]; then
            # We got the ID out of some other object (e.g. a security group),
            # and we've been asked for full info. So we need to actually get
            # that info!
            result="$(ec2-json describe-vpcs \
                --loc="${region}" \
                vpcId="${vpcId}" \
                '{ VpcIds: [$vpcId] }'
            )" \
            || return "$?"
        fi
        jget --output="${outputStyle}" "${result}" '.Vpcs[0]'
    fi
}

# Find a VPC by looking through all the VPCs.
function find-via-describe-vpcs {
    local filterName="$1"
    local nameOrId="$2"
    local outputStyle="$3"

    do-find describe-vpcs Vpcs "${filterName}" "${nameOrId}" "${outputStyle}"
}

# Find a VPC from an associated security group.
function find-via-describe-security-groups {
    local nameOrId="$1"
    local outputStyle="$2"

    do-find describe-security-groups SecurityGroups group-id "${nameOrId}" \
        "${outputStyle}"
}


#
# Main script
#

locJson="$(lib parse-location --output=json "${location}")" \
|| exit "$?"
region="$(jget --output=raw "${locJson}" '.region')"
zone="$(jget --output=raw "${locJson}" '.zone // ""')"

instanceId=
instanceName=
if [[ ${nameOrId} =~ ^i-[*0-9a-f]+$ ]]; then
    instanceId="${nameOrId}"
else
    instanceName="${nameOrId}"
fi

vpcId=
if [[ ${vpcNameOrId} != '' ]]; then
    vpcId="$(lib find-vpc --loc="${location}" "${vpcNameOrId}")" \
    || exit "$?"
fi

filters=()
if [[ ${instanceId} != '' ]]; then
    filters+=(instance-id="${instanceId}")
fi
if [[ ${instanceName} != '' ]]; then
    filters+=(tag:Name="${instanceName}")
fi
if [[ ${vpcId} != '' ]]; then
    filters+=(vpc-id="${vpcId}")
fi
if [[ ${zone} != '' ]]; then
    filters+=(availability-zone="${zone}")
fi

ec2-json describe-instances --loc="${location}" \
    "$(lib filter-spec "${filters[@]}")" \
    :: '[.Reservations[] | .Instances[] | { InstanceId, SubnetId, VpcId, Tags }]'
