#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License, Version 2.0.
# Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Load the helper libraries.
. "$(dirname "$(readlink -f "$0")")/lib/init.sh" || exit "$?"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] [<file-path>]
      Extracts the public key from a private key PEM file or converts a public
      key PEM file to different formats. If no path is given, this command will
      read from stdin.

    --output=<style>
      What to output.
      `aws-fingerprint` -- AWS fingerprint for the key, for keys imported into
        AWS.
      `aws-generated-fingerprint` -- AWS fingerprint for the key, for keys that
        AWS generates internally. This is based on the contents of the _private_
        key, and as such cannot be used when passing a public key to this command.
      `public-key` -- Public key in PEM format. This is the default.
      `ssh-auth` -- Public key in SSH format, usable for example in
        `.ssh/authorized_keys` files.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$@"
}

# Want help?
opt-action --call='{ usage }' help/h

# What to output.
opt-value --var=outputStyle --init=public-key \
    --enum='aws-fingerprint aws-generated-fingerprint public-key ssh-auth' \
    output

# File path.
positional-arg --init='/dev/stdin' --var=path file-path

process-args "$@" || usage "$?"


#
# Helper functions
#

# Extracts an imported-style AWS fingerprint.
function do-aws-fingerprint {
    local keyType="$1"
    local keyFile="$2"

    local opts=()
    if [[ ${keyType} == 'public' ]]; then
        opts=(-pubin)
    fi

    openssl pkey <<<"${keyFile}" -pubout -outform DER "${opts[@]}" \
    | openssl md5 -c
}

# Extracts an internal-style AWS fingerprint.
function do-aws-generated-fingerprint {
    local keyType="$1"
    local keyFile="$2"

    if [[ ${keyType} == 'public' ]]; then
        error-msg 'Internally-generated AWS form requires a private (not public) key.'
        return 1
    fi

    openssl pkcs8 <<<"${keyFile}" -nocrypt -topk8 -outform DER \
    | openssl sha1 -c
}

# Extracts a PEM public key.
function do-public-key {
    local keyType="$1"
    local keyFile="$2"

    local opts=()
    if [[ ${keyType} == 'public' ]]; then
        opts=(-pubin)
    fi

    openssl pkey <<<"${keyFile}" -pubout "${opts[@]}"
}

# Extracts an SSH-style public key.
function do-ssh-auth {
    local keyType="$1"
    local keyFile="$2"

    # Convert it to a PEM public key first (which will be a no-op if it's
    # already a public key). We do this because `ssh-keygen` will complain if
    # you pass a private key via a file that has `g+r` or `o+r` permissions
    # (including stdin); this is well-intentioned but highly misguided. We
    # sidestep the problem by doing the private-to-public conversion first
    # (right here), and _then_ calling on `ssh-keygen` just to switch the
    # format.
    keyFile="$(do-public-key "${keyType}" "${keyFile}")"

    ssh-keygen <<<"${keyFile}" -i -mPKCS8 -f /dev/stdin
}


#
# Main script
#

if [[ ! -r "${path}" ]]; then
    error-msg "Not readable: ${path}"
    exit 1
fi

# Extract only the _first_ PEM-looking block from the file.
keyFile="$(awk <"${path}" '
    BEGIN { found = 0; }
    !found && /^-----BEGIN / { found = 1; }
    found { print; }
    found && /^-----END / { exit; }
')"

keyType='private'
if [[ ${keyFile} =~ ^$'-----BEGIN PUBLIC KEY-----\n' ]]; then
    keyType='public'
fi

"do-${outputStyle}" "${keyType}" "${keyFile}"
