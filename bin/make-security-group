#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

# Load the helper library.
. "${progDir}/lib/init"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...]
      Makes a new security group, configured in a standard way. On success,
      prints the ID of the created security group. See `configure-security-group`
      for details about the resulting configuration.

      --description=<description>
        Brief description of the security group. If not specified, fairly
        generic and content-free text is used (because it does need to be
        defined on the result).
      --in=<region-or-zone>
        What region to make the security group in. Must be specified. If
        specified as an availability zone, only the region portion matters.
      --name=<name>
        Name to assign to the constructed security group. If not specified,
        a name is derived from the associated VPC.
      --progress
        Print progress messages to stderr.
      --vpc=<name-or-id>
        Name or ID of the VPC to be associated with. Must be specified.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Error during argument processing?
argError=0

# Description of the security group.
description=''

# Location (region or availability zone).
inLocation=''

# Name of the security group.
name=''

# Name or ID of the VPC.
vpcNameOrId=''

while (( $# > 0 )); do
    case "$1" in
        --description=?*)
            description="${1#*=}"
            ;;
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --name=?*)
            name="${1#*=}"
            ;;
        --progress)
            progress-msg-switch --enable
            ;;
        --vpc=?*)
            vpcNameOrId="${1#*=}"
            ;;
        -h|--help)
            argError=-1 # `-1` suppresses error exit after displaying usage.
            break
            ;;
        --)
            # Explicit end of options.
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument.
            break
            ;;
    esac

    shift
done

if (( !argError )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi
    if [[ ${vpcNameOrId} == '' ]]; then
        echo 1>&2 'Missing option: --vpc'
        argError=1
    fi
fi

if (( argError )); then
    usage "${argError}"
fi


#
# Helper functions
#

# Figures out a name for the security group: If the VPC has a name, use that as
# a basis. Or, if the VPC doesn't have a name, then just use the VPC ID as the
# basis.
function figure-out-name {
    local filterSpec=

    local name
    name=$(ec2-json describe-vpcs \
        --in="${inRegion}" \
        "$(lib filter-spec vpc-id="${vpcId}")" \
        :: --raw \
        '.Vpcs[0].Tags[] | select(.Key == "Name") | .Value'
    ) \
    || return "$?"

    if [[ ${name} == '' ]]; then
        name="for-${vpcId}"
    fi

    echo "$(lib now-stamp)-${name}"
}


#
# Main script
#

inRegion="$(lib region-from-location "${inLocation}")" \
|| exit "$?"

# Validate or find the ID of the VPC.
vpcId="$(lib find-vpc --in="${inRegion}" "${vpcNameOrId}")" \
|| exit "$?"

# Figure out the name if not passed as an option.
if [[ ${name} == '' ]]; then
    name="$(figure-out-name)" \
    || exit "$?"
fi

# Make up a description if not passed as an option.
if [[ ${description} == '' ]]; then
    description="$(lib now-stamp via-script)"
fi

groupId="$(ec2-json create-security-group \
    --in="${inRegion}" \
    description="${description}" \
    name="${name}" \
    tagSpec:json="$(lib name-tag-spec 'security-group' "${name}")" \
    vpcId="${vpcId}" \
    '
        $tagSpec +
        {
            Description: $description,
            GroupName: $name,
            VpcId: $vpcId
        }
    ' \
    :: --raw '.GroupId'
)" \
|| exit "$?"

progress-msg 'Made security group:'
progress-msg "  id:   ${groupId}"
progress-msg "  name: ${name}"

# Note: Past this point, if there are errors, we attempt to clean up the
# partial mess by deleting the security group.

error=0

progressArg=($(progress-msg-switch --print-option))
lib configure-security-group \
    "${progressArg[@]}" \
    --in="${inRegion}" --security-group="${groupId}" \
|| error="$?"

if (( error )); then
    progress-msg 'Error(s) after group creation. Attempting cleanup!'
    ec2-json delete-security-group \
        --in="${inRegion}" \
        groupId="${groupId}" \
        '{ GroupId: $groupId }' \
    || progress-msg 'Error while deleting group, alas!'
    exit "${error}"
fi

echo "${groupId}"
