#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

# Load the helper library.
. "${progDir}/lib/init"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:
    
    ${name} [<opt> ...] <name-or-id>
      Finds a security group by name or validates the existence of one by
      ID. If passed an ID, it can either be the ID of a security group per
      se, or it can be an ID of a VPC which is taken to refer to the default
      security group for the indicated VPC. On success, prints the security
      group ID (by default) or the entire group info object.
    
      --in=<region-or-zone>
        Where to look. Must be specified. If specified as an availability
        zone, only the region portion matters.
      --print-all
        Print the full info object, not just the ID.
    
    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Error during argument processing?
argError=0

# Location (region or availability zone).
inLocation=''

# Print full object?
printAll=0

while (( $# > 0 )); do
    case "$1" in
        --in=?*)
            inLocation="${1#*=}"
            ;;
        -h|--help)
            argError=-1 # `-1` suppresses error exit after displaying usage.
            break
            ;;
        --print-all)
            printAll=1
            ;;
        --)
            # Explicit end of options.
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument.
            break
            ;;
    esac

    shift
done

if (( !argError && ($# < 1) )); then
    echo 1>&2 'Missing argument: name or ID'
    argError=1
else
    nameOrId="$1"
    shift
fi

if (( !argError )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi
fi

if (( argError )); then
    usage "${argError}"
fi


#
# Main script
#

inRegion="$(lib region-from-location "${inLocation}")" \
|| exit "$?"

filterSpec=''
if [[ ${nameOrId} =~ ^sg- ]]; then
    # It looks like a security group ID.
    filterSpec="$(lib filter-spec group-id="${nameOrId}")"
elif [[ ${nameOrId} =~ ^vpc- ]]; then
    # It looks like a VPC ID.
    filterSpec="$(lib filter-spec group-name=default vpc-id="${nameOrId}")"
else
    # It's expected to be the name of a security group.
    filterSpec="$(lib filter-spec group-name="${nameOrId}")"
fi

result="$(
ec2-json describe-security-groups \
    --in="${inRegion}" \
    "${filterSpec}" \
    :: \
    '
        .SecurityGroups
        |
        {
            count: (. | length),
            group: .[0],
            all:   map(.GroupId + " " + (.GroupName | tojson))
        }
    '
)" \
|| exit "$?"

count="$(jget "${result}" '.count')"

if (( count == 0 )); then
    echo 1>&2 "No such security group: ${nameOrId}"
    exit 1
elif (( count != 1 )); then
    echo 1>&2 'Ambiguous name or ID matches all of:'
    jget --raw 1>&2 "${result}" '.all[] | "  " + .'
    exit 1
fi

if (( printAll )); then
    jget "${result}" '.group'
else
    jget --raw "${result}" '.group.GroupId'
fi
