#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

# Load the helper library.
. "${progDir}/lib/init"


#
# Parameters for occasional update.
#

# Pattern for the AMI name to select. This includes, for example, the version
# of the kernel we want to find.
amiNamePattern='amzn2-ami-kernel-5.10-hvm-*-gp2'


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...]
      Finds an AMI to use when launching an instance. On success, prints
      a JSON object of the salient info.

      --in=<availability-zone>
        Where the AMI is to be launched. Must be specified.
      --instance-type=<type>
        What type of instance is to be launched. Must be specified.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Want help?
opt-action --call=usage help/h=0

# Location (availability zone).
opt-value --required --var=inLocation in

# Instance type.
opt-value --required --var=instanceType --match='[a-z0-9]+\.[a-z0-9]+' instance-type

process-args "$@" || usage "$?"


#
# Main script
#

inRegion="$(lib region-from-zone "${inLocation}")" \
|| exit "$?"

# Check to see if the indicated instance type is available in the availability
# zone.

filterSpec="$(lib filter-spec \
    location="${inLocation}" \
    instance-type="${instanceType}"
)"

foundInstanceType="$(
ec2-json describe-instance-type-offerings \
    --in="${inRegion}" \
    filterSpec:json="${filterSpec}" \
    '$filterSpec + { LocationType: "availability-zone" }' \
    :: '.InstanceTypeOfferings | length'
)" \
|| exit "$?"

if (( !foundInstanceType )); then
    echo 1>&2 "No such instance type: ${instanceType} in ${inLocation}"
    exit 1
fi

# `describe-instance-types` to extract the supported architecture, ignoring
# `i386` which we don't care about (`x86_64` is the modern choice).

architecture="$(
ec2-json describe-instance-types \
    --in="${inRegion}" \
    instanceType="${instanceType}" \
    '{ InstanceTypes: [$instanceType] }' \
    :: --raw '
        .InstanceTypes[0].ProcessorInfo.SupportedArchitectures
        | map(select(. != "i386"))
        | .[0] // "error"
    '
)" \
|| exit "$?"

if [[ ${architecture} == 'error' ]]; then
    echo 1>&2 "Unsupported instance type: ${instanceType} in ${inLocation}"
    exit 1
fi

# `describe-images` to find the most recent salient AMI.

thisYear="$(date "+%Y")"
filterSpec="$(lib filter-spec \
    architecture="${architecture}" \
    name="${amiNamePattern}" \
    creation-date="${thisYear}*" \
    creation-date="$(( thisYear - 1 ))*" \
    image-type=machine \
    root-device-type=ebs \
)"

ec2-json describe-images \
    --in="${inRegion}" \
    filterSpec:json="${filterSpec}" \
    '$filterSpec +
    {
        ExecutableUsers: ["all"],
        Owners: ["amazon"]
    }' \
    :: '
    .Images | max_by(.CreationDate)
    |
    {
        Description: .Description,
        ImageId:     .ImageId,
        Name:        .Name
    }'
