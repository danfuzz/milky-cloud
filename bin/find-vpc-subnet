#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

# Load the helper library.
. "${progDir}/lib/init"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...]
      Finds a VPC subnet that meets the indicated criteria. On success,
      prints the subnet ID.

      --in=<availability-zone>
        What availibility zone to look in. Must be specified.
      --vpc=<name-or-id>
        Name or ID of the VPC to look in. Must be specified.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Error during argument processing?
argError=0

# Location (availability zone).
inLocation=''

# VPC name or ID.
nameOrId=''

while (( $# > 0 )); do
    case "$1" in
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --vpc=?*)
            nameOrId="${1#*=}"
            ;;
        -h|--help)
            argError=-1 # `-1` suppresses error exit after displaying usage.
            break
            ;;
        --)
            # Explicit end of options.
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument.
            break
            ;;
    esac

    shift
done

if (( !argError )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi
    if [[ ${nameOrId} == '' ]]; then
        echo 1>&2 'Missing option: --vpc'
        argError=1
    fi
fi

if (( argError )); then
    usage "${argError}"
fi


#
# Main script
#

inRegion="$(lib region-from-zone "${inLocation}")" \
|| exit "$?"

vpcId="$(lib find-vpc --in="${inRegion}" "${nameOrId}")" \
|| exit "$?"

filterSpec="$(lib filter-spec \
    availability-zone="${inLocation}" \
    vpc-id="${vpcId}"
)"

result="$(ec2-json describe-subnets \
    --in="${inRegion}" \
    "${filterSpec}" \
    :: '.Subnets | map(.SubnetId)' \
)" \
|| exit "$?"

subnetId="$(jget --raw "${result}" '
    if length == 0 then "none"
    elif length == 1 then .[0]
    else "ambiguous"
    end
')"

case "${subnetId}" in
    ambiguous)
        echo 1>&2 'Ambiguous specification matches all of:'
        jget 1>&2 --raw "${result}" '.[] | "  " + .'
        exit 1
        ;;
    none)
        echo 1>&2 'No such subnet.'
        exit 1
        ;;
esac

echo "${subnetId}"
