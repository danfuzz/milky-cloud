#!/bin/bash
#
# Copyright 2022 the Milky-cloud Authors (Dan Bornstein et alia).
# Licensed AS IS and WITHOUT WARRANTY under the Apache License, Version 2.0.
# Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Load the helper libraries.
. "$(dirname "$(readlink -f "$0")")/lib/init.sh" || exit "$?"

#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...]
      Creates a new private key, with a couple different options for type.

      --out=<file>
        File to write to. Defaults to stdout.
      --type=<type>
        What type of key to create. Must be specified
        `host` -- SSH host key, ED25519 algorithm.
        `user` -- User key, 2048 bits, RSA algorithm.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$@"
}

# Want help?
opt-action --call='{ usage }' help/h

# Key type.
opt-value --required --var=type --enum='host user' type

# Where to output.
opt-value --var=out --init='/dev/stdout' out

process-args "$@" || usage "$?"


#
# Main script
#

case "${type}" in
    host)
        # Boy howdy `ssh-keygen` is a pain in the butt to script. That is, it
        # _really_ wants to be used interactively, and it doesn't "get" how
        # writing to stdout (or any non-file) works, so we fake it out. What's
        # going on here:
        #
        # FD #3 gets wired back to _our_ stdout to get the actual output we
        # want, and then `ssh-keygen`'s stdout gets squelched. We make a couple
        # symbolic links for the command to write to, including `/dev/null` for
        # the public key (which we don't care about here). We pipe `y` into the
        # command to answer the question, "Overwrite <output-file>?" And then
        # after running the command, we remove the links (via `trap` so that the
        # exit status is trivially preserved). Source of inspiration:
        #   <https://gist.github.com/kraftb/9918106>
        outName="./$(this-cmd-name)-$$"
        trap "rm -f \"${outName}\" \"${outName}.pub\"" EXIT
        ln -s /dev/fd/3 "${outName}" || exit "$?"
        ln -s /dev/null "${outName}.pub" || exit "$?"
        ssh-keygen <<<'y' 3>&1 >/dev/null \
            -q -t ed25519 -N '' -C '' -f "${outName}"
        ;;
    user)
        # Squelch stderr to avoid the progress spew.
        openssl genrsa -out "${out}" 2048 2>/dev/null
        ;;
esac
