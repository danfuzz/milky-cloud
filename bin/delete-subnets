#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

# Load the helper library.
. "${progDir}/lib/init"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] [<assignment> ...] <jq-expression> ...
      Removes rules from an existing subnet, based on given filter criteria.
      Simple filters can be specified via options, or if no such option is
      used, a general filter can be specified via assignment and expression
      arguments, similar to `aws-json`. This filter is expected to accept
      to accept `Subnet` objects and then re-output the ones to be removed.

      On success, prints a JSON array of the IDs of all removed subnets.

      --all
        Remove all subnets.
      --in=<region-or-zone>
        What region to make the security group in. Must be specified. If
        specified as an availability zone, only the region portion matters.
      --quiet
        Suppress non-error output to stdout.
      --vpc=<name-or-id>
        Name or ID of the VPC to operate on.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Want help?
opt-action --call=usage help/h=0

# Location (region or availability zone).
opt-value --required --var=inLocation in

# Name or ID of the VPC.
opt-value --required --var=vpcNameOrId --filter='/./' vpc

# Simple filter for `--all` (degenerate choice option).
opt-choice --var=simpleFilter \
    all='.'

# Quiet?
opt-toggle --var=quiet quiet

# Filter arguments.
rest-arg --var=filterArgs

process-args "$@" || usage "$?"

if (( ${#filterArgs[@]} == 0 )); then
    if [[ ${simpleFilter} == '' ]]; then
        echo 1>&2 'Missing filter option or arguments.'
        exit 1
    fi
    filterArgs=("${simpleFilter}")
elif [[ ${simpleFilter} != '' ]]; then
    echo 1>&2 'Cannot specify both filter option and arguments.'
    exit 1
fi


#
# Main script
#

inRegion="$(lib region-from-location "${inLocation}")" \
|| exit "$?"

# Validate or find the ID of the VPC.
vpcId="$(lib find-vpc --in="${inRegion}" "${vpcNameOrId}")" \
|| exit "$?"

allSubnets="$(ec2-json describe-subnets \
    --in="${inRegion}" \
    "$(lib filter-spec vpc-id="${vpcId}")" \
    :: '.Subnets[]'
)" \
|| exit "$?"

selectedSubnets="$(
    jval <<<"${allSubnets}" --read-stdin -- "${filterArgs[@]}"
)" \
|| exit "$?"

subnetIds=($(
    jval <<<"${selectedSubnets}" --words --slurp-stdin 'map(.SubnetId) | sort | .[]'
)) \
|| exit "$?"

for id in "${subnetIds[@]}"; do
    ec2-json delete-subnet \
        --in="${inRegion}" \
        id="${id}" \
        '{
            SubnetId: $id
        }' \
    || exit "$?"
done

if (( !quiet )); then
    jarray --strings "${subnetIds[@]}"
fi
