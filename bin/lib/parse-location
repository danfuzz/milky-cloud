#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

# Set up for library-internal usage.
. "${progDir}/init" --lib


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} <zone-or-region>
      Parses a location -- a region or availability zone -- and if
      valid then optionally prints out one of the components. Note that
      only one each `--input-` and `--print-` option has any effect (the
      last specified).

      --input-zone
        Require an availibility zone as input.
      --input-region
        Require a region as input.
      --print-region
        Print the parsed region.
      --print-zone
        Print the full zone (which will be the same as the input).
        Implies `--input-zone`.
      --print-zone-suffix
        Print the zone suffix (everything after the region).
        Implies `--input-zone`.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Error during argument processing?
argError=0

# Location (availability zone or region).
inLocation=''

# Required input type.
inputType='any'

# Desired output.
printItem='none'

while (( $# > 0 )); do
    case "$1" in
        --input-region)
            inputType='region'
            ;;
        --input-zone)
            inputType='zone'
            ;;
        --print-region)
            printItem='region'
            ;;
        --print-zone)
            printItem='zone'
            ;;
        --print-zone-suffix)
            printItem='zone-suffix'
            ;;
        -h|--help)
            argError=-1 # `-1` suppresses error exit after displaying usage.
            break
            ;;
        --)
            # Explicit end of options.
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument.
            break
            ;;
    esac

    shift
done

if [[ ${printItem} =~ ^zone ]]; then
    # Don't allow region input if we are to print a zone-ish thing.
    inputType='zone'
fi

if (( $# < 1 )); then
    echo 1>&2 'Missing argument: zone or region'
    argError=1
else
    inLocation="$1"
    shift
fi

if (( argError )); then
    usage "${argError}"
fi


#
# Main script
#

# Split into region and zone suffix, or die trying.
if [[ ! ${inLocation} =~ ^([a-z]{2}-[a-z]+-[0-9]+)([a-z]|-[a-z]+-[0-9][a-z])?$ ]]; then
    echo 1>&2 'Unparseable location:' "${inLocation}"
    exit 1
fi

region="${BASH_REMATCH[1]}"
zoneSuffix="${BASH_REMATCH[2]}"

# Validate the required input type, if needed.
case "${inputType}" in
    region)
        if [[ ${zoneSuffix} != '' ]]; then
            echo 1>&2 'Region input required; got zone.'
            exit 1
        fi
        ;;
    zone)
    if [[ ${zoneSuffix} == '' ]]; then
        echo 1>&2 'Zone input required; got region.'
        exit 1
    fi
    ;;
esac

# Output whatever is requested, if anything.
case "${printItem}" in
    region)
        echo "${region}"
        ;;
    zone)
        echo "${inLocation}"
        ;;
    zone-suffix)
        echo "${zoneSuffix}"
        ;;
esac
