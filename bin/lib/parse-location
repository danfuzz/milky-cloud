#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

. "${progDir}/init"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] <zone-or-region>
      Parses a location -- a region or availability zone -- and if
      valid then optionally prints out one of the components. Note that
      only one each `--input-` and `--print-` option has any effect (the
      last specified).

      --input-any
        Accept either an availability zone or a region as input. This is the
        default.
      --input-region
        Require a region as input.
      --input-zone
        Require an availibility zone as input.
      --print-none
        Do not print anything. This is the default.
      --print-region
        Print the parsed region.
      --print-zone
        Print the full zone (which will be the same as the input). Implies
        `--input-zone`.
      --print-zone-suffix
        Print the zone suffix (everything after the region). Implies
        `--input-zone`.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Want help?
opt-action --call=usage help/h=0

# Required input type.
opt-choice --var=inputType --default=input-any \
    input-any input-region input-zone

# Item to print.
opt-choice --var=printItem --default=print-none \
    print-none print-region print-zone print-zone-suffix

# Location (availability zone or region).
positional-arg --required --var=location zone-or-region

process-args "$@" || usage "$?"

if [[ ${printItem} =~ ^print-zone ]]; then
    # Don't allow region input if we are to print a zone-ish thing.
    inputType='input-zone'
fi


#
# Main script
#

# Split into region and zone suffix, or die trying.
if [[ ! ${location} =~ ^([a-z]{2}-[a-z]+-[0-9]+)([a-z]|-[a-z]+-[0-9]+[a-z])?$ ]]; then
    echo 1>&2 'Unparseable location:' "${location}"
    exit 1
fi

region="${BASH_REMATCH[1]}"
zoneSuffix="${BASH_REMATCH[2]}"

# Validate the required input type, if needed.
case "${inputType}" in
    input-region)
        if [[ ${zoneSuffix} != '' ]]; then
            echo 1>&2 'Region input required; got zone.'
            exit 1
        fi
        ;;
    input-zone)
        if [[ ${zoneSuffix} == '' ]]; then
            echo 1>&2 'Zone input required; got region.'
            exit 1
        fi
        ;;
esac

# Output whatever is requested, if anything.
case "${printItem}" in
    print-region)
        echo "${region}"
        ;;
    print-zone)
        echo "${inLocation}"
        ;;
    print-zone-suffix)
        echo "${zoneSuffix}"
        ;;
esac
