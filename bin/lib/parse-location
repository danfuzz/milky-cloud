#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

. "${progDir}/init"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] <zone-or-region>
      Parses a location -- a region or availability zone -- and if valid then
      optionally prints out one of the components.

      --input=<style>
        `any` -- Accept either an availability zone or region as <zone-or-region>.
          This is the default.
        `region` -- Require a region.
        `zone` -- Require an availability zone.
      --output=<style>
        `none` -- Do not produce any output. This is the default.
        `region` -- Output the region.
        `zone` -- Output the availability zone (which will be the same as the
          input). This implies `--input=zone`.
        `zone-suffix` -- Output the zone suffix (everything after the region).
          This implies `--input=zone`.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Want help?
opt-action --call=usage help/h=0

# Input type.
opt-value --var=inputType --default=any --enum='any region zone' input

# Item to output.
opt-value --var=outputItem --default=none --enum='none region zone zone-suffix' output

# Location to parse, and parsed bits.
region=''
zoneSuffix=''
positional-arg --required --var=zoneOrRegion --call=parse-zone-or-region zone-or-region
function parse-zone-or-region {
    if [[ ! $1 =~ ^([a-z]{2}-[a-z]+-[0-9]+)([a-z]|-[a-z]+-[0-9]+[a-z])?$ ]]; then
        echo 1>&2 'Invalid value for argument <zone-or-region>:' "$1"
        exit 1
    fi

    region="${BASH_REMATCH[1]}"
    zoneSuffix="${BASH_REMATCH[2]}"
}

process-args "$@" || usage "$?"

if [[ ${outputItem} =~ ^zone ]]; then
    # Don't allow region input if we are to print a zone-ish thing.
    inputType='zone'
fi


#
# Main script
#

# Validate the required input type, if needed.
case "${inputType}" in
    region)
        if [[ ${zoneSuffix} != '' ]]; then
            echo 1>&2 "Region required; got zone: ${zoneOrRegion}"
            exit 1
        fi
        ;;
    zone)
        if [[ ${zoneSuffix} == '' ]]; then
            echo 1>&2 "Zone required; got region: ${zoneOrRegion}"
            exit 1
        fi
        ;;
esac

# Output whatever is requested, if anything.
case "${outputItem}" in
    region)
        echo "${region}"
        ;;
    zone)
        echo "${zoneOrRegion}"
        ;;
    zone-suffix)
        echo "${zoneSuffix}"
        ;;
esac
