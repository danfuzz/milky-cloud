#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

. "${progDir}/init"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] [--] [<filter-spec> ...]
      Constructs and prints a JSON object suitable for use as a
      `Filters` specification argument to an AWS command. The result is
      an object that binds `Filters`, so it can be used as-is (if that is
      the only argument) or merged with other arguments.

      <filter-spec>
        <name>=<value> Use `value` as a filter for `name`. If the same
        name is used multiple times, then (per the usual AWS rules) the
        result is a logical OR of the values.

      --compact
        Output in compact form (not multiline JSON).

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Compact output?
compactOutput=0

# List of filter specifications, as parallel arrays of name and value.
filterNames=()
filterValues=()

# Error during argument processing?
argError=0

# Parse options.
while (( $# > 0 )); do
    case "$1" in
        --compact)
            compactOutput=1
            ;;
        -h|--help)
            argError=-1 # `-1` suppresses error exit after displaying usage.
            ;;
        --)
            # Explicit end of options.
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument.
            break
            ;;
    esac

    shift
done

# Parse filter specifications.
while (( $# > 0 && !argError )); do
    arg="$1"
    if [[ ${arg} == '--' ]]; then
        shift
        break
    fi

    [[ ${arg} =~ ^([-_:.a-zA-Z0-9]+)=(.*)$ ]] \
    || break

    filterNames+=("${BASH_REMATCH[1]}")
    filterValues+=("${BASH_REMATCH[2]}")

    shift
done

if (( $# != 0 )); then
    echo 1>&2 'Could not parse filter specification:' "$1"
    argError=1
fi

if (( argError )); then
    usage "${argError}"
fi


#
# Main script
#

jqArgs=(-n)

if (( compactOutput )); then
    jqArgs+=('--compact-output')
fi

jqArgs+=(
    --argjson names "$(jarray --strings "${filterNames[@]}")"
    --argjson values "$(jarray --strings "${filterValues[@]}")"
)

exec jq "${jqArgs[@]}" \
'
    [$names, $values]
    |
    transpose
    |
    reduce .[] as $binding ({};
          $binding[0] as $key
        | $binding[1] as $value
        | (.[$key] // []) as $orig
        | .[$key] = [$orig[], $value]
    )
    |
    to_entries
    |
    { Filters: map({ Name: .key, Values: .value}) }
'
