#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

# Note: No library init here. The library init uses this script, so we'd be
# setting ourselves up for infinite recursion.


#
# Argument parsing
#

# Error during argument processing?
argError=0

while (( $# > 0 )); do
    case "$1" in
        -h|--help)
            argError=-1 # `-1` suppresses error exit after displaying usage.
            break
            ;;
        --)
            # Explicit end of options.
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Explicit end of options.
            break
            ;;
    esac

    shift
done

if (( argError )); then
    echo 'Usage:'
    echo ''
    echo "${progName} [<opt> ...]"
    echo '  Performs standard preflight checks needed before running stuff in'
    echo '  this library.'
    echo ''
    echo "${progName} [--help | -h]"
    echo '  Displays this message.'
    exit $(( argError < 0 ? 0 : argError ))
fi


#
# Main script
#

error=0

if ! which aws >/dev/null 2>&1; then
    echo 1>&2 'Missing `aws` binary.'
    error=1
fi

if ! which jq >/dev/null 2>&1; then
    echo 1>&2 'Missing `jq` binary.'
    error=1
fi

if [[ ${AWS_ACCESS_KEY_ID} == '' ]]; then
    echo 1>&2 'Missing `AWS_ACCESS_KEY_ID` environment variable.'
    error=1
fi

if [[ ${AWS_SECRET_ACCESS_KEY} == '' ]]; then
    echo 1>&2 'Missing `AWS_SECRET_ACCESS_KEY` environment variable.'
    error=1
fi

# TODO: Should probably do more stuff!

exit "${error}"
