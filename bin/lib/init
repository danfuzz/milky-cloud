#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

if [[ ${_milky_cloud_libDir} != '' ]]; then
    echo 1>&2 'Warning: Not reinitializing library!'
    return 1
fi

# Figure out the symlink-resolved directory of this script.
_milky_cloud_libDir="$(readlink -f "${BASH_SOURCE[0]}")" || exit "$?"
_milky_cloud_libDir="${_milky_cloud_libDir%/*}"

# Figure out the "main" directory. If the directory of `$0` is the same as the
# directory of this script, then we're running a library script, and the "main"
# directory is one up. Otherwise, the main directory is the directory of `$0`.
_milky_cloud_mainDir="$(readlink -f "$0")" || exit "$?"
_milky_cloud_mainDir="${_milky_cloud_mainDir%/*}"
if [[ ${_milky_cloud_mainDir} == ${_milky_cloud_libDir} ]]; then
    _milky_cloud_mainDir="$(cd "${_milky_cloud_libDir}/.."; /bin/pwd)"
fi


#
# Library functions
#

# Load the argument processor library.
. "${_milky_cloud_libDir}/arg-processor"

# Calls `aws-json ec2`. This combination is used enough to warrant having it be
# easier to say than `lib aws-json ec2 ...`.
function ec2-json {
    lib aws-json ec2 "$@"
}

# Calls `json-array`. This script is used enough to warrant having it be easier
# to say than `lib json-array ...`.
function jarray {
    lib json-array "$@"
}

# Calls `json-get`. This script is used enough to warrant having it be easier to
# say than `lib json-get ...`.
function jget {
    lib json-get "$@"
}

# Calls `json-val`. This script is used enough to warrant having it be easier to
# say than `lib json-val ...`.
function jval {
    lib json-val "$@"
}

# Calls through to an arbitrary library script.
function lib {
    if (( $# == 0 )); then
        echo 1>&2 'Missing library script name.'
        return 1
    fi

    local name="$1"
    shift

    if ! [[ ${name} =~ ^[-a-z]+$ ]]; then
        echo 1>&2 'Weird script name:' "${name}"
        return 1
    elif [[ -x "${_milky_cloud_libDir}/${name}" ]]; then
        # It's in the internal helper library.
        "${_milky_cloud_libDir}/${name}" "$@"
    elif [[ -x "${_milky_cloud_mainDir}/${name}" ]]; then
        # It's an exposed script.
        "${_milky_cloud_mainDir}/${name}" "$@"
    else
        echo 1>&2 'No such library script:' "${name}"
        return 1
    fi
}

# Whether progress messages are enabled.
_milky_cloud_progressEnabled=0

# Prints a "progress" message to stderr, if such are enabled. Or, if a single
# recognized option is passed, performs that action. (Hopefully, you never just
# want to say those as a message!)
#
# --disable | --set=0 -- Disables progress messages.
# --enable | --set=1` -- Enables progress messages.
# --print-option -- Prints `--progress` to stdout, if progress messages are
#   enabled. (This is to make it easy to pass this option down to another
#   command.)
function progress-msg {
    if (( $# == 1 )); then
        case "$1" in
            --enable|--set=1)
                _milky_cloud_progressEnabled=1
                return
                ;;
            --disable|--set=0)
                _milky_cloud_progressEnabled=0
                return
                ;;
            --print-option)
                if (( _milky_cloud_progressEnabled )); then
                    echo '--progress'
                fi
                return
                ;;
        esac
    fi

    if (( _milky_cloud_progressEnabled )); then
        echo 1>&2 "$@"
    fi
}

# Enables, disables, or checks the enabled status of "progress" messages.
#
# --disable | 0 -- Disables progress messages.
# --enable | 1` -- Enables progress messages.
# --print-option -- Prints `--progress` to stdout, if progress messages are
#   enabled. (This is to make it easy to pass this option down to another
#   command.)
# --status -- Prints `1` or `0` to stdout, to indicate enabled status.
function progress-msg-toggle {
    case "$1" in
        --enable|1)
            _milky_cloud_progressEnabled=1
            ;;
        --disable|0)
            _milky_cloud_progressEnabled=0
            ;;
        --print-option)
            if (( _milky_cloud_progressEnabled )); then
                echo '--progress'
            fi
            ;;
        --status)
            echo "${_milky_cloud_progressEnabled}"
            ;;
        *)
            echo 1>&2 "Unrecognized argument: $1"
            return 1
    esac
}


#
# Library initialization
#

# Calls the prerequisite checker if it doesn't seem to have yet been run in this
# session.
if [[ ${MILKY_CLOUD_PREREQUISITES_DONE} != 1 ]]; then
    if lib check-prerequisites; then
        export MILKY_CLOUD_PREREQUISITES_DONE=1
    else
        echo 1>&2 'Failed one or more prerequisite checks!'
        exit 1
    fi
fi
