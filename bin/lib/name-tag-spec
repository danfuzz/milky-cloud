#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

# Set up for library-internal usage.
. "${progDir}/init" --lib


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:
    
    ${name} [<opt> ...] <resource-type> <name>
    
    Constructs and prints a JSON object suitable for use as a
    `TagSpecifications` argument to an AWS command, to _just_ define a
    `Name` tag. The result is an object that binds `TagSpecifications`, so
    it can be used as-is (if that is the only argument) or merged with
    other arguments.
    
    --compact
      Output in compact form (not multiline JSON).
    
    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Error during argument processing?
argError=0

# Compact output?
compactOutput=0

# Resource type.
resourceType=''

# Name for the resource.
name=''

while (( $# > 0 )); do
    case "$1" in
        --compact)
            compactOutput=1
            ;;
        -h|--help)
            argError=-1 # `-1` suppresses error exit after displaying usage.
            break
            ;;
        --)
            # Explicit end of options.
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument.
            break
            ;;
    esac

    shift
done

if (( $# < 2 )); then
    echo 1>&2 'Missing argument: resource type and/or name'
    argError=1
fi

resourceType="$1"
name="$2"

if (( argError )); then
    usage "${argError}"
fi


#
# Main script
#

jqArgs=(-n)

if (( compactOutput )); then
    jqArgs+=('--compact-output')
fi

jqArgs+=(
    --arg name "${name}"
    --arg resourceType "${resourceType}"
)

exec jq "${jqArgs[@]}" \
'{
    TagSpecifications: [
        {
            ResourceType: $resourceType,
            Tags: [
                {
                    Key: "Name",
                    Value: $name
                }
            ]
        }
    ]
}'
