#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

. "${progDir}/init"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] <protocol> <port>

    Constructs and prints a JSON object suitable for use as an
    `IpPermissions` entry to one of the security group rule addition
    commands. <protocol> must be one of `all`, `tcp`, or `udp`. The resulting
    specification contains both IPv4 and IPv6 entries. <port> must be a valid
    port number or `all`.

    --compact
      Output in compact (not multiline) JSON form.
    --json
      Output in JSON form. This is the default.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Want help?
opt-action --call=usage help/h=0

# Output style.
opt-choice --var=outputStyle --default=json compact json

# Protocol.
positional-arg --required --var=protocol --match='all|tcp|udp' protocol

# Port.
positional-arg --required --var=port --match='[0-9]+|all' port

process-args "$@" || usage "$?"


#
# Main script
#

if [[ ${port} == 'all' ]]; then
    port='-1'
fi

if [[ ${protocol} == 'all' ]]; then
    # Note: Even though this is a "number," the AWS API wants this to be passed
    # as a string.
    protocol='-1'
fi

jval --"${outputStyle}" \
    port:json="${port}" \
    protocol="${protocol}" \
'{
    FromPort:   $port,
    ToPort:     $port,
    IpProtocol: $protocol,
    IpRanges: [
        { CidrIp: "0.0.0.0/0" }
    ],
    Ipv6Ranges: [
        { CidrIpv6: "::/0" }
    ]
}'
