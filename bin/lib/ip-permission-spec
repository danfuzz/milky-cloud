#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

. "${progDir}/init"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] <protocol> <port>

    Constructs and prints a JSON object suitable for use as an
    `IpPermissions` entry to one of the security group rule addition
    commands. <protocol> must be one of `all`, `tcp`, or `udp`. The resulting
    specification contains both IPv4 and IPv6 entries.

    --compact
      Output in compact (not multiline) JSON form.
    --json
      Output in JSON form. This is the default.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Want help?
opt-action --call=usage --value=0 help/h

# Output style.
opt-choice --var=outputStyle --default=string compact json

# Protocol.
protocol=''

# Port.
port=''

rest-arg --call=parse-spec
function parse-spec {
    if (( $# < 2 )); then
        echo 1>&2 'Missing argument: protocol and/or port'
        return 1
    elif (( $# > 2 )); then
        echo 1>&2 'Too many arguments.'
        return 1
    fi

    protocol="$1"
    port="$2"

    case "${protocol}" in
        all|tcp|udp)
            : # It's valid.
            ;;
        *)
            echo 1>&2 "Invalid value for protocol: ${protocol}"
            return 1
            ;;
    esac

    if [[ ${port} != 'all' && ! ${port} =~ ^[0-9]+$ ]]; then
        echo 1>&2 "Invalid value for port: ${port}"
        return 1
    fi
}

process-args "$@" || usage "$?"


#
# Main script
#

outputArg=()
if [[ ${outputStyle} == 'compact' ]]; then
    outputArg=('--compact')
fi

if [[ ${port} == 'all' ]]; then
    port='-1'
fi

if [[ ${protocol} == 'all' ]]; then
    # Note: Even though this is a "number," the AWS API wants this to be passed
    # as a string.
    protocol='-1'
fi

jval "${outputArg[@]}" \
    port:json="${port}" \
    protocol="${protocol}" \
'{
    FromPort:   $port,
    ToPort:     $port,
    IpProtocol: $protocol,
    IpRanges: [
        { CidrIp: "0.0.0.0/0" }
    ],
    Ipv6Ranges: [
        { CidrIpv6: "::/0" }
    ]
}'
