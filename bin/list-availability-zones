#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

# Load the helper library.
. "${progDir}/lib/init"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...]
      Lists all accessible availability zones in a given region. The result
      is one zone name per line (by default), or a JSON array (given the
      appropriate option).

      --in=<region-or-zone>
        What region to look in. Must be specified. If specified as an
        availability zone, only the region portion matters.
      --json
        Produce JSON output.
      --strings
        Produce a list of strings (one per line). This is the default.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Want help?
opt-action --call=usage help/h=0

# Location (region or availability zone).
opt-value --required --var=inLocation in

# What to print.
opt-choice --var=outputStyle --default=strings json strings

process-args "$@" || usage "$?"


#
# Main script
#

inRegion="$(lib region-from-location "${inLocation}")" \
|| exit "$?"

cmd=(ec2-json describe-availability-zones --in="${inRegion}" ::)
suffix=()

if [[ ${outputStyle} == 'strings' ]]; then
    cmd+=(--raw)
    suffix=('| .[]')
fi

"${cmd[@]}" '.AvailabilityZones | map(.ZoneName) | sort' "${suffix[@]}"
