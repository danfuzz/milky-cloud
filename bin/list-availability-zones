#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

# Load the helper library.
. "${progDir}/lib/init"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:
    
    ${name} [<opt> ...]
      Lists all accessible availability zones in a given region. The result
      is one zone name per line (by default), or a JSON array (given an
      appropriate option).
    
      --compact-json
        Produce compact JSON output.
      --in=<region-or-zone>
        What region to look in. Must be specified. If specified as an
        availability zone, only the region portion matters.
      --json
        Produce JSON output.
    
    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Output style.
outputStyle=strings

# Error during argument processing?
argError=0

# Location (availability zone).
inLocation=''

while (( $# > 0 )); do
    case "$1" in
        --compact-json)
            outputStyle=compact-json
            ;;
        --in=?*)
            inLocation="${1#*=}"
            ;;
        --json)
            outputStyle=json
            ;;
        -h|--help)
            argError=-1 # `-1` suppresses error exit after displaying usage.
            break
            ;;
        --)
            # Explicit end of options.
            shift
            break
            ;;
        -?*)
            echo 1>&2 "Unknown option: $1"
            argError=1
            break
            ;;
        *)
            # Non-option argument.
            break
            ;;
    esac

    shift
done

if (( !argError )); then
    if [[ ${inLocation} == '' ]]; then
        echo 1>&2 'Missing option: --in'
        argError=1
    fi
fi

if (( argError )); then
    usage "${argError}"
fi


#
# Main script
#

inRegion="$(lib region-from-location "${inLocation}")" \
|| exit "$?"

cmd=(ec2-json describe-availability-zones --in="${inRegion}" ::)
suffix=()

case "${outputStyle}" in
    compact-json)
        cmd+=(--compact)
        ;;
    strings)
        cmd+=(--raw)
        suffix=('| .[]')
        ;;
esac

"${cmd[@]}" '.AvailabilityZones | map(.ZoneName) | sort' "${suffix[@]}"
