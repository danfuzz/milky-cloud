#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Figure out the symlink-resolved program name and directory.
progName="$(readlink -f "$0")" || exit "$?"
progDir="${progName%/*}"
progName="${progName##*/}"

# Load the helper library.
. "${progDir}/lib/init"


#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...]
      Adds one or more rules to a given security group to specify IP-based
      restrictions. Upon success, prints out a JSON array of all added rules.

      Note: Even though this command only nominally lets you specify one
      rule, AWS splits out multiple rules when the specified rule applies
      to multiple IP address ranges (including notably treating "any IPv4"
      and "any IPv6" as different ranges).

      --egress
        The rule is to be an egress rule.
      --ingress
        The rule is to be an ingress rule.
      --loc=<region-or-zone>
        What region to make the security group in. Must be specified. If
        specified as an availability zone, only the region portion matters.
      --name=<name>
        Name to attach to the rule, if any.
      --port=<number> or --port=all
        Port for the rule, or an indicator to apply to all ports. Must be
        specified.
      --protocol=<spec>
        Protocol(s) the rule applies to, one of `all`, `tcp`, or `udp`. Must be
        specified.
      --quiet (--no-quiet to disable)
        Suppress non-error output to stdout.
      --security-group=<name-or-id>
        Name or ID of the security group to add to. Can also be a VPC ID,
        to indicate the default security group for that VPC.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Want help?
opt-action --call=usage help/h=0

# Rule direction (`ingress` or `egress`).
opt-choice --required --var=direction egress ingress

# Name or ID of the security group.
opt-value --required --var=groupNameOrId --filter='/./' security-group

# Region, passed as either region per se or availability zone.
opt-value --required --var=inRegion --filter=region-from-location loc

# Name of the rule.
opt-value --var=name --filter='/./' name

# Port of the rule.
opt-value --required --var=port --filter='/^([0-9]+|all)$/' port

# Protocol of the rule.
opt-value --required --var=protocol --filter='/^(all|tcp|udp)$/' protocol

# Quiet?
opt-toggle --var=quiet quiet

process-args "$@" || usage "$?"


#
# Main script
#

# Validate or find the ID of the security group.
groupId="$(lib find-security-group --loc="${inRegion}" "${groupNameOrId}")" \
|| exit "$?"

tagSpec='{}'
if [[ ${name} != '' ]]; then
    tagSpec="$(lib name-tag-spec 'security-group-rule' "${name}")"
fi

command="authorize-security-group-${direction}"

ipSpec="$(lib ip-permission-spec "${protocol}" "${port}")" \
|| exit "$?"

filterArg='.SecurityGroupRules | map(.SecurityGroupRuleId)'
if (( quiet )); then
    filterArg='--none'
fi

ec2-json "${command}" \
    --loc="${inRegion}" \
    groupId="${groupId}" \
    ipPermissions:json="[${ipSpec}]" \
    tagSpec:json="${tagSpec}" \
    '
    $tagSpec +
    {
        GroupId: $groupId,
        IpPermissions: $ipPermissions
    }' \
    :: "${filterArg}"
