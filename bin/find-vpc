#!/bin/bash
#
# Copyright 2022 Dan Bornstein.
# Licensed AS IS and WITHOUT WARRANTY under the Apache License,
# Version 2.0. Details: <http://www.apache.org/licenses/LICENSE-2.0>

# Load helper libraries.
. "$(dirname "$(readlink -f "$0")")/lib/init.sh" || exit "$?"

#
# Argument parsing
#

function usage {
    print-usage $'
    Usage:

    ${name} [<opt> ...] <name-or-id>
      Finds a VPC by name or security group ID, or validates the existence of one
      by ID, and prints its information.

      --loc=<region-or-zone>
        Where to look. Must be specified. If specified as an availability zone,
        only the region portion matters.
      --output=<style> :: `compact` `id` `json`
        What to output, as with `json-val`, except that `id` prints just the ID
        of the VPC as a plain string. `id` is the default.

    ${name} [--help | -h]
      Displays this message.
    '

    exit "$1"
}

# Want help?
opt-action --call=usage help/h=0

# Region, passed as either region per se or availability zone.
opt-value --required --var=region --filter=region-from-location loc

# What to print.
opt-value --var=outputStyle --default=id --enum='compact id json' output

# Name or ID to look up.
positional-arg --required --var=nameOrId name-or-id

process-args "$@" || usage "$?"


#
# Helper functions
#

# Performs a `describe-*` call and passes through the JSON output under the
# indicated top-level object key. Print out the final requested result (either
# just the ID or the full info), including possibly doing a second call to
# get the requested info.
function do-find {
    local commandName="$1"
    local topKey="$2"
    local filterName="$3"
    local nameOrId="$4"
    local outputStyle="$5"

    local result
    result="$(ec2-json "${commandName}" \
        --loc="${region}" \
        "$(lib filter-spec "${filterName}=${nameOrId}")"
    )" \
    || return "$?"

    local idResult
    idResult="$(jget "${result}" \
        topKey="${topKey}" \
        '.[$topKey] | map(.VpcId) | unique'
    )"

    local vpcId
    vpcId="$(jget --output=raw \
        "${idResult}" \
        '
        if length == 0 then "none"
        elif length == 1 then .[0]
        else "ambiguous"
        end
    ')"

    case "${vpcId}" in
        ambiguous)
            echo 1>&2 'Ambiguous name or ID matches all of:'
            jget 1>&2 --output=raw "${idResult}" '.[] | "  " + .'
            return 1
            ;;
        none)
            echo 1>&2 'No such VPC.'
            return 1
            ;;
    esac

    if [[ ${outputStyle} == 'id' ]]; then
        echo "${vpcId}"
    else
        if [[ ${topKey} != 'Vpcs' ]]; then
            # We got the ID out of some other object (e.g. a security group),
            # and we've been asked for full info. So we need to actually get
            # that info!
            result="$(ec2-json describe-vpcs \
                --loc="${region}" \
                vpcId="${vpcId}" \
                '{ VpcIds: [$vpcId] }'
            )" \
            || return "$?"
        fi
        jget --output="${outputStyle}" "${result}" '.Vpcs[0]'
    fi
}

# Find a VPC by looking through all the VPCs.
function find-via-describe-vpcs {
    local filterName="$1"
    local nameOrId="$2"
    local outputStyle="$3"

    do-find describe-vpcs Vpcs "${filterName}" "${nameOrId}" "${outputStyle}"
}

# Find a VPC from an associated security group.
function find-via-describe-security-groups {
    local nameOrId="$1"
    local outputStyle="$2"

    do-find describe-security-groups SecurityGroups group-id "${nameOrId}" \
        "${outputStyle}"
}


#
# Main script
#

if [[ ${nameOrId} =~ ^vpc- ]]; then
    # It looks like an ID.
    find-via-describe-vpcs 'vpc-id' "${nameOrId}" "${outputStyle}"
elif [[ ${nameOrId} =~ ^sg- ]]; then
    # It looks like a security group ID.
    find-via-describe-security-groups "${nameOrId}" "${outputStyle}"
else
    # It's expected to be a name.
    find-via-describe-vpcs 'tag:Name' "${nameOrId}" "${outputStyle}"
fi
